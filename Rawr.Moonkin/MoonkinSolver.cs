using System;
using System.Collections.Generic;

namespace Rawr.Moonkin
{
    // The interface public class to the rest of Rawr.  Provides a single Solve method that runs all the calculations.
    public class MoonkinSolver
    {
        private const int NUM_SPELL_DETAILS = 17;
        // A list of all currently active proc effects.
        public List<ProcEffect> procEffects;
        public static float BaseMana = 18635f;
        public static float OOC_PROC_CHANCE = 0.0583f;
        public static float EUPHORIA_PERCENT = 0.08f;
        public static float DRAGONWRATH_PROC_RATE = 0.11f;
        public static float ECLIPSE_BASE = 0.25f;

        #region Cast Distributions

        #region Base

        public static double[,] CastDistribution = new double[21, 12] {
{ 0.11354428974557, 0.166752803177867, 0.0342543889723753, 0.0340453464450231, 0.144502050002201, 0.20304272622321, 0.0382567115891809, 0.040545306372693, 0.0520824546503106, 0.0818431307696045, 0.0604457340856292, 0.0306850579663354, },
{ 0.115674527587932, 0.167231390559512, 0.0339482509807828, 0.0351720107473271, 0.146585544233997, 0.206665808321672, 0.0350602139610343, 0.0398844307344731, 0.0483165223110533, 0.0799928082699244, 0.0605542965906925, 0.030914195701599, },
{ 0.120192924171815, 0.175816691958664, 0.0304857488325735, 0.0328410232510132, 0.150240482414911, 0.2113318176076, 0.0353050537875782, 0.0410772016465075, 0.0422589548077961, 0.0698374167271659, 0.0590955733568724, 0.0315171114375026, },
{ 0.123672323203985, 0.174588474862865, 0.0293803732293601, 0.0343684699612852, 0.151486163057199, 0.21479383227978, 0.03223623514159, 0.0405902316067909, 0.0385519887896645, 0.072639118898929, 0.0600478484499033, 0.0276449405186482, },
{ 0.128355427069995, 0.179960088578316, 0.0281351957121318, 0.0330626066874402, 0.154690372753826, 0.220312609109074, 0.031049252857203, 0.0407991132337316, 0.038594052726854, 0.0619190879272937, 0.0532236142722874, 0.0298985790718476, },
{ 0.129719544936578, 0.182432270821909, 0.0255623459530936, 0.0338920226769223, 0.155866513531195, 0.22205353740186, 0.0295536675032293, 0.0416070700925293, 0.0359617578804102, 0.0619372390996434, 0.0529614768034695, 0.0284525532991605, },
{ 0.133533406502493, 0.186996077790641, 0.0250987337938937, 0.0328767600813048, 0.159165940762784, 0.227343250331264, 0.0280790753809548, 0.0403312064249778, 0.0347692769890886, 0.0554124001103259, 0.048518497476755, 0.0278753743555178, },
{ 0.134728396322452, 0.187685821358327, 0.0233262648085329, 0.0340315695529012, 0.159452011152207, 0.228171209350664, 0.0266971107870263, 0.0415781106561867, 0.0329998787341118, 0.055350431823573, 0.0486882541222424, 0.027290941331776, },
{ 0.137797778852325, 0.191576459117612, 0.0225152999320662, 0.0332252523784238, 0.161990657375462, 0.233791441333203, 0.0257694711350676, 0.0398937879655367, 0.0333172151305426, 0.0525099898247665, 0.0434027108246092, 0.0242099361303854, },
{ 0.13888487351448, 0.191075422708579, 0.0216949146723743, 0.0344381804603667, 0.161891313684604, 0.233551463184044, 0.0240949438037623, 0.0412795202050575, 0.0345774618444411, 0.0524312264449248, 0.0417779170591619, 0.0243027624182044, },
{ 0.141283774034094, 0.194450651842587, 0.0200351207815216, 0.0352366357555652, 0.164440342208797, 0.238655659044008, 0.0233925718397827, 0.0399468417125856, 0.0407056985540161, 0.0541101959503721, 0.0305515044624195, 0.0171910038142511, },
{ 0.141596071995812, 0.195258755216447, 0.019324846688207, 0.0346965890295011, 0.164156745599422, 0.238441496319914, 0.0224693072048948, 0.0408132451467432, 0.038659819913756, 0.0511192156280006, 0.0328915621936082, 0.0205723450636942, },
{ 0.142733908344728, 0.195775161332198, 0.016982449850045, 0.0362019731200338, 0.164568066348478, 0.23740457833837, 0.0226627330572473, 0.0434913058471866, 0.0272406639872942, 0.0529835322830202, 0.0421693885374151, 0.0177862389539831, },
{ 0.144763335556374, 0.19994012790798, 0.0148681298024402, 0.0342456025980318, 0.165587078947226, 0.240593044348007, 0.0227011824099879, 0.0426482273105463, 0.0238339436676805, 0.0443763052472442, 0.043492691892023, 0.0229503303124593, },
{ 0.145575410980454, 0.199948640091447, 0.0146149934719021, 0.035333422945119, 0.165952896722275, 0.239539119911433, 0.0213595229812691, 0.0457317274503693, 0.0217856760176068, 0.0399135295973456, 0.0435618725000389, 0.0266831873307397, },
{ 0.14704298362006, 0.20072322605382, 0.0156365691198389, 0.0348219094258196, 0.167998183830726, 0.243530870509846, 0.0201621522574186, 0.0412670159305284, 0.0261275357931958, 0.0437339370952469, 0.0382810088327755, 0.0206746075307244, },
{ 0.147312377751696, 0.20147072068503, 0.0140414419116581, 0.0353198429845847, 0.167677282732256, 0.241683504695759, 0.0207085191233406, 0.044249698560331, 0.0246462409154378, 0.0427029334377482, 0.0383330361228129, 0.0218544010793456, },
{ 0.14839412496299, 0.202377080102527, 0.0134244919558806, 0.0354818704684168, 0.168980185234758, 0.243224828902652, 0.020483300902823, 0.0427616920269725, 0.0263255908613734, 0.0419999932026877, 0.0361106218601165, 0.0204362195188023, },
{ 0.148345763513405, 0.20056910959922, 0.0134729047325562, 0.0375877572178809, 0.168228421760722, 0.242500592385268, 0.0191937823881836, 0.0456935664711237, 0.0242019988293208, 0.0414975499584906, 0.0376595130378226, 0.0210490401060067, },
{ 0.149188847797024, 0.201582830936888, 0.0137065727890268, 0.0375577769705863, 0.169766512674996, 0.244988098272587, 0.0185483172816252, 0.0438609927993772, 0.0260734551603962, 0.0412148158224109, 0.0343265700785487, 0.019185209416534, },
{ 0.148675311724754, 0.200312822995991, 0.0126544269769127, 0.0397526966926896, 0.168745724168973, 0.243214375776517, 0.0176799632140942, 0.0478724496115099, 0.0248042079680914, 0.0417053365246978, 0.035172803815675, 0.0194098805300955, },
};
        public static double[,] CastDistributionGoSF = new double[21, 12] {
{ 0.118293145881168, 0.17257518131829, 0.0359273845347973, 0.0348860978156558, 0.149948370969412, 0.210938099395089, 0.037702342178678, 0.0409885349634552, 0.0435671751456595, 0.08235451595766, 0.0411049791497797, 0.0317141726903559, },
{ 0.121962737388569, 0.176157071399132, 0.0343989110616886, 0.0348532776135842, 0.153022387098933, 0.216035881295074, 0.035643952484539, 0.0402743224920026, 0.0492246779541314, 0.0817145138234105, 0.0245368447658602, 0.0321754226230753, },
{ 0.125682579924232, 0.180751623207357, 0.0337230714145659, 0.0346264016373393, 0.156647461199426, 0.221683466532189, 0.0336450341757202, 0.0396096367464898, 0.0568157003055256, 0.073525669989042, 0.0143062259945321, 0.0289831288735816, },
{ 0.128227549026441, 0.181787168720501, 0.0298463409533927, 0.0349298523498321, 0.157829689148686, 0.222864023881688, 0.0331843932594802, 0.0392227555435912, 0.0634217119215353, 0.0731293359067358, 0.00624474723851964, 0.0293124320495965, },
{ 0.13163157672672, 0.18327511534416, 0.0300370774199327, 0.0353647081291262, 0.15988562182216, 0.228045452223868, 0.0300283428710166, 0.0393259000841626, 0.0618906449280029, 0.0631241408867936, 0.00790432263943264, 0.0294870969246245, },
{ 0.133953814983823, 0.184807987749689, 0.0282853056529504, 0.0353432610986766, 0.160509808838629, 0.229184424023658, 0.0278350392428688, 0.0401360346764071, 0.0519362265995176, 0.0617743119182248, 0.0169013449498924, 0.0293324402656631, },
{ 0.136704315254083, 0.18771220948401, 0.0259367184619906, 0.0352076904251297, 0.161732699843913, 0.231251355785158, 0.0275693976392499, 0.0414547974647644, 0.0359445896089791, 0.0572026259474635, 0.0313150430969258, 0.0279685569883326, },
{ 0.138575329688696, 0.191042603435448, 0.023580828993196, 0.0348379592188831, 0.162771460766236, 0.233203263998965, 0.0267414464249129, 0.0424163512653792, 0.0276705323542415, 0.054840601041633, 0.0358475129125826, 0.0284721098998264, },
{ 0.140880818697289, 0.193558708128579, 0.0221287838601276, 0.03519584284798, 0.164454446258186, 0.23654721209506, 0.026040668508504, 0.0420967361899053, 0.0290947670047422, 0.0540944983999902, 0.0312933281328122, 0.0246141898768241, },
{ 0.142361270501774, 0.195335451278241, 0.0218057683833494, 0.0350976884264472, 0.16554117228113, 0.238533096964711, 0.0245308952993155, 0.0422263962945178, 0.0276238837042364, 0.0527776794506769, 0.0292618116871884, 0.0249048857284127, },
{ 0.143620422939201, 0.198024945062066, 0.0196952886060778, 0.0370282082398117, 0.167314381098535, 0.241250387261682, 0.0236267145236597, 0.0425248519331207, 0.0256755513192841, 0.0547432997475804, 0.0289953858999403, 0.0175005633690411, },
{ 0.144272448619554, 0.198824486983744, 0.0184661046929182, 0.0367479088261654, 0.167261914973227, 0.241219411323148, 0.0231712168427065, 0.0427891420774174, 0.025874871279389, 0.0533729784315026, 0.0289280013056362, 0.019071514644592, },
{ 0.144856194185739, 0.198820203964352, 0.0176805212219617, 0.0382308874638547, 0.16794323022613, 0.242506864184918, 0.0220794147427185, 0.0428943143568646, 0.0241816568910943, 0.0580176416393772, 0.0288820272378155, 0.0139070438851743, },
{ 0.146600829401058, 0.202262901509461, 0.0150686000293309, 0.0367262863200192, 0.168145314501288, 0.243302919371292, 0.0227334752970506, 0.0446585710729196, 0.0205575088486317, 0.0472165510715966, 0.0316514413403625, 0.0210756012369901, },
{ 0.147805730059929, 0.202892708333221, 0.0150420746866352, 0.0366812414910092, 0.168981140990756, 0.244432632893725, 0.0213323378775501, 0.0451271967475918, 0.0198161339274222, 0.0444957062863616, 0.0303344543378791, 0.0230586423679196, },
{ 0.148686954717004, 0.203884394159203, 0.0151640998804601, 0.0363656153075601, 0.170130467521552, 0.246276975361791, 0.0208097052225703, 0.0434546175768934, 0.0200443975693076, 0.0450539315831305, 0.0298861070743728, 0.0202427340261556, },
{ 0.149316177283591, 0.204484619861559, 0.014199325168556, 0.0369107932124804, 0.170476043321732, 0.246499377698647, 0.0205962914646499, 0.0443481347767431, 0.0214381094675263, 0.0448390096477973, 0.0268755004432859, 0.0200166176534318, },
{ 0.149690858018531, 0.204367139912547, 0.0136423320339381, 0.0378479443994552, 0.170847325182815, 0.246888507347267, 0.0200394846917238, 0.0448193018788582, 0.0209280625980578, 0.0436014483262294, 0.0276015716018409, 0.0197260240087363, },
{ 0.150082044717236, 0.203405786305231, 0.0136233074949185, 0.0389634058958402, 0.171034355737253, 0.246995420932148, 0.0191564450108708, 0.0453688675516617, 0.0214812228197399, 0.0424959079062628, 0.0266151663100527, 0.0207780693187849, },
{ 0.150279783173824, 0.203885764541192, 0.0132236448917167, 0.0395916776952553, 0.171379640732536, 0.247681884207966, 0.0185125396008305, 0.0460342241294858, 0.0219180752382085, 0.0427670864671523, 0.0262429113784257, 0.0184827679434081, },
{ 0.150357194499048, 0.203400284505028, 0.0125205660399479, 0.0409110804547391, 0.171178233802167, 0.246734445039334, 0.0174552432166263, 0.0487122044059199, 0.021235584231856, 0.0416720727832642, 0.0261689912968036, 0.0196540997252651, },
};
        public static double[] BaseRotationDurations = new double[21] { 61.7484128198757, 58.4410216444842, 54.5300371513271, 51.7740598970803, 48.8778331360703, 46.3216917812559, 44.0279406124118, 42.191501571073, 40.3723441027671, 38.9778387006498, 37.3228460562144, 36.2581822584897, 35.1126195951782, 34.0201989284146, 33.0071718478967, 32.3398069941981, 31.802402557732, 31.436506267481, 30.9869058345863, 30.599396850029, 30.2399011730847, };
        public static double[] BaseRotationDurationsGoSF = new double[21] { 60.1741887204968, 56.6842977136945, 53.1252131027667, 50.5652420646919, 47.9482425764899, 45.7272200409659, 43.6769977331848, 41.7104406827699, 40.0018509892717, 38.4697992217528, 37.0162554800176, 35.94002202503, 34.9183025104515, 33.7287219968917, 32.7651648250471, 32.0552777257524, 31.5233158300153, 31.1012686083599, 30.7105615220661, 30.2758257724688, 29.945274090269, };
        public static double[] BaseNGUptimes = new double[21] { 0.477816050861625, 0.486896847899544, 0.536398297605973, 0.565047056963272, 0.581035875376891, 0.638775642408079, 0.654872335567486, 0.694393574259512, 0.717652890976948, 0.741140825193215, 0.774940559732745, 0.793013385338323, 0.80503594013552, 0.826082762061803, 0.849710600335079, 0.814588301734728, 0.845322643855661, 0.808235465384192, 0.845749493951931, 0.801265008010468, 0.837639587418327, };
        public static double[] BaseNGUptimesGoSF = new double[21] { 0.490396291016325, 0.503069307348664, 0.548418898807246, 0.572330295966575, 0.587710783551902, 0.617278831842144, 0.621833723258052, 0.669899384685075, 0.689074121237907, 0.717824834639912, 0.730796562123524, 0.749242554469897, 0.743623679982903, 0.788161758980845, 0.797745416023186, 0.782947528034849, 0.792398306458121, 0.788707369693241, 0.795226472252849, 0.798097368970847, 0.789060749209232, };
        public static double[] BasePercentMoonfiresExtended = new double[21] { 0.613239859689311, 0.818913161850583, 0.895507957343967, 0.907963189542185, 0.84566887719297, 0.712389151506192, 0.581631167919764, 0.644146325224846, 0.750165176765467, 0.851979763329881, 0.927494891641212, 0.931895204678768, 0.920405674382308, 0.91986411695926, 0.923866327485599, 0.930210250626755, 0.977404491228238, 0.970403598997683, 0.981495426900734, 0.976145213032752, 0.987871817878124, };

        #endregion

        #region 4T12

        public static double[,] T12CastDistribution = new double[21, 12] {
{ 0.101038105021358, 0.15356624483369, 0.0314092890007111, 0.0304399425155846, 0.156079304084948, 0.219107043311261, 0.0407015245427171, 0.0437854579279916, 0.0468710454881553, 0.078850841028463, 0.0650654988927137, 0.033085703352406, },
{ 0.10349418069745, 0.154541661820997, 0.0306591788430439, 0.0316873494857147, 0.157932908824873, 0.222157835440047, 0.0380054922406522, 0.0432446472979822, 0.0427009881168066, 0.0768810391071394, 0.0653877208001037, 0.0333069973251902, },
{ 0.108665080034236, 0.160270752272431, 0.0278495200038984, 0.0298304666785931, 0.161645346770324, 0.228423232511204, 0.0376800128465553, 0.0439934014231288, 0.0380162210654072, 0.0668069932617724, 0.0628048726644076, 0.0340141004680424, },
{ 0.110336882932678, 0.162071866896727, 0.0261536197870972, 0.0310970735606637, 0.163022935310288, 0.230974062213644, 0.0348184866740754, 0.043898417851085, 0.0356597344075959, 0.0670229060653916, 0.0623054909730752, 0.0326385233276793, },
{ 0.113700237174213, 0.167571803311606, 0.0256139611715002, 0.0297104460733027, 0.166730777752114, 0.237098251305739, 0.0332350100406351, 0.0437246435504616, 0.0342818388089794, 0.0599985543723098, 0.0570255960012348, 0.0313088804379045, },
{ 0.115348186182279, 0.170347711406918, 0.0231060155796655, 0.0305386766076421, 0.167834989185672, 0.239172695141465, 0.0316902354534105, 0.044410557597285, 0.0317134466932775, 0.0596160298229264, 0.0563315690446465, 0.0298898872848125, },
{ 0.118591645357887, 0.173764547551688, 0.0231452492590439, 0.0296507787390457, 0.171435018790803, 0.245280693745321, 0.0295839616606004, 0.0432341173070503, 0.0302562668351364, 0.0532489437633593, 0.0524007269591441, 0.0294080500309212, },
{ 0.119593903526238, 0.174749468099099, 0.0208603602887957, 0.0308674418828758, 0.17170886235845, 0.246143604518364, 0.0286178181658124, 0.0445863049419317, 0.0309490924803055, 0.0543251246050624, 0.0501571676332344, 0.0274408514998316, },
{ 0.121897961769311, 0.17774892946596, 0.0213372783941181, 0.0304753231587314, 0.174875255998611, 0.252480230387339, 0.0267452471323406, 0.0419719908744151, 0.0361544490310327, 0.0542231613344237, 0.0400794423785539, 0.0220107300751628, },
{ 0.122923917231782, 0.177386510221018, 0.0199919058951902, 0.0320721332278507, 0.175002613443748, 0.252763194378074, 0.0255694733296097, 0.0424743055780156, 0.045065581993633, 0.0551192547996818, 0.0306807999766456, 0.020950309924751, },
{ 0.125643463074168, 0.183406950697315, 0.0153160369875265, 0.0298887381044083, 0.176585012242806, 0.254366954227354, 0.0275656406934222, 0.0450844956981107, 0.0217402700134139, 0.0446831035447743, 0.0492902421267978, 0.0264290925899022, },
{ 0.125651109996278, 0.183761817405134, 0.0148930921173672, 0.0301677332490076, 0.176599451769544, 0.254824585388122, 0.0263503183783103, 0.0452316732781072, 0.0217239516657785, 0.0461814699192758, 0.049439128609983, 0.0251756682230923, },
{ 0.126714067042168, 0.18436119936893, 0.0129551598089953, 0.0317975180382342, 0.177193428670241, 0.254083818108223, 0.0253547772324883, 0.0490137931813736, 0.0200801709143042, 0.0413017792643445, 0.0483866894038404, 0.0287575989668573, },
{ 0.127471750134974, 0.185960606071569, 0.0129842229778834, 0.0315463831085822, 0.178805860504966, 0.259300445685925, 0.0243932336096091, 0.0454063151927124, 0.0251821166367918, 0.0439871982607545, 0.0418834747200976, 0.023078393096135, },
{ 0.127833485321052, 0.18609118667072, 0.0131346977317642, 0.032333045535861, 0.179030143805074, 0.258242992174123, 0.0225215358507949, 0.0493023465711656, 0.0230457231848111, 0.0431084213116583, 0.0419374347027554, 0.0234189871402212, },
{ 0.129167933630983, 0.187150490968913, 0.0133502036823857, 0.0318992847603158, 0.181357113607579, 0.26219825664332, 0.0219639417993629, 0.0445150453347566, 0.0252169480447132, 0.0428590859376986, 0.0389819167414787, 0.0213397788484933, },
{ 0.128931985526728, 0.186935070211574, 0.0129041579875229, 0.0329019681059389, 0.18101426812132, 0.261375101246929, 0.0215239089145627, 0.047075234665264, 0.0239078116003963, 0.0435760365188824, 0.0389644507217485, 0.0208900063791331, },
{ 0.129793120153334, 0.188196988892401, 0.0125445562814997, 0.0322569135418431, 0.182287945267574, 0.262480558058474, 0.0212155491308855, 0.0460519855530356, 0.0245780313473196, 0.0404033571553129, 0.0380081602131565, 0.0221828344051633, },
{ 0.129818158454549, 0.186481319692762, 0.0121950299868474, 0.0344619244410075, 0.181852102960457, 0.26197686658535, 0.0204145039272429, 0.0483981391835747, 0.0246500763609611, 0.04117680239569, 0.0369606356706889, 0.0216144403408688, },
{ 0.130509764411773, 0.188012146965495, 0.0120765520560973, 0.0338544226561164, 0.183237179649978, 0.264493391245648, 0.0201017917381632, 0.0469639707283269, 0.0241160548914084, 0.0400830739140918, 0.0362593353827926, 0.0202923163601093, },
{ 0.129918739131528, 0.185987384351722, 0.0115685997636258, 0.0366560794774236, 0.181865440822319, 0.262800569464406, 0.0184236436050347, 0.0517164206531432, 0.0223714014356538, 0.0398282708901943, 0.0373040773574066, 0.0215593730475437, },
};
        public static double[,] T12CastDistributionGoSF = new double[21, 12] {
{ 0.107036401220675, 0.160919462307949, 0.0325530638198163, 0.0313383687208016, 0.163710236465745, 0.22949254669484, 0.0410128207000176, 0.0432888964908731, 0.0502914711994888, 0.0790789454471879, 0.0268119433661447, 0.0344658435664616, },
{ 0.108991862925932, 0.162351640926624, 0.0315607813934655, 0.0315635548247564, 0.16555391403091, 0.232323405662688, 0.0384832658956181, 0.0421681160445254, 0.0628705672551021, 0.078728527358253, 0.0107957546393872, 0.0346086090427381, },
{ 0.112159637762343, 0.164584831991607, 0.0317615205709959, 0.032097241039731, 0.168317160958578, 0.238382495629329, 0.0349573272489646, 0.0421062818501003, 0.0646767847246871, 0.0679616440152546, 0.00915366288369067, 0.0338414113247183, },
{ 0.114199693786013, 0.16574561036324, 0.0285226445023678, 0.0324583376838546, 0.169068467954923, 0.239379789688747, 0.0339508408342591, 0.0424313001740522, 0.0566136859403381, 0.0679140669362579, 0.0164049926111688, 0.0333105695247788, },
{ 0.117377423267093, 0.168953823308315, 0.0264621698823205, 0.0322246627874255, 0.170933094868738, 0.242940480063688, 0.032727791478957, 0.0439480960821148, 0.0422307231683608, 0.0612756111799502, 0.0296123249618751, 0.0313137989511624, },
{ 0.119717310847573, 0.172990211396768, 0.0236850934575943, 0.0314390322927799, 0.172178187223654, 0.245057644508363, 0.031399179228295, 0.0454539307206988, 0.028443002636345, 0.0573510056496395, 0.0396962419567308, 0.0325891600815592, },
{ 0.121622902518779, 0.176384575901365, 0.023030566815963, 0.0312936002436529, 0.174646515230897, 0.249754293205278, 0.0301286449388256, 0.044929014565863, 0.0282991213846736, 0.0556724469525245, 0.035140624848365, 0.0290976933938141, },
{ 0.123005981788729, 0.1790415098273, 0.0216660355865376, 0.0316096691402881, 0.176252304062915, 0.252840525342299, 0.0287148992700388, 0.0447316597655573, 0.0285379397928284, 0.0539715769309722, 0.0306926973038342, 0.0289352011886997, },
{ 0.124660473851509, 0.181324584153888, 0.0200224904000319, 0.0315174738339504, 0.177818465820354, 0.255211879402587, 0.0279841513657836, 0.0447585917458204, 0.0296442218541695, 0.0510040427817167, 0.029077510267706, 0.0269761145224821, },
{ 0.125089105930266, 0.181925384518406, 0.0192499679261869, 0.032936317768201, 0.178400537284218, 0.256218461007689, 0.0265511902379043, 0.044773684828574, 0.0256772019830322, 0.0582704935613441, 0.0319524327138323, 0.0189552222403463, },
{ 0.127670206063269, 0.186184336243488, 0.015567180106883, 0.032109626618747, 0.179776618103823, 0.258151140103346, 0.0274693470732795, 0.0471376058484464, 0.0179234172519018, 0.0469754863498047, 0.0359238963098056, 0.025111139927205, },
{ 0.127767114117565, 0.18683386158332, 0.0148377800700323, 0.032085118111008, 0.179715777098302, 0.258557505637582, 0.0265686775914568, 0.0472653909866733, 0.0182866941545012, 0.047569483083796, 0.0358509245287697, 0.0246616730369944, },
{ 0.128788903692016, 0.18776909394898, 0.0142351736914603, 0.0324671917114691, 0.180849068698294, 0.260869873279376, 0.0253855301880096, 0.0472863594706567, 0.0203524423572945, 0.0457694141216519, 0.0308302369654185, 0.0253967118753727, },
{ 0.129136682051101, 0.188640714368901, 0.0133249939254897, 0.0333110249848097, 0.181503232331555, 0.262665935238313, 0.0244080150446724, 0.0480325885718753, 0.0204578261374041, 0.0458052140547137, 0.0305258876868189, 0.0221878856043459, },
{ 0.129966908071516, 0.189068387736786, 0.0136459363897812, 0.0334342735490197, 0.18268397888276, 0.26437905490703, 0.0227103170723532, 0.0478842978622655, 0.0205886771698889, 0.0448064047760831, 0.0282394522221964, 0.0225923113603199, },
{ 0.130954051190389, 0.189850618827196, 0.0134094298149031, 0.0334240974485123, 0.184089326849219, 0.265877784911426, 0.0223271139801023, 0.046544445923856, 0.0203868253708574, 0.0437280232017153, 0.0281838467396806, 0.0212244357421435, },
{ 0.130985973466222, 0.190457836854027, 0.0130084098887511, 0.0336724634420881, 0.184246496626834, 0.266078267879164, 0.0216500840744354, 0.0474434728814098, 0.0204799496939006, 0.0428664492060814, 0.0277368205273664, 0.0213737754597197, },
{ 0.131232844394433, 0.190618677920713, 0.0123450521864817, 0.0338389110620986, 0.184374937234812, 0.266007964819481, 0.0213773259058093, 0.0482972575601911, 0.0206640584895594, 0.0411625443256039, 0.0277331136029252, 0.0223473124978908, },
{ 0.131612024735674, 0.189746633744743, 0.012084174482695, 0.0351876538544694, 0.184890949577895, 0.266311514900954, 0.0207201709527205, 0.0485572456019472, 0.0208427647589461, 0.0406522677178093, 0.0267500896984748, 0.0226445099736726, },
{ 0.131644402314997, 0.190205807457816, 0.0119567850908917, 0.0355468191972729, 0.185047308185748, 0.26712004947066, 0.0197636034982375, 0.0496762969002041, 0.0201141582255486, 0.0407457973223828, 0.027884427765585, 0.0202945445706559, },
{ 0.131793737117686, 0.189287046537958, 0.0117423134902326, 0.0369956284900478, 0.184910520399431, 0.266680628385383, 0.0182067307381579, 0.0523880857470756, 0.0200682182052645, 0.0400391995671417, 0.0265732472697235, 0.0213146440518979, },
};
        public static double[] T12RotationDurations = new double[21] { 56.9922820434784, 53.9336501094351, 50.4123935924463, 47.7670952657004, 45.100511806763, 42.7020942583399, 40.6003315183947, 38.881049344166, 37.2191829145491, 35.891488975897, 34.4427940260126, 33.4392194634959, 32.2923523190397, 31.522470419146, 30.5629844705882, 29.949058655309, 29.4398731525189, 29.129445901852, 28.7004015575898, 28.3438202177627, 28.0203805768116, };
        public static double[] T12RotationDurationsGoSF = new double[21] { 55.228202537267, 52.3565500414079, 49.2727050000002, 46.9173222213822, 44.4881473977458, 42.153904432569, 40.1075590598966, 38.3250655477481, 36.7725243544136, 35.5997405120515, 34.1134349394276, 33.1491351411001, 32.0622085762063, 31.1919750473487, 30.2865075976132, 29.6032830551905, 29.1286934788359, 28.7870972455936, 28.3802104916094, 28.02877166741, 27.6979136014492, };
        public static double[] T12NGUptimes = new double[21] { 0.516711283108874, 0.527700418419122, 0.574181414075191, 0.610742872949325, 0.628418538329625, 0.691256367609715, 0.709932038328095, 0.750497996951443, 0.772511612069365, 0.799380168279816, 0.816189771317051, 0.834925376332387, 0.868930197565, 0.824298825343482, 0.858365919222601, 0.811925719460801, 0.85350929329135, 0.809299186659441, 0.852509736413664, 0.802824236217008, 0.854293273183431, };
        public static double[] T12NGUptimesGoSF = new double[21] { 0.531721892802758, 0.54534800536688, 0.577902355921952, 0.59650335603268, 0.609113908883988, 0.663696193750814, 0.68532286128222, 0.726484478595695, 0.752928276891568, 0.745080412110968, 0.777741980135358, 0.789460995272492, 0.806118966805221, 0.797227464560336, 0.808784747385725, 0.795544031880338, 0.813676366850112, 0.804976867858007, 0.814409801599291, 0.806671537144363, 0.800486844275861, };
        public static double[] T12PercentMoonfiresExtended = new double[21] { 0.839771601651001, 0.906882756277537, 0.864585374784999, 0.745500010221599, 0.59228235254801, 0.614633265025339, 0.754796326600857, 0.883853530787696, 0.911892086687594, 0.901946447196677, 0.907188835913489, 0.912567146199023, 0.964296243550269, 0.982828725146328, 0.986932339181389, 0.993896011695957, 0.996325894736873, 0.994468736842154, 0.99705015204681, 0.994780421052677, 0.997994210526334, };

        #endregion

        #region 4T13

        public static double[,] T13CastDistribution = new double[21, 12] {
{ 0.106034109834304, 0.158727377099433, 0.0480611518367137, 0.0336536079608171, 0.137173045811532, 0.189985184023255, 0.0607757913627565, 0.0408658706806648, 0.0511784067336627, 0.0817296405493133, 0.0611835239615993, 0.0306322901459487, },
{ 0.106611050338341, 0.158167428952641, 0.0495692762922636, 0.0349690217332934, 0.139727309557476, 0.19657030294419, 0.0554529373143694, 0.0400533344883388, 0.0474684341066764, 0.0795992412882043, 0.0609753070051959, 0.0308363559790106, },
{ 0.112235767767044, 0.168177384950836, 0.0444097316276319, 0.0323067166931356, 0.143886064743264, 0.201586084407426, 0.0545466463128118, 0.0412833668834989, 0.0408964014584648, 0.0693413611548312, 0.0598877168487115, 0.0314427571523451, },
{ 0.113796943344319, 0.1671390325739, 0.0435292901222136, 0.0339348598110388, 0.145207003152313, 0.204266168250858, 0.0536665500552979, 0.0409290046093736, 0.0374298706311572, 0.0727072941521249, 0.0605121025790988, 0.0268818807183049, },
{ 0.119680730042964, 0.172408167191497, 0.0412706920098127, 0.0323402743017896, 0.149091046283171, 0.210300342661238, 0.0508744514338607, 0.0413006439082159, 0.0373226574015461, 0.0615268153010425, 0.0540441686821798, 0.0298400107826834, },
{ 0.11965149358141, 0.175970135444472, 0.0397495467358268, 0.0332914794995842, 0.150818719012875, 0.21198978822268, 0.0485225413855702, 0.0416678274020836, 0.0345066792685245, 0.0615550140233678, 0.0539171103562762, 0.0283596650673296, },
{ 0.122048938132243, 0.181464901926273, 0.0395041637315468, 0.0322591026459584, 0.155307670088953, 0.216512583635189, 0.0461618697570946, 0.0408923611925043, 0.0329957134337704, 0.0550732445665684, 0.0499284910113486, 0.0278509598785506, },
{ 0.123086184836282, 0.181461850269351, 0.0380741313093011, 0.0333673773092884, 0.155881734563965, 0.21846342421848, 0.0441960890647607, 0.0419062631736153, 0.0323214319759523, 0.0550879547346635, 0.0489535515537187, 0.027200006990622, },
{ 0.12609232554927, 0.185809709973198, 0.035907851828125, 0.0325707704440056, 0.158593596528422, 0.224519558810017, 0.043482924473517, 0.0400791728062986, 0.0326256319684746, 0.0525155177544071, 0.0438464128250991, 0.0239565270391666, },
{ 0.126938054948679, 0.185559356008723, 0.0361410184141874, 0.0337261672137209, 0.159126621076707, 0.224672686972255, 0.0394714894934666, 0.0417313952773664, 0.0337587937328245, 0.0522714717016269, 0.0423679178916377, 0.0242350272688048, },
{ 0.128994997998969, 0.186761478248735, 0.0376162702856688, 0.035112501773248, 0.162598249472639, 0.231511337830559, 0.035882466239088, 0.0395423347823028, 0.043650964819913, 0.0555720353888401, 0.027323935215033, 0.0154334279450045, },
{ 0.130455863134349, 0.188559102686473, 0.0341311577691219, 0.0342441120724651, 0.162195227720416, 0.230232883393016, 0.0369752222532011, 0.0408267937143371, 0.0388535558241736, 0.050976674425511, 0.0322909675608863, 0.0202584394460494, },
{ 0.132199754953794, 0.188282018113298, 0.031722464136643, 0.0357200581135999, 0.162526563308735, 0.231199279320981, 0.0349063955300215, 0.0438959346534428, 0.0250869521523766, 0.0529205512738827, 0.0440144762912777, 0.017525552151948, },
{ 0.134783029946343, 0.191814243673098, 0.0309783978682171, 0.0340199707301747, 0.163874132542741, 0.233475406965269, 0.0342709882095988, 0.0427175991874157, 0.0241911735554781, 0.0446815353535011, 0.0428419418830933, 0.0223515800850703, },
{ 0.135510848469663, 0.191924589439889, 0.0309166521567412, 0.0350664200687133, 0.164184655435277, 0.232371714563577, 0.0324777785799525, 0.0460370916163774, 0.0216753867779896, 0.0396420365989867, 0.0434603411885115, 0.0267324851043228, },
{ 0.137487899762086, 0.192727369732543, 0.0309582296163832, 0.0344541047966462, 0.16611572096728, 0.235988273704992, 0.0325755156195338, 0.0413115276814899, 0.0259645873284555, 0.0441393363466518, 0.0382260917310674, 0.020051342712871, },
{ 0.137907368167681, 0.193435268212803, 0.0291728316797004, 0.03520189955372, 0.165644578976841, 0.234208120444213, 0.0326337355510787, 0.0446107040419895, 0.0244531356050969, 0.0428558119654531, 0.0383955112507614, 0.0214810345506623, },
{ 0.140088843953874, 0.19395218268737, 0.0284326525413272, 0.0351263001190159, 0.166961055141366, 0.236113554673662, 0.0321023417069025, 0.0428383493812369, 0.0257109108495504, 0.0420374800479248, 0.0364814490480721, 0.0201548798496977, },
{ 0.140144829349482, 0.192999782129224, 0.0273868539360495, 0.0374157740431344, 0.166255497755135, 0.234641254378556, 0.0313236495245144, 0.0457584340363894, 0.0236802651855433, 0.0415265677990973, 0.0380913724167639, 0.0207757194461108, },
{ 0.141167334236924, 0.193627208096514, 0.0284424288582151, 0.0373971872542564, 0.167621836899746, 0.237236714659267, 0.030063937300608, 0.0439390627697186, 0.0264133455978723, 0.0421808968883661, 0.033838799364503, 0.0180712480740092, },
{ 0.139994930742662, 0.19299230791845, 0.0275466065771628, 0.0399083839001023, 0.166378309617208, 0.235683320792616, 0.0288459017279175, 0.047725011858725, 0.0247708306351589, 0.0421287662873729, 0.0350609065707269, 0.0189647233718984, },
};
        public static double[,] T13CastDistributionGoSF = new double[21, 12] {
{ 0.110284584731521, 0.164347474510765, 0.0491552650869543, 0.0346949410654686, 0.142476982569352, 0.195996328638895, 0.0629425785670192, 0.0414827279312394, 0.04146410351271, 0.0819237541620151, 0.0436111554119125, 0.0316201038121472, },
{ 0.112692231800678, 0.167477008793891, 0.0488615982915457, 0.0341827471229324, 0.145460029049533, 0.20524745453423, 0.0576803918418507, 0.0408530027564026, 0.0474397310384698, 0.0811188929703346, 0.0269381760981382, 0.0320487357019938, },
{ 0.115502948451985, 0.172868492802563, 0.0474567988823549, 0.0341772507485864, 0.150940228396011, 0.210508169856182, 0.0550496384540985, 0.0400387138458182, 0.0554550036469802, 0.0732930319977187, 0.0161455225111606, 0.0285642004065411, },
{ 0.11558252071429, 0.172863002533906, 0.0479874849740693, 0.0345643201839057, 0.153076203398993, 0.21310473720127, 0.0521100388286865, 0.039556783821074, 0.0632957715468436, 0.0731225478267959, 0.00620009003661426, 0.0285364989335515, },
{ 0.119495100307236, 0.175946174396054, 0.0460292806070218, 0.0346712203723858, 0.155534585749896, 0.218111216042078, 0.0487849844523378, 0.0395839660041365, 0.0624407919684006, 0.0628654157840002, 0.00720400335156359, 0.0293332609648887, },
{ 0.121818899624814, 0.177627832395295, 0.043363407406235, 0.034855706878466, 0.156776309098513, 0.21960213475799, 0.04592282502259, 0.0406338504338773, 0.0523126496046641, 0.0614296864306756, 0.0162779839673332, 0.0293787143795453, },
{ 0.124591377878364, 0.180867130949917, 0.042507720881726, 0.0346141440639926, 0.158769685224557, 0.220805121988587, 0.0445377281658303, 0.041623548890854, 0.0363147539397328, 0.0565329814026873, 0.0307440269001164, 0.0280917797136353, },
{ 0.126781459136418, 0.183872966912864, 0.0398003026514479, 0.0343207171304048, 0.159839741817594, 0.223278985264128, 0.0430656959775486, 0.0427462961700474, 0.0267945572125576, 0.0543297730543586, 0.0365551737669154, 0.0286143309057159, },
{ 0.12850178460877, 0.187553747280288, 0.0374690704308342, 0.0343961443293633, 0.161817633487343, 0.227922433716664, 0.0413919998168611, 0.0423424060069553, 0.028291224661641, 0.0540293290945972, 0.0319245159261154, 0.0243597106405681, },
{ 0.130040551785349, 0.189454044071614, 0.0371083284214954, 0.0346254363811397, 0.162934355045464, 0.229715915737903, 0.0394470734353725, 0.0425349593915276, 0.0270227708696426, 0.0526074353204069, 0.0297306668251412, 0.0247784627149451, },
{ 0.131182616160647, 0.190557106318471, 0.0363983168159425, 0.036934313280149, 0.165064447524742, 0.233666436975952, 0.0370822941574996, 0.0425482075497806, 0.026663768804311, 0.0564822629634085, 0.0279163956675182, 0.0155038337815795, },
{ 0.132281852803126, 0.192123706637001, 0.034099682073721, 0.0363207633836009, 0.165080155254982, 0.233873356187787, 0.036645010517232, 0.0428222304112149, 0.0266245492057736, 0.0535593633986461, 0.0280270393914045, 0.0185422907355106, },
{ 0.13381752457878, 0.191595040709225, 0.032595510540115, 0.0376079096745009, 0.165971108236015, 0.23586282026938, 0.0347347043502348, 0.0431440193885211, 0.0242896445052132, 0.057450381343426, 0.0287591632336797, 0.0141721731709093, },
{ 0.136395229284991, 0.194045278153274, 0.0314662464553818, 0.0363402712953602, 0.166464286129283, 0.236428991652153, 0.0339316093653234, 0.0446958654118858, 0.021153231224229, 0.0472080308384472, 0.0310548146770971, 0.0208161455125747, },
{ 0.137901826615861, 0.19479330875781, 0.0311354486555718, 0.0362464910065478, 0.167184199208262, 0.237327653152427, 0.0325734141331957, 0.0453029693173699, 0.0196543496004682, 0.0442721418887413, 0.0305476356904174, 0.0230605619733278, },
{ 0.138772367805735, 0.195788876644242, 0.0309989247748406, 0.035870414036913, 0.168289637669525, 0.238819935750299, 0.0327640706206731, 0.0436287499173023, 0.019411863997723, 0.0450048814851256, 0.0305840449117242, 0.0200662323858972, },
{ 0.139830714397342, 0.196374223015381, 0.0300590331866326, 0.036693839072811, 0.168570449126097, 0.239255405493968, 0.0317261787732591, 0.0446081174412567, 0.021174311741605, 0.0450797779827891, 0.0270213699127357, 0.0196065798561224, },
{ 0.141450205474787, 0.196301807017677, 0.0283547637607562, 0.037468106629936, 0.168963897487128, 0.239296970981259, 0.0317715231370412, 0.0448269546593205, 0.0207533318701611, 0.0435147414599936, 0.0277155088685895, 0.0195821886533518, },
{ 0.142059282024773, 0.19572144838922, 0.0280589064386765, 0.0388880026492955, 0.169020305880547, 0.23903440045555, 0.0305736168941049, 0.0456303788573298, 0.0210760339723682, 0.0424360796888693, 0.0268750025241001, 0.0206265422251659, },
{ 0.142144258091637, 0.195914791942569, 0.0284185235397647, 0.0392988422485656, 0.169185301835579, 0.240164065453846, 0.0295837039429101, 0.0460948387390322, 0.0218808296768982, 0.0430706041946092, 0.0261452389571097, 0.0180990013774798, },
{ 0.142127295461394, 0.195827838405179, 0.0275230295559482, 0.0408840345906751, 0.168835742256107, 0.238996105374457, 0.0283526498609175, 0.0489081858687582, 0.0213519361181554, 0.0421007979333501, 0.0260669432133206, 0.0190254413617371, },
};
        public static double[] T13RotationDurations = new double[21] { 61.5479940455486, 58.2096458473823, 54.3903679757201, 51.6577690485196, 48.7938617049111, 46.3157495389373, 43.9911121025643, 42.1540344693309, 40.3059669328063, 38.9235184930266, 37.2728588730784, 36.1798843474335, 35.0610753727702, 33.9879608921996, 32.985354000169, 32.3462280879121, 31.8404906975635, 31.4959453062333, 31.0555585485451, 30.6996709985666, 30.3575852919255, };
        public static double[] T13RotationDurationsGoSF = new double[21] { 60.0497666335405, 56.5354628808049, 53.0430409683797, 50.4518968704052, 47.8617846054754, 45.6807668776812, 43.6556073534002, 41.6848216852585, 39.9392134048558, 38.4132691345238, 36.9915483530959, 35.8733102035457, 34.8703969098386, 33.7037774913009, 32.7635592125011, 32.0606049345437, 31.5656411063331, 31.1688314975272, 30.7858664783696, 30.377958125179, 30.0563117751551, };
        public static double[] T13NGUptimes = new double[21] { 0.477408909936459, 0.494918180381523, 0.536770609674968, 0.563249907171456, 0.583627971741676, 0.637294463358066, 0.654176744223062, 0.696418010553585, 0.71890570478718, 0.741190652079288, 0.773777666382634, 0.796004339260429, 0.805562674885214, 0.825807521881992, 0.850884701528389, 0.815242155333165, 0.844639376178784, 0.807779172021585, 0.845747340224536, 0.800946587127432, 0.837148913698044, };
        public static double[] T13NGUptimesGoSF = new double[21] { 0.489003073841723, 0.509318993010904, 0.54854466937462, 0.572611874063779, 0.589448926180908, 0.619125798813967, 0.62205652126131, 0.669920790544239, 0.689393774496556, 0.718098136132192, 0.725342963988176, 0.751954965887332, 0.745275661386602, 0.787604758404785, 0.797752742477346, 0.782809086100741, 0.790147114209859, 0.78637743582173, 0.793641639838833, 0.797331398222844, 0.788161176681596, };
        public static double[] T13PercentMoonfiresExtended = new double[21] { 0.587478765020833, 0.792563816403645, 0.876431402476501, 0.905560820949161, 0.845266152046767, 0.706916216619953, 0.580215592314092, 0.637978815371785, 0.748759475355086, 0.851105953216357, 0.927725966288625, 0.929667064327872, 0.915920175537127, 0.910575052631733, 0.911388538011882, 0.911070158730294, 0.978214404344347, 0.962732290727026, 0.982758491228204, 0.971738380952573, 0.983178964076986, };

        #endregion

        public static string[] CastDistributionSpells = new string[12] { "Starfire", "Wrath", "Starsurge", "Shooting Stars", "Starfire (Eclipse)", "Wrath (Eclipse)", "Starsurge (Eclipse)", "Shooting Stars (Eclipse)", "Moonfire", "Insect Swarm", "Moonfire (Eclipse)", "Insect Swarm (Eclipse)" };

        #endregion

        // A list of all the damage spells
        private Spell[] _spellData = null;
        private Spell[] SpellData
        {
            get
            {
                if (_spellData == null)
                {
                    _spellData = new Spell[] {
                        new Spell()
                        {
                            Name = "SF",
                            BaseDamage = (1214f + 1514f) / 2.0f,
                            SpellDamageModifier = 1.231f,
                            BaseCastTime = 3.2f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Arcane,
                            BaseEnergy = 20
                        },
                        new Spell()
                        {
                            Name = "MF",
                            BaseDamage = (197.0f + 239.0f) / 2.0f,
                            SpellDamageModifier = 0.18f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = new DotEffect()
                                {
                                    BaseDuration = 12.0f,
                                    BaseTickLength = 2.0f,
                                    TickDamage = 93.0f,
                                    SpellDamageModifierPerTick = 0.18f
                                },
                            School = SpellSchool.Arcane
                        },
                        new Spell()
                        {
                            Name = "W",
                            BaseDamage = (831f + 937f) / 2.0f,
                            SpellDamageModifier = 3.075f/3.5f,
                            BaseCastTime = 2.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = null,
                            School = SpellSchool.Nature,
                            BaseEnergy = 40/3f
                        },
                        new Spell()
                        {
                            Name = "IS",
                            BaseDamage = 0.0f,
                            SpellDamageModifier = 0.0f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.08f),
                            DotEffect = new DotEffect()
                            {
                                BaseDuration = 12.0f,
                                BaseTickLength = 2.0f,
                                TickDamage = 136.0f,
                                SpellDamageModifierPerTick = 0.13f
                            },
                            School = SpellSchool.Nature
                        },
                        new Spell()
                        {
                            Name = "SS",
                            BaseDamage = (1018 + 1404) / 2f,
                            SpellDamageModifier = 1.228f,
                            BaseCastTime = 2.0f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Spellstorm,
                            BaseEnergy = 15
                        }
                    };
                }
                return _spellData;
            }
        }
        public Spell Starfire
        {
            get
            {
                return SpellData[0];
            }
        }
        public Spell Moonfire
        {
            get
            {
                return SpellData[1];
            }
        }
        public Spell Wrath
        {
            get
            {
                return SpellData[2];
            }
        }
        public Spell InsectSwarm
        {
            get
            {
                return SpellData[3];
            }
        }
        public Spell Starsurge
        {
            get
            {
                return SpellData[4];
            }
        }
        private void ResetSpellList()
        {
            // Since the property rebuilding the array is based on this variable being null, this effectively forces a refresh
            _spellData = null;
        }

        // The spell rotations themselves.
        private SpellRotation[] rotations = null;
        public SpellRotation[] Rotations
        {
            get
            {
                if (rotations == null)
                {
                    rotations = new SpellRotation[3]
                    {
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Unused" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Lunar Only", StarfallCastMode = StarfallMode.LunarOnly } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall On CD", StarfallCastMode = StarfallMode.OnCooldown } },
                    };
                    //RecreateRotations();
                }
                return rotations;
            }
        }

        // Results data from the calculations, which will be sent to the UI.
        RotationData[] cachedResults = new RotationData[3];

        public void Solve(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            CalculationOptionsMoonkin calcOpts = character.CalculationOptions as CalculationOptionsMoonkin;
            DruidTalents talents = character.DruidTalents;
            procEffects = new List<ProcEffect>();
            UpdateSpells(character, ref calcs);

            float trinketDPS = 0.0f;
            float baseSpellPower = calcs.SpellPower;
            float baseHit = 1 - Math.Max(0, calcs.SpellHitCap - calcs.SpellHit);
            float baseCrit = calcs.SpellCrit;
            float baseHaste = calcs.SpellHaste;
            float baseMastery = calcs.Mastery;
            float sub35PercentTime = (float)(character.BossOptions.Under20Perc + character.BossOptions.Under35Perc);

            BuildProcList(calcs);

            float maxDamageDone = 0.0f, maxBurstDamageDone = 0.0f;
            SpellRotation maxBurstRotation = Rotations[0];
            SpellRotation maxRotation = Rotations[0];

            float manaPool = GetEffectiveManaPool(character, calcOpts, calcs);

            float manaGained = manaPool - calcs.BasicStats.Mana;

            float oldArcaneMultiplier = calcs.BasicStats.BonusArcaneDamageMultiplier;
            float oldNatureMultiplier = calcs.BasicStats.BonusNatureDamageMultiplier;

            int rotationIndex = 1;
            foreach (SpellRotation rot in Rotations)
            {
                if (rot.RotationData.Name == "None") continue;
                rot.Solver = this;

                // Reset variables modified in the pre-loop to base values
                float currentSpellPower = baseSpellPower;
                float currentCrit = baseCrit + StatConversion.NPC_LEVEL_SPELL_CRIT_MOD[character.BossOptions.Level - character.Level];
                float currentHaste = baseHaste;
                float currentMastery = baseMastery;
                float currentTrinketDPS = trinketDPS;
                calcs.BasicStats.BonusArcaneDamageMultiplier = oldArcaneMultiplier;
                calcs.BasicStats.BonusNatureDamageMultiplier = oldNatureMultiplier;
                float accumulatedDamage = 0.0f;
                float totalUpTime = 0.0f;
                float[] spellDetails = new float[NUM_SPELL_DETAILS];
                List<ProcEffect> activatedEffects = new List<ProcEffect>();
                List<ProcEffect> alwaysUpEffects = new List<ProcEffect>();

                float baselineDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);

                // Calculate spell power/spell damage modifying trinkets in a separate pre-loop
                // Add spell crit effects here as well, since they no longer affect timing
                foreach (ProcEffect proc in procEffects)
                {
                    bool handled = false;
                    if (proc.Effect.Stats.SpellPower > 0 || proc.Effect.Stats.CritRating > 0 || proc.Effect.Stats.MasteryRating > 0)
                    {
                        handled = true;
                        float procSpellPower = proc.Effect.Stats.SpellPower;
                        float procSpellCrit = StatConversion.GetSpellCritFromRating(proc.Effect.Stats.CritRating);
                        float procMastery = StatConversion.GetMasteryFromRating(proc.Effect.Stats.MasteryRating);

                        float triggerInterval = 0.0f, triggerChance = 1.0f;
                        switch (proc.Effect.Trigger)
                        {
                            case Trigger.DamageDone:
                            case Trigger.DamageOrHealingDone:
                                triggerInterval = ((rot.RotationData.Duration / rot.RotationData.CastCount) + (rot.RotationData.Duration / (rot.RotationData.MoonfireTicks + rot.RotationData.InsectSwarmTicks))) / 2.0f;
                                break;
                            case Trigger.Use:
                                break;
                            case Trigger.SpellHit:
                            case Trigger.DamageSpellHit:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                triggerChance = baseHit;
                                break;
                            case Trigger.SpellCrit:
                            case Trigger.DamageSpellCrit:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts);
                                triggerChance = baseCrit;
                                break;
                            case Trigger.SpellCast:
                            case Trigger.DamageSpellCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                break;
                            case Trigger.MoonfireCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireCasts;
                                break;
                            case Trigger.DoTTick:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.InsectSwarmTicks + rot.RotationData.MoonfireTicks);
                                break;
                            case Trigger.MoonfireTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireTicks;
                                break;
                            case Trigger.InsectSwarmTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.InsectSwarmTicks;
                                break;
                            default:
                                triggerChance = 0.0f;
                                break;
                        }
                        if (triggerChance > 0)
                        {
                            float durationMultiplier = proc.Effect.LimitedToExecutePhase ? sub35PercentTime : 1f;
                            currentSpellPower += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                            proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellPower * durationMultiplier;
                            currentCrit += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellCrit * durationMultiplier;
                            currentMastery += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procMastery * durationMultiplier;
                        }
                    }
                    // 2T10 (both if statements, which is why it isn't else-if)
                    if (proc.Effect.Stats.BonusArcaneDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusArcaneDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusArcaneDamageMultiplier;
                    }
                    if (proc.Effect.Stats.BonusNatureDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusNatureDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusNatureDamageMultiplier;
                    }
                    // Variable Pulse Lightning Capacitor
                    // This might catch some other effects, I probably need a better way to differentiate
                    if (proc.Effect.Trigger == Trigger.DamageSpellCrit && proc.Effect.Stats.NatureDamage > 0)
                    {
                        float procInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts + rot.RotationData.DotTicks);
                        currentTrinketDPS += proc.Effect.GetAverageProcsPerSecond(procInterval, currentCrit, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.NatureDamage;
                    }
                    // Nested special effects
                    if (proc.Effect.Stats._rawSpecialEffectDataSize > 0)
                    {
                        handled = true;
                        SpecialEffect childEffect = proc.Effect.Stats._rawSpecialEffectData[0];
                        // Heart of Ignacious
                        if (childEffect.Stats.SpellPower > 0)
                        {
                            float averageStack = childEffect.GetAverageStackSize(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit, 3.0f, proc.Effect.Duration);
                            currentSpellPower += childEffect.Stats.SpellPower * averageStack * proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit);
                        }
                        // 4T11
                        if (childEffect.Stats.SpellCrit != 0)
                        {
                            float maxStack = proc.Effect.Stats.SpellCrit;
                            float numNegativeStacks = childEffect.GetAverageStackSize(rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts), Math.Min(1.0f, baseCrit + maxStack), 3.0f, proc.Effect.Duration);
                            float averageNegativeValue = childEffect.Stats.SpellCrit * numNegativeStacks;
                            float averageCrit = maxStack + averageNegativeValue;
                            currentCrit += averageCrit * proc.Effect.GetAverageUptime(rot.RotationData.Duration / 2f, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f);
                        }
                    }
                    if (!handled)
                    {
                        if (proc.CalculateDPS != null)
                        {
                            accumulatedDamage += proc.CalculateDPS(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) * rot.RotationData.Duration;
                        }
                        if (proc.Activate != null)
                        {
                            float upTime = proc.UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            // Procs with 100% uptime should be activated and not put into the combination loop
                            if (upTime == 1)
                            {
                                alwaysUpEffects.Add(proc);
                                proc.Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                            }
                            // Procs with uptime 0 < x < 100 should be activated
                            else if (upTime > 0)
                                activatedEffects.Add(proc);
                        }
                        if (proc.CalculateMP5 != null)
                        {
                            manaGained += proc.CalculateMP5(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) / 5.0f * character.BossOptions.BerserkTimer * 60.0f;
                        }
                    }
                }
                // Calculate stat-boosting trinkets, taking into effect interactions with other stat-boosting procs
                int sign = 1;
                float[] cachedDamages = new float[1 << activatedEffects.Count];
                float[] cachedUptimes = new float[1 << activatedEffects.Count];
                float[,] cachedDetails = new float[1 << activatedEffects.Count, NUM_SPELL_DETAILS];
                List<int> calculatedPairs = new List<int>();
                // Iterate over the entire set of trinket combinations (each trinket by itself, 2 at a time, ...)
                for (int i = 1; i <= activatedEffects.Count; ++i)
                {
                    // Create a new combination generator for this "level" of trinket interaction
                    CombinationGenerator gen = new CombinationGenerator(activatedEffects.Count, i);
                    // Iterate over all combinations
                    while (gen.HasNext())
                    {
                        float tempUpTime = 1.0f;
                        int[] vals = gen.GetNext();
                        int pairs = 0;
                        int lengthCounter = 0;
                        // Activate the trinkets, calculate the damage and uptime, then deactivate them
                        foreach (int idx in vals)
                        {
                            pairs |= 1 << idx;
                            ++lengthCounter;
                            activatedEffects[idx].Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        currentCrit = (float)Math.Min(1.0f, currentCrit);
                        float tempDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency) / rot.RotationData.Duration;
                        spellDetails[0] = rot.RotationData.StarfireAvgHit;
                        spellDetails[1] = rot.RotationData.WrathAvgHit;
                        spellDetails[2] = rot.RotationData.MoonfireAvgHit;
                        spellDetails[3] = rot.RotationData.InsectSwarmAvgHit;
                        spellDetails[4] = rot.RotationData.StarSurgeAvgHit;
                        spellDetails[5] = rot.RotationData.StarfireAvgCast;
                        spellDetails[6] = rot.RotationData.WrathAvgCast;
                        spellDetails[7] = rot.RotationData.MoonfireAvgCast;
                        spellDetails[8] = rot.RotationData.InsectSwarmAvgCast;
                        spellDetails[9] = rot.RotationData.StarSurgeAvgCast;
                        spellDetails[10] = rot.RotationData.AverageInstantCast;
                        spellDetails[11] = rot.RotationData.StarfireAvgEnergy;
                        spellDetails[12] = rot.RotationData.WrathAvgEnergy;
                        spellDetails[13] = rot.RotationData.StarSurgeAvgEnergy;
                        spellDetails[14] = rot.RotationData.TreantDamage;
                        spellDetails[15] = rot.RotationData.StarfallDamage;
                        spellDetails[16] = rot.RotationData.MushroomDamage;
                        foreach (int idx in vals)
                        {
                            tempUpTime *= activatedEffects[idx].UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            activatedEffects[idx].Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        if (tempUpTime == 0) continue;
                        // Adjust previous probability tables by the current factor
                        // At the end of the algorithm, this ensures that the probability table will contain the individual
                        // probabilities of each effect or set of effects.
                        // These adjustments only need to be made for higher levels of the table, and if the current probability is > 0.
                        if (lengthCounter > 1)
                        {
                            foreach (int subset in calculatedPairs)
                            {
                                // Truly a subset?
                                if ((pairs & subset) != subset)
                                {
                                    continue;
                                }

                                // Calculate the "layer" of the current subset by getting the set bit count.
                                int subsetLength = 0;
                                for (int j = subset; j > 0; ++subsetLength)
                                {
                                    j &= --j;
                                }

                                // Set the sign of the operation: Evenly separated layers are added, oddly separated layers are subtracted
                                int newSign = ((lengthCounter - subsetLength) % 2 == 0) ? 1 : -1;

                                // Adjust by current uptime * sign of operation.
                                cachedUptimes[subset] += newSign * tempUpTime;
                            }
                        }
                        // Cache the results to be calculated later
                        cachedUptimes[pairs] = tempUpTime;
                        cachedDamages[pairs] = tempDPS;
                        for (int idx = 0; idx < NUM_SPELL_DETAILS; ++idx)
                        {
                            cachedDetails[pairs, idx] = spellDetails[idx];
                        }
                        calculatedPairs.Add(pairs);
                        totalUpTime += sign * tempUpTime;
                    }
                    sign = -sign;
                }
                float accumulatedDPS = 0.0f;
                Array.Clear(spellDetails, 0, spellDetails.Length);
                // Apply the above-calculated probabilities to the previously stored damage calculations and add to the result.
                for (int idx = 0; idx < cachedUptimes.Length; ++idx)
                {
                    if (cachedUptimes[idx] == 0) continue;
                    accumulatedDPS += cachedUptimes[idx] * cachedDamages[idx];
                    for (int i = 0; i < NUM_SPELL_DETAILS; ++i)
                    {
                        spellDetails[i] += cachedUptimes[idx] * cachedDetails[idx,i];
                    }
                }
                float damageDone = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);
                accumulatedDPS += (1 - totalUpTime) * damageDone / rot.RotationData.Duration;
                spellDetails[0] += (1 - totalUpTime) * rot.RotationData.StarfireAvgHit;
                spellDetails[1] += (1 - totalUpTime) * rot.RotationData.WrathAvgHit;
                spellDetails[2] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgHit;
                spellDetails[3] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgHit;
                spellDetails[4] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgHit;
                spellDetails[5] += (1 - totalUpTime) * rot.RotationData.StarfireAvgCast;
                spellDetails[6] += (1 - totalUpTime) * rot.RotationData.WrathAvgCast;
                spellDetails[7] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgCast;
                spellDetails[8] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgCast;
                spellDetails[9] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgCast;
                spellDetails[10] += (1 - totalUpTime) * rot.RotationData.AverageInstantCast;
                spellDetails[11] += (1 - totalUpTime) * rot.RotationData.StarfireAvgEnergy;
                spellDetails[12] += (1 - totalUpTime) * rot.RotationData.WrathAvgEnergy;
                spellDetails[13] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgEnergy;
                spellDetails[14] += (1 - totalUpTime) * rot.RotationData.TreantDamage;
                spellDetails[15] += (1 - totalUpTime) * rot.RotationData.StarfallDamage;
                spellDetails[16] += (1 - totalUpTime) * rot.RotationData.MushroomDamage;

                float burstDPS = accumulatedDPS + accumulatedDamage / rot.RotationData.Duration;
                float sustainedDPS = burstDPS;

                // Mana calcs:
                // Main rotation - all spells
                // Movement rotation - Lunar Shower MF, IS, Shooting Stars procs, and Starfall only
                rot.RotationData.ManaGained += manaGained / (character.BossOptions.BerserkTimer * 60.0f) * rot.RotationData.Duration;
                float timeToOOM = manaPool / ((rot.RotationData.ManaUsed - rot.RotationData.ManaGained) / rot.RotationData.Duration);
                if (timeToOOM <= 0) timeToOOM = character.BossOptions.BerserkTimer * 60.0f;   // Happens when ManaUsed is less than 0
                if (timeToOOM < character.BossOptions.BerserkTimer * 60.0f)
                {
                    rot.RotationData.TimeToOOM = new TimeSpan(0, (int)(timeToOOM / 60), (int)(timeToOOM % 60));
                    sustainedDPS = burstDPS * timeToOOM / (character.BossOptions.BerserkTimer * 60.0f);
                }
                
                burstDPS += currentTrinketDPS;
                sustainedDPS += currentTrinketDPS;

                rot.RotationData.SustainedDPS = sustainedDPS;
                rot.RotationData.BurstDPS = burstDPS;
                rot.RotationData.StarfireAvgHit = spellDetails[0];
                rot.RotationData.WrathAvgHit = spellDetails[1];
                rot.RotationData.MoonfireAvgHit = spellDetails[2];
                rot.RotationData.InsectSwarmAvgHit = spellDetails[3];
                rot.RotationData.StarSurgeAvgHit = spellDetails[4];
                rot.RotationData.StarfireAvgCast = spellDetails[5];
                rot.RotationData.WrathAvgCast = spellDetails[6];
                rot.RotationData.MoonfireAvgCast = spellDetails[7];
                rot.RotationData.InsectSwarmAvgCast = spellDetails[8];
                rot.RotationData.StarSurgeAvgCast = spellDetails[9];
                rot.RotationData.AverageInstantCast = spellDetails[10];
                rot.RotationData.StarfireAvgEnergy = spellDetails[11];
                rot.RotationData.WrathAvgEnergy = spellDetails[12];
                rot.RotationData.StarSurgeAvgEnergy = spellDetails[13];
                rot.RotationData.TreantDamage = spellDetails[14];
                rot.RotationData.StarfallDamage = spellDetails[15];
                rot.RotationData.MushroomDamage = spellDetails[16];

                // Update the sustained DPS rotation if any one of the following three cases is true:
                // 1) No user rotation is selected and sustained DPS is maximum
                // 2) A user rotation is selected, Eclipse is not present, and the user rotation matches the current rotation
                // 3) A user rotation is selected, Eclipse is present, and the user rotation's dot spells matches this rotation's
                if ((calcOpts.UserRotation == "None" && sustainedDPS > maxDamageDone) || rot.RotationData.Name == calcOpts.UserRotation)
                {
                    maxDamageDone = sustainedDPS;
                    maxRotation = rot;
                }
                if (burstDPS > maxBurstDamageDone)
                {
                    maxBurstDamageDone = burstDPS;
                    maxBurstRotation = rot;
                }
                cachedResults[rotationIndex - 1] = rot.RotationData;

                // Deactivate always-up procs
                foreach (ProcEffect proc in alwaysUpEffects)
                {
                    proc.Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                }

                ++rotationIndex;
            }
            // Present the findings to the user.
            calcs.SelectedRotation = maxRotation.RotationData;
            calcs.BurstRotation = maxBurstRotation.RotationData;
            calcs.SubPoints = new float[] { maxBurstDamageDone, maxDamageDone };
            calcs.OverallPoints = calcs.SubPoints[0] + calcs.SubPoints[1];
            calcs.Rotations = cachedResults;
        }

        // Create proc effect calculations for proc-based trinkets.
        private void BuildProcList(CharacterCalculationsMoonkin calcs)
        {
            // Implement a new handler for each special effect in the calculations stats
            foreach (SpecialEffect effect in calcs.BasicStats.SpecialEffects())
            {
                procEffects.Add(new ProcEffect(effect));
            }
        }

        // Non-rotation-specific mana calculations
        private float GetEffectiveManaPool(Character character, CalculationOptionsMoonkin calcOpts, CharacterCalculationsMoonkin calcs)
        {
            float fightLength = character.BossOptions.BerserkTimer * 60.0f;

            float innervateCooldown = 180;

            // Mana/5 calculations
            float totalManaRegen = calcs.ManaRegen * fightLength;

            // Mana pot calculations
            float manaRestoredByPots = 0.0f;
            foreach (Buff b in character.ActiveBuffs)
            {
                if (b.Stats.ManaRestore > 0)
                {
                    manaRestoredByPots = b.Stats.ManaRestore;
                    break;
                }
            }

            // Innervate calculations
            float innervateDelay = calcOpts.InnervateDelay * 60.0f;
            int numInnervates = (calcOpts.Innervate && fightLength - innervateDelay > 0) ? ((int)(fightLength - innervateDelay) / (int)innervateCooldown + 1) : 0;
            float totalInnervateMana = numInnervates * 0.2f * calcs.BasicStats.Mana;
            totalInnervateMana *= 1 + 0.15f * character.DruidTalents.Dreamstate;

            // Replenishment calculations
            float replenishmentPerTick = calcs.BasicStats.Mana * calcs.BasicStats.ManaRestoreFromMaxManaPerSecond;
            float replenishmentMana = calcOpts.ReplenishmentUptime * replenishmentPerTick * character.BossOptions.BerserkTimer * 60;

            return calcs.BasicStats.Mana + totalInnervateMana + totalManaRegen + manaRestoredByPots + replenishmentMana;
        }

        /*private void RecreateRotations()
        {
            rotations[0] = new SpellRotation() { RotationData = new RotationData() { Name = "None" } };
            for (int mfMode = 0; mfMode < 2; ++mfMode)
            {
                for (int isMode = 0; isMode < 2; ++isMode)
                {
                    for (int sfMode = 0; sfMode < 3; ++sfMode)
                    {
                        for (int wmMode = 0; wmMode < 3; ++wmMode)
                        {
                            int index = 1 + (wmMode + 3 * sfMode + 9 * isMode + 18 * mfMode);
                            DotMode mfModeEnum = (DotMode)mfMode;
                            DotMode isModeEnum = (DotMode)isMode;
                            StarfallMode sfModeEnum = (StarfallMode)sfMode;
                            MushroomMode wmModeEnum = (MushroomMode)wmMode;
                            string name = String.Format("MF {0} IS {1} SF {2} WM {3}",
                                mfModeEnum.ToString(),
                                isModeEnum.ToString(),
                                sfModeEnum.ToString(),
                                wmModeEnum.ToString());
                            rotations[index] = new SpellRotation()
                            {
                                RotationData = new RotationData()
                                {
                                    Name = name,
                                    MoonfireRefreshMode = mfModeEnum,
                                    InsectSwarmRefreshMode = isModeEnum,
                                    StarfallCastMode = sfModeEnum,
                                    WildMushroomCastMode = wmModeEnum
                                }
                            };
                        }
                    }
                }
            }
        }*/

        // Add talented effects to the spells
        private void UpdateSpells(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            DruidTalents talents = character.DruidTalents;
            StatsMoonkin stats = calcs.BasicStats;

            switch (talents.StarlightWrath)
            {
                case 1:
                    Starfire.BaseCastTime -= 0.15f;
                    Wrath.BaseCastTime -= 0.15f;
                    break;
                case 2:
                    Starfire.BaseCastTime -= 0.25f;
                    Wrath.BaseCastTime -= 0.25f;
                    break;
                case 3:
                    Starfire.BaseCastTime -= 0.5f;
                    Wrath.BaseCastTime -= 0.5f;
                    break;
                default:
                    break;
            }

            float moonfireDotGlyph = talents.GlyphOfMoonfire ? 0.2f : 0.0f;
            float insectSwarmGlyph = talents.GlyphOfInsectSwarm ? 0.3f : 0.0f;
            // Add spell-specific damage
            // Moonfire, Insect Swarm: glyphs
            Moonfire.DotEffect.AllDamageModifier *= 1 + moonfireDotGlyph;
            InsectSwarm.DotEffect.AllDamageModifier *= 1 + insectSwarmGlyph;
            // Moonfire: Direct damage +(0.03 * Blessing of the Grove)
            Moonfire.AllDamageModifier *= 1 + 0.03f * talents.BlessingOfTheGrove;
            // Moonfire, Insect Swarm: +2/4/6 seconds for Genesis
            Moonfire.DotEffect.BaseDuration += 2f * talents.Genesis;
            InsectSwarm.DotEffect.BaseDuration += 2f * talents.Genesis;
            // Wrath: 10% for glyph
            Wrath.AllDamageModifier *= 1 + (talents.GlyphOfWrath ? 0.1f : 0f);

            // Add spell-specific critical strike damage
            // Burning Shadowspirit Diamond
            float baseCritMultiplier = 1.5f * (1 + stats.BonusCritDamageMultiplier);
            float moonfuryMultiplier = baseCritMultiplier + (baseCritMultiplier - 1);
            Starfire.CriticalDamageModifier = Wrath.CriticalDamageModifier = Moonfire.CriticalDamageModifier = InsectSwarm.CriticalDamageModifier = moonfuryMultiplier;
            Starsurge.CriticalDamageModifier = moonfuryMultiplier;

            // Reduce spell-specific mana costs
            // Shard of Woe (Mana cost -405)
            Starfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Moonfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Wrath.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            InsectSwarm.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            Starsurge.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            // All spells: Mana cost -(0.03 * Moonglow)
            Starfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Moonfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Wrath.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            InsectSwarm.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Starsurge.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);

            // Add set bonuses
            Moonfire.CriticalChanceModifier += stats.BonusCritChanceMoonfire;
            InsectSwarm.CriticalChanceModifier += stats.BonusCritChanceInsectSwarm;
            Starfire.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Wrath.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Starsurge.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;

            // Dragonwrath, Tarecgosa's Rest: X% chance on damaging spell cast to proc a duplicate version of the spell.
            // If it duplicates a DoT tick, it fires Wrath of Tarecgosa for an equivalent amount of damage.
            // Wrath, Starfire, and Starsurge will duplicate the Eclipse energy gained.
            if (calcs.BasicStats.DragonwrathProc > 0)
            {
                Starfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Wrath.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Starsurge.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                InsectSwarm.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
            }

            // PTR changes go here
            if (((CalculationOptionsMoonkin)character.CalculationOptions).PTRMode)
            {
            }
        }
    }
}
