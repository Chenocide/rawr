using System;
using System.Collections.Generic;

namespace Rawr.Moonkin
{
    // The interface public class to the rest of Rawr.  Provides a single Solve method that runs all the calculations.
    public class MoonkinSolver
    {
        private const int NUM_SPELL_DETAILS = 17;
        // A list of all currently active proc effects.
        public List<ProcEffect> procEffects;
        public static float BaseMana = 18635f;
        public static float OOC_PROC_CHANCE = 0.0583f;
        public static float EUPHORIA_PERCENT = 0.08f;
        public static float DRAGONWRATH_PROC_RATE = 0.11f;
        public static float ECLIPSE_BASE = 0.25f;

        #region Cast Distributions

        #region Base

        public static double[,] CastDistribution = new double[21, 12] {
{ 0.115024313424292, 0.170535368204905, 0.0406967746650322, 0.029704147862303, 0.14912060418519, 0.214939877383249, 0.0409733322538512, 0.0298522781252261, 0.0626877600339894, 0.0838030394108893, 0.031344865163846, 0.0313176392872265, },
{ 0.11762366226454, 0.171506243662509, 0.0383103826140497, 0.029625373073277, 0.150161500631865, 0.216604783805875, 0.0386869542939936, 0.0310606153026962, 0.0624655093351743, 0.0810456170213987, 0.0314718122014248, 0.0314375457931974, },
{ 0.122226060153051, 0.174817341526474, 0.0365044126011412, 0.0297815277818772, 0.152874552577481, 0.218791307060082, 0.0359503146615783, 0.0330501153107647, 0.0614512643500278, 0.0732940907121985, 0.0319063410151336, 0.0293526722501913, },
{ 0.12735819599254, 0.17776981599263, 0.0330091105570052, 0.0300602992558199, 0.155273641834267, 0.223210256152732, 0.0354085908734765, 0.0322787079760992, 0.0520671777231398, 0.0720607009933346, 0.0323693242504602, 0.0291341783984966, },
{ 0.131272147402772, 0.182085068353987, 0.0316456309795417, 0.0306513297401979, 0.158645911246459, 0.229712964372023, 0.0348570961879586, 0.0317118785580532, 0.0428275171582697, 0.0636263190025083, 0.033030513840309, 0.0299336231579207, },
{ 0.134320529160603, 0.185044620186841, 0.0307123731270294, 0.0301936975783987, 0.160851062330887, 0.235233891264236, 0.0322849844749577, 0.0313238055932421, 0.0351363790869549, 0.0623652309500481, 0.0333192534594514, 0.0292141727873512, },
{ 0.136783269781233, 0.188030219793576, 0.0295813015837518, 0.0304512604274871, 0.162581155195148, 0.237715241214388, 0.0303660471349698, 0.0320391176278348, 0.0339848436477879, 0.0572484776395459, 0.0335370349663495, 0.0276820309879286, },
{ 0.137882201341645, 0.189143133540269, 0.0291844883568553, 0.0303375633425987, 0.163445648581418, 0.238510277281429, 0.0276947009118206, 0.0332567268663235, 0.0352436944625027, 0.0568799983494752, 0.0324450839778673, 0.0259764829877952, },
{ 0.139130564243682, 0.190934310318517, 0.0277697616799646, 0.030857413677379, 0.16413896977359, 0.240497408863585, 0.0260128508455777, 0.0343754536194646, 0.0368772618939799, 0.0526428102633071, 0.0311602608877977, 0.0256029339331553, },
{ 0.140594198172205, 0.191434168388257, 0.0268913537160724, 0.0313464409445582, 0.164653625418078, 0.240132829274441, 0.0239806835203002, 0.0355770590308034, 0.0431371995512103, 0.0543886379242163, 0.0249681991730918, 0.0228956048867663, },
{ 0.142881775281162, 0.194443584435469, 0.0239963376372821, 0.0315650350576378, 0.165442806252965, 0.240307650527758, 0.0230861969023211, 0.0381598157965135, 0.060885504666602, 0.0538510177655436, 0.00767526122917585, 0.017705014447571, },
{ 0.142697839676215, 0.195480522085578, 0.0231150841133687, 0.0315662304606579, 0.165117828625515, 0.241194480773051, 0.0223564765563306, 0.0381295965809314, 0.0598523199786343, 0.0537313702216206, 0.00868509127678986, 0.0180731596513078, },
{ 0.144835068387943, 0.195573841984416, 0.0213094249852869, 0.0320836284112927, 0.165665392172542, 0.241339722562641, 0.0224462097430439, 0.0387954813431486, 0.0631462662296669, 0.0529356778201396, 0.00460446737982829, 0.0172648189800513, },
{ 0.145815292107395, 0.19966314041332, 0.0166603369107649, 0.0325672871533392, 0.166396417009863, 0.242591146885664, 0.0248004527570263, 0.0383260144864336, 0.0653065545919589, 0.0452842323399277, 0.000288304210414307, 0.0223008211338928, },
{ 0.147528022316104, 0.20002966769504, 0.0178706627730941, 0.0329249294856725, 0.16799637561444, 0.245931696826146, 0.0227745078456059, 0.037384080443366, 0.0583993046834794, 0.0430473970881746, 0.00202415078900539, 0.0240892044398723, },
{ 0.148215661189473, 0.200769829045047, 0.0175986345415127, 0.0330809624392773, 0.168988183356217, 0.247407558181523, 0.0222896404516036, 0.0363123962893195, 0.0580600824211788, 0.044994487841721, 0.00244972093723133, 0.0198328433058964, },
{ 0.14928754126499, 0.201707371941073, 0.0163489874761095, 0.0338670952201265, 0.169841280690789, 0.248811429575456, 0.0228166922752019, 0.035758333964919, 0.054549296145572, 0.0448117536442155, 0.00220565781434921, 0.0199945599871981, },
{ 0.150119777006355, 0.202274274457926, 0.0154839039337714, 0.0336244675012835, 0.169966066534377, 0.248667646770084, 0.0228643522385466, 0.0368788051428875, 0.0549901989658219, 0.0430691278688947, 0.00230179460315468, 0.0197595849768976, },
{ 0.150567146983828, 0.20228403779447, 0.015780538582897, 0.0339047764268227, 0.170287500499196, 0.25006000434855, 0.0218692151269853, 0.0374246617670847, 0.0520186269633524, 0.0432620259807736, 0.00283946628199341, 0.0197019992440461, },
{ 0.150564309684604, 0.202711146351739, 0.0158237600878144, 0.0345425928151391, 0.170579403033687, 0.250387750915857, 0.0209248611695715, 0.0382570503231744, 0.0527789134358787, 0.0422045106528085, 0.00248080066814943, 0.018744900861577, },
{ 0.151726699669851, 0.202856199797223, 0.0156288703120433, 0.0343774689289148, 0.17174021164456, 0.250641163352457, 0.0209354410918208, 0.0372138879464812, 0.0491479981890119, 0.0425059802129594, 0.00477174623783658, 0.0184543326168426, },
};
        public static double[,] CastDistributionGoSF = new double[21, 12] {
{ 0.123217505780315, 0.175246977088934, 0.0422538249643225, 0.0270483702646591, 0.156517097562864, 0.219898849099672, 0.043985522477773, 0.0256205310883217, 0.0468376976093282, 0.0836670612399928, 0.0234769285232264, 0.0322296343005911, },
{ 0.128003522556901, 0.177249032575603, 0.0410786721663099, 0.0257118396077686, 0.158499143236757, 0.220983930122601, 0.0401150482536284, 0.0276331855049359, 0.0563995412234483, 0.0832404375796872, 0.00861878247513634, 0.032466864697223, },
{ 0.132146710883543, 0.180553508783208, 0.0404651014050694, 0.0264493538408384, 0.161226757869744, 0.224168716461094, 0.0377302289209097, 0.0277433535395095, 0.0622161648750128, 0.074623231794743, 0.0036848495877828, 0.0289920220385457, },
{ 0.134275179421257, 0.182524575253029, 0.0342192624586781, 0.0280425437193739, 0.161747009157927, 0.224468150663939, 0.0381245070275053, 0.027831005573648, 0.0652059423845536, 0.0737590100860282, 3.41452810164757E-05, 0.0297686689730449, },
{ 0.137022078641507, 0.185924185704242, 0.0337091267779111, 0.0283882733358633, 0.164166587760233, 0.230062083830692, 0.036040532309016, 0.0276977239905133, 0.0637346775510326, 0.0635424689338535, 2.8331758932519E-05, 0.0296839294062036, },
{ 0.138456072321021, 0.188946785131084, 0.0323814865621632, 0.0293505614196906, 0.165756310677327, 0.2355125895895, 0.0334975317298597, 0.0266059638489014, 0.0569919810632621, 0.0630148602097912, 0.000110295674762467, 0.0293755617726368, },
{ 0.141510796394214, 0.192023178095631, 0.0305309340432733, 0.0296075645324166, 0.167816345517499, 0.239075150686396, 0.0326892537546569, 0.0266097307992168, 0.0550359194713268, 0.0574455316122862, 9.02953713688312E-05, 0.0275652997217149, },
{ 0.142591325937089, 0.193500755971934, 0.0297614642188195, 0.0302150202690485, 0.16864707727451, 0.242119904170357, 0.0302921491968967, 0.0265586482131979, 0.0510841562000407, 0.0568080986187551, 0.00134440194446229, 0.0270769979848882, },
{ 0.144602258272044, 0.195156952073307, 0.0280732343930812, 0.0308259222184326, 0.169746479667944, 0.244610747069602, 0.0286698432066193, 0.0269960135397581, 0.0517083642112295, 0.0544696164020698, 0.00123881027864919, 0.0239017586672638, },
{ 0.145344139784737, 0.195884636257798, 0.0283197297272494, 0.0313560742163904, 0.170352213697908, 0.24545362317875, 0.0265170062571099, 0.0275393038344582, 0.0471022477346844, 0.0537383820820853, 0.00417429796554988, 0.0242183452632812, },
{ 0.147798264846744, 0.198587297444245, 0.0261467293674976, 0.0326004315204233, 0.172300861317953, 0.249027649163043, 0.0254827706522512, 0.0276039224313383, 0.041349801697273, 0.0550490339078383, 0.00649167613769883, 0.0175615615136946, },
{ 0.148231256445693, 0.199648765941013, 0.0242863537057493, 0.0325186281535007, 0.172219564365165, 0.249582934362916, 0.0255095905833876, 0.0274906085807767, 0.0418428032040914, 0.0543536048830477, 0.00592472528537329, 0.0183911644892863, },
{ 0.149246459498817, 0.198910009280313, 0.0249055707093459, 0.032731151010997, 0.172620277686412, 0.249732418203782, 0.0232482156320727, 0.0288640659147475, 0.0374167825506621, 0.0625724071102329, 0.00959115389605657, 0.0101614885065603, },
{ 0.151165770368923, 0.203168793767451, 0.0217511015925996, 0.0327528642938756, 0.174307390297629, 0.254629237217463, 0.0246628343015959, 0.0269024940850474, 0.0368180031986078, 0.0480014279225575, 0.00531413366628194, 0.0205259492879691, },
{ 0.153039637320834, 0.202993288682857, 0.0222688238184749, 0.0328708062858891, 0.175471690818932, 0.257047548805674, 0.0227846081284944, 0.0265197757052381, 0.0363669282923426, 0.0459891031302298, 0.00261360785701767, 0.0220341811540167, },
{ 0.153774429750772, 0.204047702742098, 0.0217642528151648, 0.0334422740980594, 0.176538995459044, 0.259314836002307, 0.0225702145074337, 0.0248834252324151, 0.0361086451975017, 0.045091224878926, 0.00262805556143357, 0.0198359437548447, },
{ 0.153896410032558, 0.204665876669137, 0.0201807992785621, 0.0343075540122791, 0.176890393802671, 0.258809787748791, 0.0229889486661907, 0.0253739438098843, 0.0360485696400086, 0.044880963977839, 0.00192094352504132, 0.020035808837039, },
{ 0.154495591529483, 0.205101370671665, 0.0195733145541782, 0.0347642655444762, 0.17737928829872, 0.259966239127124, 0.0228465188206413, 0.0251905833302523, 0.0361405705445395, 0.0447331050682813, 0.00122656334561167, 0.0185825891650276, },
{ 0.154761776206288, 0.205170485559221, 0.0187741021770326, 0.0346047512933447, 0.177187255692785, 0.25938409673491, 0.0223629286894426, 0.0272455583331007, 0.0360753062696885, 0.0441072768581815, 0.000810002259571138, 0.0195164599264346, },
{ 0.154985649467737, 0.206218504595159, 0.0181647709130874, 0.0349865362928217, 0.177610675473684, 0.260036118327012, 0.0224610227508245, 0.027407250072203, 0.0361036785623299, 0.0414360113141461, 0.000985900075004023, 0.0196038821559906, },
{ 0.155579210706465, 0.205753219430198, 0.0174473689844162, 0.0360090098808205, 0.178298132977014, 0.260198426225329, 0.0223412341731106, 0.0266323870401158, 0.0362583479579706, 0.0402511475702663, 3.4872458342669E-06, 0.0212280278084607, },
};
        public static double[] BaseRotationDurations = new double[21] { 61.0031327453413, 57.8741792753625, 54.3755315499717, 51.3222100525102, 48.3569292673105, 45.6859332251209, 43.5494920386473, 41.7906872668716, 40.1487544664033, 38.7660231566037, 37.2521234800175, 36.1660761664328, 35.1816771690355, 33.9737143180972, 32.8995383069615, 32.2086223766296, 31.5919875298613, 31.233272608825, 30.7474863550178, 30.4083225146254, 29.9855343436851, };
        public static double[] BaseRotationDurationsGoSF = new double[21] { 59.9411995527948, 56.786291461106, 53.351191758893, 50.7626789287965, 48.0011526268116, 45.4686729955554, 43.2777557086585, 41.4147086142584, 39.7641038215698, 38.3613491354329, 36.8098987044358, 35.6961443661669, 34.8683730295429, 33.3512847732944, 32.3213040375481, 31.5310520961028, 31.0515268106739, 30.6637088550164, 30.2743753902145, 29.9066879271644, 29.5235134144928, };
        public static double[] BaseNGUptimes = new double[21] { 0.482482109565117, 0.493546683723392, 0.540646242655166, 0.571412493446076, 0.591552171316646, 0.650710653605012, 0.665416977391904, 0.700850571450103, 0.723641405429646, 0.744607871379167, 0.779173719651001, 0.796894996188032, 0.785619405486434, 0.826918076956416, 0.838536657548482, 0.817635262846137, 0.839478689214112, 0.819000773707033, 0.834259166426326, 0.821340067204938, 0.830620257740477, };
        public static double[] BaseNGUptimesGoSF = new double[21] { 0.490520498977247, 0.502862056394972, 0.547009795843788, 0.571186511286008, 0.592575713602954, 0.640441558210643, 0.661425647202335, 0.700254982397414, 0.720702734906135, 0.734278662012351, 0.75259971030589, 0.769910587363098, 0.737367260621547, 0.80751679006014, 0.816969196036392, 0.80885223210753, 0.819849198216853, 0.807112448539936, 0.812431649483114, 0.802604033350529, 0.813351931671623, };
        public static double[] BasePercentMoonfiresExtended = new double[21] { 0.793634249496203, 0.979597056022418, 0.990642647058824, 0.986818373949589, 0.975643866013063, 0.972120249791106, 0.981158526659733, 0.984105683473371, 0.983327477124076, 0.978347574229619, 0.970556506715442, 0.97138385405438, 0.978159434787887, 0.980298849034331, 0.989433413165272, 0.98943679225023, 0.9958752124183, 0.996922803921569, 0.998513382352942, 0.998396571895425, 0.999992166666667, };

        #endregion

        #region 4T12

        public static double[,] T12CastDistribution = new double[21, 12] {
{ 0.101699096689682, 0.155340447015801, 0.0381962903328512, 0.0262089166643925, 0.15978859081771, 0.229190841361242, 0.0424672288477108, 0.034245376561235, 0.0650325209908214, 0.0807401140736293, 0.0335582057509847, 0.0335323708939406, },
{ 0.106599487543139, 0.157762097287974, 0.0358668835371959, 0.0264116433243167, 0.162463299465152, 0.233124549578553, 0.0407201374615751, 0.0339765150555014, 0.0564630147291423, 0.0786751416969383, 0.0339782139577048, 0.0339590163628067, },
{ 0.110793224377091, 0.16259755872883, 0.0330732520092525, 0.0272096453151967, 0.166278889305831, 0.239013360169613, 0.0401445558284857, 0.0338803731309814, 0.0496006016867751, 0.0694567815113605, 0.0347005617743694, 0.0332511961622141, },
{ 0.114383589839269, 0.16724692046529, 0.0299765013255081, 0.0270611192493948, 0.168858942370256, 0.244739641792736, 0.0390092396606537, 0.0332941453975202, 0.0389028045800267, 0.0675515282747139, 0.0352190551350935, 0.0337565119095377, },
{ 0.116801577148542, 0.169965856915259, 0.0307120422896467, 0.0271833368820907, 0.171595544376489, 0.249766734121908, 0.0360692232722312, 0.0336479898165091, 0.0357183867753106, 0.0614822207257815, 0.0357091542359179, 0.0313479334403154, },
{ 0.118410991243162, 0.171616125876149, 0.0293707195276206, 0.0271199842998612, 0.172503699416832, 0.251085759143254, 0.0326068676647333, 0.0352152967483809, 0.0371511697033161, 0.0597579370934402, 0.0344924600656369, 0.0306689892176145, },
{ 0.120238415314993, 0.174077194688251, 0.0280007993200225, 0.0272242263265915, 0.173957376034973, 0.252838386193506, 0.0307039927780828, 0.0365859513025782, 0.0385917896185469, 0.0546176006195656, 0.0335795082065859, 0.0295847595963037, },
{ 0.121325935058732, 0.175119163838575, 0.0273277318526966, 0.027180322160529, 0.174662075444307, 0.253674590934817, 0.0281127772249001, 0.0379982999888489, 0.0448238552802388, 0.0567266948038149, 0.0275234014530046, 0.0255251519595364, },
{ 0.122218828617957, 0.176834059861946, 0.0258540446289513, 0.0277465167501908, 0.175528762111396, 0.255964992471665, 0.0264341906629904, 0.039199746190734, 0.0488200594153386, 0.0501447159177152, 0.0239592297288283, 0.0272948536422875, },
{ 0.124136309291705, 0.177377847958822, 0.0245209310831141, 0.0279105831239879, 0.176107731550939, 0.255139588176366, 0.0250598125611668, 0.0404783643098992, 0.0648531456780721, 0.0569962002290003, 0.00803033105099032, 0.0193891549859364, },
{ 0.126887673651214, 0.182728573901457, 0.0181603699331199, 0.0286040357325852, 0.178359507560036, 0.258453598462679, 0.0290100930795073, 0.039682216591058, 0.0661733932912776, 0.0459359149016358, 0.000554595223330964, 0.0254500276720989, },
{ 0.126728742820745, 0.183661245786222, 0.0172047203187363, 0.0288261602519828, 0.177963818840874, 0.259026540383926, 0.0281676836863398, 0.0396972828680353, 0.0668366232693509, 0.0471011041488917, 0.00036508690331536, 0.0244209907215804, },
{ 0.128776574643168, 0.184633080162826, 0.0170289708043425, 0.0288809961129668, 0.179689081692005, 0.26210509602939, 0.0272363967696534, 0.0394151688095354, 0.0593468302906083, 0.0455104866075972, 0.00190371271655702, 0.0254736053613517, },
{ 0.129094852540375, 0.18700084114523, 0.0149332466160052, 0.0293292228291507, 0.180356725696789, 0.264685685567638, 0.0274061461120571, 0.0392114207235349, 0.0585023844587467, 0.0455021759129982, 0.00196056568061053, 0.0220167327168648, },
{ 0.129503896341434, 0.187631181641549, 0.0154239607750647, 0.0297850447446855, 0.181338634347168, 0.26681373878174, 0.0254542790230775, 0.0396255062623307, 0.0521616124665812, 0.0458238204415265, 0.00522827998894018, 0.0212100451859018, },
{ 0.13044745865683, 0.188252260828952, 0.0154103655480166, 0.0297458473593835, 0.182712624198494, 0.268158093724894, 0.0248202554963725, 0.0380917459434566, 0.0518722257534773, 0.043586591509976, 0.00578364613104969, 0.0211188848490969, },
{ 0.130880742573047, 0.188876479171714, 0.0144625857130992, 0.0299429276500915, 0.183121655261829, 0.268136581612167, 0.024725828213904, 0.0392344872753697, 0.047404120452707, 0.0439147715802613, 0.00911595550365344, 0.0201838649921564, },
{ 0.131124743060744, 0.189089288528346, 0.0140667478676646, 0.0301450107408246, 0.18328485346497, 0.268194718131997, 0.0241682207938884, 0.0401674876787499, 0.0469827881800963, 0.0413342210014426, 0.00972965570089064, 0.021712264850386, },
{ 0.13142219535877, 0.189630819279751, 0.0131275523864208, 0.0304031359272784, 0.183508116024309, 0.268095633443439, 0.0240601734171172, 0.0415042023651308, 0.0434184921807461, 0.0424064084656972, 0.011990873504858, 0.020432397646482, },
{ 0.131688714027782, 0.189968668083263, 0.0131408675387588, 0.030963736083048, 0.184062362648656, 0.269007350964898, 0.0232756181008123, 0.0417839587859011, 0.0427932441320344, 0.0406293181681639, 0.0124146840642401, 0.020271477402443, },
{ 0.132167300613957, 0.189618849797234, 0.0137081296560357, 0.0314383556775661, 0.185211601878925, 0.270047426467269, 0.0223785538394807, 0.0405949736665832, 0.0408196293977632, 0.0415775423412182, 0.0131621941382815, 0.0192754425256875, },
};
        public static double[,] T12CastDistributionGoSF = new double[21, 12] {
{ 0.112646286023229, 0.160846255309212, 0.0395506076536805, 0.0225080098369002, 0.169075227602785, 0.234621078090037, 0.0463187357605821, 0.0296825026173531, 0.0611952240405201, 0.0804954423344336, 0.00831399682621827, 0.0347466339050488, },
{ 0.113641666014726, 0.162835493042068, 0.0367058429136632, 0.0247893593565879, 0.170117943427369, 0.235377731376269, 0.0436215223624857, 0.0293998704017945, 0.0685898241189613, 0.0800362136206355, 6.77785721093441E-05, 0.0348167547933302, },
{ 0.116456867632058, 0.166686902466314, 0.0370224311449033, 0.0256196377122648, 0.173252383761265, 0.242095370845726, 0.0404642697919664, 0.0287440770451781, 0.0670161883210437, 0.0682164739804264, 3.40981190903897E-05, 0.034391299179765, },
{ 0.117539102324944, 0.170814387107974, 0.0325521683312662, 0.0263693020562382, 0.174653583665721, 0.246187446881876, 0.0403334821554074, 0.0279755321898017, 0.0608275682647807, 0.0682257883400684, 1.33415733431553E-05, 0.0345082971085793, },
{ 0.121288852018807, 0.173476340462531, 0.0317130427009322, 0.0267041339948595, 0.17750527694152, 0.251987679517197, 0.0382685633470296, 0.028083753193172, 0.0582463985911462, 0.0609573008149304, 1.49958608512233E-05, 0.0317536625570243, },
{ 0.122820987269514, 0.176333916131787, 0.0297983140598137, 0.0271245974932869, 0.178617287849031, 0.255087009032114, 0.0358294332833653, 0.0281424071226866, 0.0533598495948861, 0.0592863913550851, 0.00137567429159692, 0.0322241325168329, },
{ 0.124407773073669, 0.178360802617972, 0.0296282330342874, 0.0278544226615857, 0.180835864998111, 0.259670046293107, 0.0332318518813952, 0.0279892478273207, 0.053187990730367, 0.0563354331950033, 0.000695611910863377, 0.0278027217763189, },
{ 0.125941521067391, 0.179555107725509, 0.029877837712425, 0.0282857805372012, 0.182264915590666, 0.263283084612779, 0.0298957259952927, 0.0276127005206425, 0.0478474188209032, 0.0558349376052689, 0.00208371796478865, 0.0275172518471321, },
{ 0.127908647173793, 0.181120554161042, 0.0283543834481215, 0.0287435063937335, 0.183854283387935, 0.265927870222064, 0.028158885082188, 0.0281192857326667, 0.0480032808748133, 0.0582715046328741, 0.00166204840814363, 0.0198757504826249, },
{ 0.128732988293081, 0.181648368433592, 0.0287565626271058, 0.028901183541565, 0.184662783276372, 0.267912681466749, 0.0265288755592655, 0.028223077698055, 0.0425480480176435, 0.0644421795084289, 0.00391488940437433, 0.0137283621737686, },
{ 0.132193528924247, 0.186751491545828, 0.0232475013048232, 0.0293207530653343, 0.187614627950089, 0.272365774994364, 0.0292198028152177, 0.0271871495273222, 0.0384715755627918, 0.04909605992821, 0.00126752569289757, 0.0232642086888751, },
{ 0.132048024122877, 0.187504862777805, 0.0219496020833394, 0.0292944816585061, 0.187337472405376, 0.273866980061882, 0.028514920781194, 0.0272033268107468, 0.0384810052754213, 0.0491606276847345, 0.00135032122037497, 0.0232883751177419, },
{ 0.132810884644786, 0.1879325334954, 0.0210396792725377, 0.0292879598124519, 0.187949369640425, 0.27434190205083, 0.0278588682083073, 0.0282922063724039, 0.0383581303339906, 0.0467536446127472, 0.000248580729480453, 0.0251262408266393, },
{ 0.133140390900782, 0.191238119943436, 0.0173911992090313, 0.0293436641438693, 0.188294520431252, 0.275659630643113, 0.0293200318102203, 0.0285234572895032, 0.038497840939006, 0.0462746373948155, 7.69424816478441E-07, 0.0223157378701552, },
{ 0.133483547033321, 0.19174587134891, 0.0169570131374669, 0.02961279491431, 0.189005953351639, 0.275679530560716, 0.0277054307457971, 0.0297863440015225, 0.0386017368943469, 0.045420843968059, 0, 0.0220009340439105, },
{ 0.134157666474916, 0.192382850947029, 0.01695896214293, 0.0301021578037007, 0.190193231109052, 0.277311684168987, 0.0271382660711534, 0.0283569718931966, 0.0387497611723053, 0.0430180215322606, 0, 0.0216304266844702, },
{ 0.13390701345433, 0.192548053061211, 0.0159633373036036, 0.0309738923829172, 0.190418444310323, 0.276620651678664, 0.0268182785857134, 0.0293062136089405, 0.0387704068568092, 0.0416726534044973, 0, 0.0230010553529906, },
{ 0.133948160071864, 0.192464814269493, 0.0158653586099847, 0.0317966120413651, 0.191026008029109, 0.27768590935726, 0.0261903175873792, 0.0291399832840645, 0.038847255290805, 0.0424184056347668, 0, 0.0206171758239085, },
{ 0.134439082334269, 0.192766812433519, 0.0149527391620872, 0.0309851727004476, 0.190583587175563, 0.276650454532363, 0.0258285420302148, 0.0316407759179786, 0.0388706859649663, 0.04229182040385, 0, 0.0209903273447424, },
{ 0.134863760112932, 0.19404795566722, 0.0141087418467235, 0.0308634462166074, 0.190962479726309, 0.277066506100628, 0.025931779670157, 0.0322522617665004, 0.0389716537758673, 0.0416174210898703, 0, 0.0193139940271854, },
{ 0.13487243515381, 0.193375736535791, 0.0142793334920619, 0.0315764913963497, 0.191519528437769, 0.276601905347031, 0.0249237308593768, 0.0325198965412019, 0.0389825141610667, 0.0410260388591308, 0, 0.0203223892164114, },
};
        public static double[] T12RotationDurations = new double[21] { 56.6058052546583, 53.3592776650565, 49.8666461879665, 46.9780929905481, 44.4751908518519, 42.3012002719365, 40.3553300249316, 38.7253974430293, 37.1674293882929, 35.8381028693346, 34.3140717963583, 33.3250502997705, 32.1874018460342, 31.3285499488915, 30.4005096412131, 29.7340918485657, 29.2684671957097, 28.9348908764197, 28.5054223508773, 28.1422455577852, 27.7550937293477, };
        public static double[] T12RotationDurationsGoSF = new double[21] { 55.3844943664592, 52.5274765516447, 49.3136769411509, 46.6537686116359, 44.0790406843797, 41.8792788211859, 39.8491988044997, 38.1099221558577, 36.5180066563869, 35.3139722838582, 33.6265820639167, 32.6004907236103, 31.6317431014094, 30.7313652783739, 29.8500202362682, 29.1456884883171, 28.7376454508857, 28.4019297555815, 28.046107893211, 27.6600076155705, 27.3941588308185, };
        public static double[] T12NGUptimes = new double[21] { 0.519921029758526, 0.53561329862187, 0.587825552909329, 0.622426727100302, 0.642858613393825, 0.694566966258789, 0.715038211705797, 0.7500634589884, 0.777352209075768, 0.800937740347276, 0.816212038694211, 0.836134442970663, 0.848346552940062, 0.82995285596444, 0.841086145973085, 0.824215547606957, 0.835313293570812, 0.821962173026406, 0.828753474265474, 0.823665283918896, 0.832736725695735, };
        public static double[] T12NGUptimesGoSF = new double[21] { 0.528642332704001, 0.547277491660863, 0.582224757537171, 0.617040178700263, 0.646580803100193, 0.692349178454503, 0.716516893106457, 0.752377228591472, 0.776468532674357, 0.761338090737826, 0.803468831202122, 0.824582560615182, 0.817917676271042, 0.817080220931682, 0.827443876462558, 0.81686024505247, 0.829013703084508, 0.817395018757496, 0.822705153759587, 0.832814409164821, 0.816332934186183, };
        public static double[] T12PercentMoonfiresExtended = new double[21] { 0.983318023809524, 0.988790131185808, 0.977753484126963, 0.969134530381355, 0.978140610496777, 0.980915517022193, 0.974767519823253, 0.969492441284195, 0.96754498021254, 0.972085388817052, 0.993854627450989, 0.994059528011214, 0.99969561904762, 1, 1, 1, 1, 1, 1, 1, 1, };

        #endregion

        #region 4T13

        public static double[,] T13CastDistribution = new double[21, 12] {
{ 0.106061988255026, 0.164033672852758, 0.0545586976450247, 0.0294875788733287, 0.143151576931007, 0.198393835986322, 0.0659178851548992, 0.0298928242118915, 0.0624824044080696, 0.0835740853639487, 0.0312395955044546, 0.0312058548132703, },
{ 0.108324570999527, 0.165158557946757, 0.0522708525553035, 0.0293060142411046, 0.141815094029224, 0.206183230882574, 0.0597275644256801, 0.0314823085313341, 0.0622079011419612, 0.0808126568722421, 0.0313741807671397, 0.0313370676071522, },
{ 0.111859532001602, 0.168237994870443, 0.0501519676970106, 0.0289723607506894, 0.146616300078273, 0.208426582920535, 0.057542924802864, 0.0332753915845648, 0.0609549320425303, 0.0730978557306194, 0.0318503908480172, 0.029013766672851, },
{ 0.116817312939149, 0.170682608890164, 0.0470895409544649, 0.0293543357792607, 0.148812775671935, 0.212451091206672, 0.0582681897576997, 0.032290667317902, 0.0514470556750075, 0.0722657938060915, 0.0322754340557695, 0.0282451939458847, },
{ 0.12151505574417, 0.177177505265695, 0.0433384816227158, 0.0300149762205268, 0.15203016684734, 0.219765857790637, 0.057013179835616, 0.0316064742497171, 0.0415548380690664, 0.0629632471890662, 0.0329454883732919, 0.0300747287921574, },
{ 0.124033205675724, 0.180464137195697, 0.0418735548728916, 0.0297555476747953, 0.154251427625348, 0.223983551046229, 0.0550862707212448, 0.0315425887362977, 0.0346601285881164, 0.0620497448575484, 0.0332756097657122, 0.0290242332403945, },
{ 0.125110039823936, 0.182549349972322, 0.0422934502791975, 0.0298502168550376, 0.157780312679705, 0.226577371835179, 0.0515385421537172, 0.0325048772229657, 0.0337249891169405, 0.0571066378601487, 0.0334530469879453, 0.0275111652129049, },
{ 0.126635330383847, 0.184020133172491, 0.040935133304021, 0.0295294940615677, 0.159335630003162, 0.227714035079243, 0.0481871179263187, 0.0337957542208958, 0.034349386937328, 0.0564440969196815, 0.0329919466236323, 0.0260619413678124, },
{ 0.128051354531198, 0.185333915945984, 0.0394988411745481, 0.0301541557020373, 0.160570943934974, 0.230681025870743, 0.0451996870288471, 0.0348258810894824, 0.0355721323314338, 0.0524802050190705, 0.0321668362935415, 0.0254650210781404, },
{ 0.127741366574775, 0.185506767132736, 0.0421031788157693, 0.0306942804101152, 0.162578867479455, 0.231456024394746, 0.0393531969710252, 0.0357787384137719, 0.0401999901610226, 0.0544422181394987, 0.0276213877667975, 0.0225239837402885, },
{ 0.130236504645981, 0.186946359090819, 0.0422898719500295, 0.0312454293408977, 0.163469031636228, 0.232825741213838, 0.0352480002140856, 0.0382559264578932, 0.0569666187896133, 0.054397129776036, 0.0112907102983034, 0.0168286765862754, },
{ 0.13154886208084, 0.187928409417537, 0.0389614869075976, 0.0312614866230111, 0.163527165205315, 0.233605113450412, 0.0352260043769405, 0.0382230418313711, 0.0559532367446718, 0.0532074322612959, 0.0123450213013003, 0.018212739799708, },
{ 0.132999810005451, 0.188540983478405, 0.0365992720387729, 0.0316513698584354, 0.163682740145123, 0.234868950778043, 0.0352396270849976, 0.0390373654814232, 0.0600847282789043, 0.0520433251017468, 0.00738780833186712, 0.0178640194168312, },
{ 0.134939378186939, 0.1899954729878, 0.035864515935784, 0.0323065307727425, 0.165269616397854, 0.236942883806616, 0.0338480729607361, 0.0382971211303977, 0.0647962876375603, 0.0454652445064569, 0.000439105312834388, 0.021835770364279, },
{ 0.1365345904467, 0.19113675322659, 0.0365406192129846, 0.0324628257201041, 0.166368233843573, 0.23995492830303, 0.0324235587113806, 0.0375664698158879, 0.0582191024394096, 0.0429234287994699, 0.00192077560878535, 0.0239487138720845, },
{ 0.138033910818086, 0.191271654638996, 0.0362479363543948, 0.0327355559356818, 0.167546303291836, 0.240848824228628, 0.0320684759336782, 0.0363227607197855, 0.0579781791365975, 0.0450865645161659, 0.00239895229260816, 0.019460882133542, },
{ 0.139578939410969, 0.192095819472437, 0.0343237915971872, 0.0336905268067095, 0.168251545214086, 0.241843953476187, 0.0326637838936155, 0.036038196276287, 0.0544408730874563, 0.0448608057392009, 0.0024442640989161, 0.0197675009269485, },
{ 0.141521781249184, 0.192280597378594, 0.0332852451880264, 0.0333101511330755, 0.168455610354192, 0.241957355220691, 0.0323889312378865, 0.0369911297826791, 0.0547738745238488, 0.0430367728776859, 0.00249109462428682, 0.0195074564298498, },
{ 0.142486336824944, 0.192648662244387, 0.0327046708322101, 0.0339290814623689, 0.168757260818218, 0.24273928206955, 0.0317362943030256, 0.0375190746909539, 0.0519867564280304, 0.0431750916227006, 0.0027966184644613, 0.0195208702391497, },
{ 0.142357808318757, 0.193219887924684, 0.0331817634918416, 0.0343668802318614, 0.16890783514695, 0.243021082333703, 0.030529851545313, 0.0383392791539972, 0.0528911279110245, 0.0427778975828335, 0.0023482571408301, 0.0180583292182053, },
{ 0.143647598061533, 0.193910937608458, 0.0331660413086792, 0.0340742346881094, 0.169967136986032, 0.24314463586807, 0.0307211863110632, 0.03709048728159, 0.0492800064456256, 0.0428251982488989, 0.00424860327500575, 0.017923933916935, },
};
        public static double[,] T13CastDistributionGoSF = new double[21, 12] {
{ 0.113728824185791, 0.169146536018396, 0.0540549435375972, 0.0269323243601819, 0.149193710747097, 0.203245528669339, 0.0721520725863493, 0.0258242017867856, 0.0439406361068512, 0.0829069473052507, 0.0267286077828926, 0.0321456669134677, },
{ 0.116745780411238, 0.170985158516302, 0.0529502786650116, 0.0255762424574944, 0.149655248355382, 0.210806412235747, 0.0657768791717514, 0.0279012284923959, 0.0534390789264962, 0.0823131961935356, 0.0114446621737529, 0.0324058344008933, },
{ 0.119150050404775, 0.173239560014721, 0.0536169391603763, 0.0256059216118219, 0.155221065168862, 0.215076263008221, 0.0607441234015407, 0.0285003539758133, 0.0602344048053265, 0.0753015944609155, 0.00548658401258829, 0.0278231399750384, },
{ 0.118965564181116, 0.173393750385621, 0.0528283521967472, 0.0274650790436566, 0.156309147019929, 0.216131114540286, 0.0581153275567904, 0.0286254460115225, 0.0652896914210009, 0.0750294924590646, 6.54045521246089E-05, 0.0277816306321414, },
{ 0.123035212585793, 0.179527291140803, 0.0479583594256845, 0.0278534303518885, 0.159038949119248, 0.220411718760892, 0.0568487935025373, 0.0283838306231402, 0.0639108595302516, 0.0633444169586884, 0.000230641057549319, 0.0294564969435239, },
{ 0.125276757766022, 0.181908656574347, 0.0466134836808289, 0.0286685826209522, 0.162085925058119, 0.225469695582932, 0.0530688096066192, 0.0273858939391166, 0.0575134818502993, 0.0627401563272255, 4.40791520987022E-05, 0.0292244778414395, },
{ 0.128025020983355, 0.184387185256476, 0.0478627478854606, 0.0291300989826136, 0.164993308746995, 0.2288207000189, 0.049219653383835, 0.0273288801233565, 0.0555955433041445, 0.0569606188306075, 2.35569143220048E-05, 0.027652685569933, },
{ 0.12955152323082, 0.1870178672851, 0.0445345261241222, 0.0294592659550937, 0.165886873026603, 0.230869781394009, 0.0494587852233877, 0.0271815969421142, 0.0514854204606436, 0.0562736973048506, 0.00094958015647547, 0.0273310828967812, },
{ 0.131456127424083, 0.188724724473639, 0.0423390345995266, 0.0302111715553326, 0.167348958251681, 0.235382005737846, 0.0462410208976751, 0.0274548732500353, 0.052078197751893, 0.0542721244140656, 0.000733942652891655, 0.0237578189913305, },
{ 0.132923648773919, 0.189125895692053, 0.0422421009659747, 0.0308358799348581, 0.167920344482547, 0.23636956336409, 0.0438184463708941, 0.027967987869952, 0.0483155124430762, 0.0535297706074426, 0.00283609475448283, 0.0241147547407098, },
{ 0.135599959887251, 0.189969972509256, 0.0427422072191534, 0.0320417470756071, 0.169675297546565, 0.240163670265283, 0.0404091686749247, 0.0283904852652619, 0.0431203898437408, 0.058127263403208, 0.0055646539128158, 0.0141951843969327, },
{ 0.136744352165996, 0.191791506874224, 0.0394142161929261, 0.0319143865167693, 0.170097248520043, 0.240266835262081, 0.0410010763536793, 0.0282542259496339, 0.0427680263663634, 0.0553697817831848, 0.00531712671931165, 0.0170612172957875, },
{ 0.137679200778296, 0.191894778626234, 0.0386099664084585, 0.0323886477110026, 0.170619562025038, 0.241064282829766, 0.0386591835236242, 0.0294269016850839, 0.0380308335474871, 0.0631441820551415, 0.00914405815191453, 0.00933840265795367, },
{ 0.141786091265386, 0.194808457149677, 0.0365133628444044, 0.0323022969113986, 0.17263355930129, 0.245477356129173, 0.0392184233753467, 0.0270145639683716, 0.0371559004684068, 0.0483695485293935, 0.00482159100634611, 0.0198988490508061, },
{ 0.142979582274448, 0.19540857717007, 0.0375893621044656, 0.0325234926790356, 0.173403088356051, 0.247733664518025, 0.0369216001418134, 0.0267531817114971, 0.0363744182629455, 0.0462105691831727, 0.00246054363654474, 0.0216419199619307, },
{ 0.144197184728386, 0.196152983900766, 0.0373439258148062, 0.0331083754162157, 0.174437879869676, 0.249386856426291, 0.0368587171286421, 0.0249618695361089, 0.0362890178447612, 0.0452678785625211, 0.00242788018294459, 0.0195674305888821, },
{ 0.14469387388923, 0.196592830802519, 0.0359263220866138, 0.0340328499523497, 0.174852716352104, 0.249179729887886, 0.0364530851576171, 0.025488420591614, 0.0358455796147279, 0.0450734654546596, 0.00216720134766526, 0.0196939248630131, },
{ 0.145533862247637, 0.196970163185557, 0.035061418332545, 0.0345331105744662, 0.175283988420982, 0.250571421882879, 0.036336594604657, 0.0252523543583397, 0.0358554133706638, 0.0447805227813809, 0.00135092628154244, 0.0184702239593497, },
{ 0.146436798088947, 0.196687595236277, 0.0350128908989326, 0.0344089056568526, 0.175124108617002, 0.250281368610368, 0.0347654027708677, 0.0271509874388813, 0.0357607598446382, 0.0435627032637739, 0.000749296565727473, 0.0200591830077323, },
{ 0.146514052576599, 0.19729012057883, 0.0357981418107012, 0.034864180589468, 0.175535042521421, 0.251365143489769, 0.0331391511096585, 0.0273740659386435, 0.0357523800139709, 0.0419199086446337, 0.00134531671569287, 0.0191024960106127, },
{ 0.147257137376811, 0.19734903986504, 0.0351601506252373, 0.0359420775284001, 0.176096583425641, 0.251284418281057, 0.0331604227929761, 0.0263152786063698, 0.0359132961280614, 0.0408498857774392, 3.57352957226107E-06, 0.020668136063394, },
};
        public static double[] T13RotationDurations = new double[21] { 60.9223643975153, 57.6653085181899, 54.1817466798418, 51.2166025414832, 48.2282290499194, 45.6442080448308, 43.5495482913414, 41.7983870039523, 40.1386629621683, 38.7419797760212, 37.2494616029863, 36.1394178962133, 35.1387574142976, 33.9501171629336, 32.9032884376493, 32.2312332048327, 31.675401230557, 31.3273873854936, 30.8502180577532, 30.5321461504486, 30.1198962513456, };
        public static double[] T13RotationDurationsGoSF = new double[21] { 59.7917936149068, 56.4687720023662, 53.1564235177866, 50.6297678575929, 47.9492294685993, 45.4887366740098, 43.3171840594573, 41.4333658790806, 39.7255018193111, 38.3201004216074, 36.8780569345629, 35.6901404376594, 34.8601864917779, 33.3861411683966, 32.4043370298756, 31.6448117316227, 31.2063342113925, 30.8305091853843, 30.4447808482073, 30.0975703443223, 29.7457608078678, };
        public static double[] T13NGUptimes = new double[21] { 0.480671526510346, 0.499915148032785, 0.541183939083973, 0.569436414654496, 0.595112454153521, 0.650216173920894, 0.663836466465935, 0.701311108664841, 0.723399387436872, 0.745051796208304, 0.778436964546759, 0.798408862558561, 0.786098237416495, 0.826510056492755, 0.838071609623912, 0.818646524492876, 0.838491865250152, 0.819153805405268, 0.836259507391137, 0.820684071879092, 0.830740912478305, };
        public static double[] T13NGUptimesGoSF = new double[21] { 0.488621979363204, 0.511516498408514, 0.549259640126577, 0.571628598412319, 0.59250938932973, 0.639776331704768, 0.660487796934056, 0.700424365350531, 0.7215616139, 0.737712298418062, 0.746870790016044, 0.772980184886371, 0.738527351847595, 0.807002858435544, 0.815340987089537, 0.808597115800764, 0.81714181915599, 0.804138743041873, 0.815181137043286, 0.805030614530273, 0.813338422161036, };
        public static double[] T13PercentMoonfiresExtended = new double[21] { 0.771492616983559, 0.94252204481791, 0.978633, 0.979136332399654, 0.962395944444459, 0.957072959948836, 0.970562318197378, 0.97759313445376, 0.980264186274381, 0.964576079831825, 0.945174363247791, 0.949540974969387, 0.961354505258154, 0.965490383237473, 0.976527704014942, 0.974336067226878, 0.991486699346403, 0.991566588235297, 0.996967382352942, 0.995746372549021, 0.9999895, };

        #endregion

        public static string[] CastDistributionSpells = new string[12] { "Starfire", "Wrath", "Starsurge", "Shooting Stars", "Starfire (Eclipse)", "Wrath (Eclipse)", "Starsurge (Eclipse)", "Shooting Stars (Eclipse)", "Moonfire", "Insect Swarm", "Moonfire (Eclipse)", "Insect Swarm (Eclipse)" };

        #endregion

        // A list of all the damage spells
        private Spell[] _spellData = null;
        private Spell[] SpellData
        {
            get
            {
                if (_spellData == null)
                {
                    _spellData = new Spell[] {
                        new Spell()
                        {
                            Name = "SF",
                            BaseDamage = (1214f + 1514f) / 2.0f,
                            SpellDamageModifier = 1.231f,
                            BaseCastTime = 3.2f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Arcane,
                            BaseEnergy = 20
                        },
                        new Spell()
                        {
                            Name = "MF",
                            BaseDamage = (197.0f + 239.0f) / 2.0f,
                            SpellDamageModifier = 0.18f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = new DotEffect()
                                {
                                    BaseDuration = 12.0f,
                                    BaseTickLength = 2.0f,
                                    TickDamage = 93.0f,
                                    SpellDamageModifierPerTick = 0.18f
                                },
                            School = SpellSchool.Arcane
                        },
                        new Spell()
                        {
                            Name = "W",
                            BaseDamage = (831f + 937f) / 2.0f,
                            SpellDamageModifier = 3.075f/3.5f,
                            BaseCastTime = 2.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = null,
                            School = SpellSchool.Nature,
                            BaseEnergy = 40/3f
                        },
                        new Spell()
                        {
                            Name = "IS",
                            BaseDamage = 0.0f,
                            SpellDamageModifier = 0.0f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.08f),
                            DotEffect = new DotEffect()
                            {
                                BaseDuration = 12.0f,
                                BaseTickLength = 2.0f,
                                TickDamage = 136.0f,
                                SpellDamageModifierPerTick = 0.13f
                            },
                            School = SpellSchool.Nature
                        },
                        new Spell()
                        {
                            Name = "SS",
                            BaseDamage = (1018 + 1404) / 2f,
                            SpellDamageModifier = 1.228f,
                            BaseCastTime = 2.0f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Spellstorm,
                            BaseEnergy = 15
                        }
                    };
                }
                return _spellData;
            }
        }
        public Spell Starfire
        {
            get
            {
                return SpellData[0];
            }
        }
        public Spell Moonfire
        {
            get
            {
                return SpellData[1];
            }
        }
        public Spell Wrath
        {
            get
            {
                return SpellData[2];
            }
        }
        public Spell InsectSwarm
        {
            get
            {
                return SpellData[3];
            }
        }
        public Spell Starsurge
        {
            get
            {
                return SpellData[4];
            }
        }
        private void ResetSpellList()
        {
            // Since the property rebuilding the array is based on this variable being null, this effectively forces a refresh
            _spellData = null;
        }

        // The spell rotations themselves.
        private SpellRotation[] rotations = null;
        public SpellRotation[] Rotations
        {
            get
            {
                if (rotations == null)
                {
                    rotations = new SpellRotation[3]
                    {
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Unused" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Lunar Only", StarfallCastMode = StarfallMode.LunarOnly } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall On CD", StarfallCastMode = StarfallMode.OnCooldown } },
                    };
                    //RecreateRotations();
                }
                return rotations;
            }
        }

        // Results data from the calculations, which will be sent to the UI.
        RotationData[] cachedResults = new RotationData[3];

        public void Solve(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            CalculationOptionsMoonkin calcOpts = character.CalculationOptions as CalculationOptionsMoonkin;
            DruidTalents talents = character.DruidTalents;
            procEffects = new List<ProcEffect>();
            UpdateSpells(character, ref calcs);

            float trinketDPS = 0.0f;
            float baseSpellPower = calcs.SpellPower;
            float baseHit = 1 - Math.Max(0, calcs.SpellHitCap - calcs.SpellHit);
            float baseCrit = calcs.SpellCrit;
            float baseHaste = calcs.SpellHaste;
            float baseMastery = calcs.Mastery;
            float sub35PercentTime = (float)(character.BossOptions.Under20Perc + character.BossOptions.Under35Perc);

            BuildProcList(calcs);

            float maxDamageDone = 0.0f, maxBurstDamageDone = 0.0f;
            SpellRotation maxBurstRotation = Rotations[0];
            SpellRotation maxRotation = Rotations[0];

            float manaPool = GetEffectiveManaPool(character, calcOpts, calcs);

            float manaGained = manaPool - calcs.BasicStats.Mana;

            float oldArcaneMultiplier = calcs.BasicStats.BonusArcaneDamageMultiplier;
            float oldNatureMultiplier = calcs.BasicStats.BonusNatureDamageMultiplier;

            int rotationIndex = 1;
            foreach (SpellRotation rot in Rotations)
            {
                if (rot.RotationData.Name == "None") continue;
                rot.Solver = this;

                // Reset variables modified in the pre-loop to base values
                float currentSpellPower = baseSpellPower;
                float currentCrit = baseCrit + StatConversion.NPC_LEVEL_SPELL_CRIT_MOD[character.BossOptions.Level - character.Level];
                float currentHaste = baseHaste;
                float currentMastery = baseMastery;
                float currentTrinketDPS = trinketDPS;
                calcs.BasicStats.BonusArcaneDamageMultiplier = oldArcaneMultiplier;
                calcs.BasicStats.BonusNatureDamageMultiplier = oldNatureMultiplier;
                float accumulatedDamage = 0.0f;
                float totalUpTime = 0.0f;
                float[] spellDetails = new float[NUM_SPELL_DETAILS];
                List<ProcEffect> activatedEffects = new List<ProcEffect>();
                List<ProcEffect> alwaysUpEffects = new List<ProcEffect>();

                float baselineDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);

                // Calculate spell power/spell damage modifying trinkets in a separate pre-loop
                // Add spell crit effects here as well, since they no longer affect timing
                foreach (ProcEffect proc in procEffects)
                {
                    bool handled = false;
                    if (proc.Effect.Stats.SpellPower > 0 || proc.Effect.Stats.CritRating > 0 || proc.Effect.Stats.MasteryRating > 0)
                    {
                        handled = true;
                        float procSpellPower = proc.Effect.Stats.SpellPower;
                        float procSpellCrit = StatConversion.GetSpellCritFromRating(proc.Effect.Stats.CritRating);
                        float procMastery = StatConversion.GetMasteryFromRating(proc.Effect.Stats.MasteryRating);

                        float triggerInterval = 0.0f, triggerChance = 1.0f;
                        switch (proc.Effect.Trigger)
                        {
                            case Trigger.DamageDone:
                            case Trigger.DamageOrHealingDone:
                                triggerInterval = ((rot.RotationData.Duration / rot.RotationData.CastCount) + (rot.RotationData.Duration / (rot.RotationData.MoonfireTicks + rot.RotationData.InsectSwarmTicks))) / 2.0f;
                                break;
                            case Trigger.Use:
                                break;
                            case Trigger.SpellHit:
                            case Trigger.DamageSpellHit:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                triggerChance = baseHit;
                                break;
                            case Trigger.SpellCrit:
                            case Trigger.DamageSpellCrit:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts);
                                triggerChance = baseCrit;
                                break;
                            case Trigger.SpellCast:
                            case Trigger.DamageSpellCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                break;
                            case Trigger.MoonfireCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireCasts;
                                break;
                            case Trigger.DoTTick:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.InsectSwarmTicks + rot.RotationData.MoonfireTicks);
                                break;
                            case Trigger.MoonfireTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireTicks;
                                break;
                            case Trigger.InsectSwarmTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.InsectSwarmTicks;
                                break;
                            default:
                                triggerChance = 0.0f;
                                break;
                        }
                        if (triggerChance > 0)
                        {
                            float durationMultiplier = proc.Effect.LimitedToExecutePhase ? sub35PercentTime : 1f;
                            currentSpellPower += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                            proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellPower * durationMultiplier;
                            currentCrit += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellCrit * durationMultiplier;
                            currentMastery += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procMastery * durationMultiplier;
                        }
                    }
                    // 2T10 (both if statements, which is why it isn't else-if)
                    if (proc.Effect.Stats.BonusArcaneDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusArcaneDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusArcaneDamageMultiplier;
                    }
                    if (proc.Effect.Stats.BonusNatureDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusNatureDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusNatureDamageMultiplier;
                    }
                    // Variable Pulse Lightning Capacitor
                    // This might catch some other effects, I probably need a better way to differentiate
                    if (proc.Effect.Trigger == Trigger.DamageSpellCrit && proc.Effect.Stats.NatureDamage > 0)
                    {
                        float procInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts + rot.RotationData.DotTicks);
                        currentTrinketDPS += proc.Effect.GetAverageProcsPerSecond(procInterval, currentCrit, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.NatureDamage;
                    }
                    // Nested special effects
                    if (proc.Effect.Stats._rawSpecialEffectDataSize > 0)
                    {
                        handled = true;
                        SpecialEffect childEffect = proc.Effect.Stats._rawSpecialEffectData[0];
                        // Heart of Ignacious
                        if (childEffect.Stats.SpellPower > 0)
                        {
                            float averageStack = childEffect.GetAverageStackSize(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit, 3.0f, proc.Effect.Duration);
                            currentSpellPower += childEffect.Stats.SpellPower * averageStack * proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit);
                        }
                        // 4T11
                        if (childEffect.Stats.SpellCrit != 0)
                        {
                            float maxStack = proc.Effect.Stats.SpellCrit;
                            float numNegativeStacks = childEffect.GetAverageStackSize(rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts), Math.Min(1.0f, baseCrit + maxStack), 3.0f, proc.Effect.Duration);
                            float averageNegativeValue = childEffect.Stats.SpellCrit * numNegativeStacks;
                            float averageCrit = maxStack + averageNegativeValue;
                            currentCrit += averageCrit * proc.Effect.GetAverageUptime(rot.RotationData.Duration / 2f, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f);
                        }
                    }
                    if (!handled)
                    {
                        if (proc.CalculateDPS != null)
                        {
                            accumulatedDamage += proc.CalculateDPS(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) * rot.RotationData.Duration;
                        }
                        if (proc.Activate != null)
                        {
                            float upTime = proc.UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            // Procs with 100% uptime should be activated and not put into the combination loop
                            if (upTime == 1)
                            {
                                alwaysUpEffects.Add(proc);
                                proc.Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                            }
                            // Procs with uptime 0 < x < 100 should be activated
                            else if (upTime > 0)
                                activatedEffects.Add(proc);
                        }
                        if (proc.CalculateMP5 != null)
                        {
                            manaGained += proc.CalculateMP5(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) / 5.0f * character.BossOptions.BerserkTimer * 60.0f;
                        }
                    }
                }
                // Calculate stat-boosting trinkets, taking into effect interactions with other stat-boosting procs
                int sign = 1;
                float[] cachedDamages = new float[1 << activatedEffects.Count];
                float[] cachedUptimes = new float[1 << activatedEffects.Count];
                float[,] cachedDetails = new float[1 << activatedEffects.Count, NUM_SPELL_DETAILS];
                List<int> calculatedPairs = new List<int>();
                // Iterate over the entire set of trinket combinations (each trinket by itself, 2 at a time, ...)
                for (int i = 1; i <= activatedEffects.Count; ++i)
                {
                    // Create a new combination generator for this "level" of trinket interaction
                    CombinationGenerator gen = new CombinationGenerator(activatedEffects.Count, i);
                    // Iterate over all combinations
                    while (gen.HasNext())
                    {
                        float tempUpTime = 1.0f;
                        int[] vals = gen.GetNext();
                        int pairs = 0;
                        int lengthCounter = 0;
                        // Activate the trinkets, calculate the damage and uptime, then deactivate them
                        foreach (int idx in vals)
                        {
                            pairs |= 1 << idx;
                            ++lengthCounter;
                            activatedEffects[idx].Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        currentCrit = (float)Math.Min(1.0f, currentCrit);
                        float tempDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency) / rot.RotationData.Duration;
                        spellDetails[0] = rot.RotationData.StarfireAvgHit;
                        spellDetails[1] = rot.RotationData.WrathAvgHit;
                        spellDetails[2] = rot.RotationData.MoonfireAvgHit;
                        spellDetails[3] = rot.RotationData.InsectSwarmAvgHit;
                        spellDetails[4] = rot.RotationData.StarSurgeAvgHit;
                        spellDetails[5] = rot.RotationData.StarfireAvgCast;
                        spellDetails[6] = rot.RotationData.WrathAvgCast;
                        spellDetails[7] = rot.RotationData.MoonfireAvgCast;
                        spellDetails[8] = rot.RotationData.InsectSwarmAvgCast;
                        spellDetails[9] = rot.RotationData.StarSurgeAvgCast;
                        spellDetails[10] = rot.RotationData.AverageInstantCast;
                        spellDetails[11] = rot.RotationData.StarfireAvgEnergy;
                        spellDetails[12] = rot.RotationData.WrathAvgEnergy;
                        spellDetails[13] = rot.RotationData.StarSurgeAvgEnergy;
                        spellDetails[14] = rot.RotationData.TreantDamage;
                        spellDetails[15] = rot.RotationData.StarfallDamage;
                        spellDetails[16] = rot.RotationData.MushroomDamage;
                        foreach (int idx in vals)
                        {
                            tempUpTime *= activatedEffects[idx].UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            activatedEffects[idx].Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        if (tempUpTime == 0) continue;
                        // Adjust previous probability tables by the current factor
                        // At the end of the algorithm, this ensures that the probability table will contain the individual
                        // probabilities of each effect or set of effects.
                        // These adjustments only need to be made for higher levels of the table, and if the current probability is > 0.
                        if (lengthCounter > 1)
                        {
                            foreach (int subset in calculatedPairs)
                            {
                                // Truly a subset?
                                if ((pairs & subset) != subset)
                                {
                                    continue;
                                }

                                // Calculate the "layer" of the current subset by getting the set bit count.
                                int subsetLength = 0;
                                for (int j = subset; j > 0; ++subsetLength)
                                {
                                    j &= --j;
                                }

                                // Set the sign of the operation: Evenly separated layers are added, oddly separated layers are subtracted
                                int newSign = ((lengthCounter - subsetLength) % 2 == 0) ? 1 : -1;

                                // Adjust by current uptime * sign of operation.
                                cachedUptimes[subset] += newSign * tempUpTime;
                            }
                        }
                        // Cache the results to be calculated later
                        cachedUptimes[pairs] = tempUpTime;
                        cachedDamages[pairs] = tempDPS;
                        for (int idx = 0; idx < NUM_SPELL_DETAILS; ++idx)
                        {
                            cachedDetails[pairs, idx] = spellDetails[idx];
                        }
                        calculatedPairs.Add(pairs);
                        totalUpTime += sign * tempUpTime;
                    }
                    sign = -sign;
                }
                float accumulatedDPS = 0.0f;
                Array.Clear(spellDetails, 0, spellDetails.Length);
                // Apply the above-calculated probabilities to the previously stored damage calculations and add to the result.
                for (int idx = 0; idx < cachedUptimes.Length; ++idx)
                {
                    if (cachedUptimes[idx] == 0) continue;
                    accumulatedDPS += cachedUptimes[idx] * cachedDamages[idx];
                    for (int i = 0; i < NUM_SPELL_DETAILS; ++i)
                    {
                        spellDetails[i] += cachedUptimes[idx] * cachedDetails[idx,i];
                    }
                }
                float damageDone = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);
                accumulatedDPS += (1 - totalUpTime) * damageDone / rot.RotationData.Duration;
                spellDetails[0] += (1 - totalUpTime) * rot.RotationData.StarfireAvgHit;
                spellDetails[1] += (1 - totalUpTime) * rot.RotationData.WrathAvgHit;
                spellDetails[2] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgHit;
                spellDetails[3] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgHit;
                spellDetails[4] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgHit;
                spellDetails[5] += (1 - totalUpTime) * rot.RotationData.StarfireAvgCast;
                spellDetails[6] += (1 - totalUpTime) * rot.RotationData.WrathAvgCast;
                spellDetails[7] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgCast;
                spellDetails[8] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgCast;
                spellDetails[9] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgCast;
                spellDetails[10] += (1 - totalUpTime) * rot.RotationData.AverageInstantCast;
                spellDetails[11] += (1 - totalUpTime) * rot.RotationData.StarfireAvgEnergy;
                spellDetails[12] += (1 - totalUpTime) * rot.RotationData.WrathAvgEnergy;
                spellDetails[13] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgEnergy;
                spellDetails[14] += (1 - totalUpTime) * rot.RotationData.TreantDamage;
                spellDetails[15] += (1 - totalUpTime) * rot.RotationData.StarfallDamage;
                spellDetails[16] += (1 - totalUpTime) * rot.RotationData.MushroomDamage;

                float burstDPS = accumulatedDPS + accumulatedDamage / rot.RotationData.Duration;
                float sustainedDPS = burstDPS;

                // Mana calcs:
                // Main rotation - all spells
                // Movement rotation - Lunar Shower MF, IS, Shooting Stars procs, and Starfall only
                rot.RotationData.ManaGained += manaGained / (character.BossOptions.BerserkTimer * 60.0f) * rot.RotationData.Duration;
                float timeToOOM = manaPool / ((rot.RotationData.ManaUsed - rot.RotationData.ManaGained) / rot.RotationData.Duration);
                if (timeToOOM <= 0) timeToOOM = character.BossOptions.BerserkTimer * 60.0f;   // Happens when ManaUsed is less than 0
                if (timeToOOM < character.BossOptions.BerserkTimer * 60.0f)
                {
                    rot.RotationData.TimeToOOM = new TimeSpan(0, (int)(timeToOOM / 60), (int)(timeToOOM % 60));
                    sustainedDPS = burstDPS * timeToOOM / (character.BossOptions.BerserkTimer * 60.0f);
                }
                
                burstDPS += currentTrinketDPS;
                sustainedDPS += currentTrinketDPS;

                rot.RotationData.SustainedDPS = sustainedDPS;
                rot.RotationData.BurstDPS = burstDPS;
                rot.RotationData.StarfireAvgHit = spellDetails[0];
                rot.RotationData.WrathAvgHit = spellDetails[1];
                rot.RotationData.MoonfireAvgHit = spellDetails[2];
                rot.RotationData.InsectSwarmAvgHit = spellDetails[3];
                rot.RotationData.StarSurgeAvgHit = spellDetails[4];
                rot.RotationData.StarfireAvgCast = spellDetails[5];
                rot.RotationData.WrathAvgCast = spellDetails[6];
                rot.RotationData.MoonfireAvgCast = spellDetails[7];
                rot.RotationData.InsectSwarmAvgCast = spellDetails[8];
                rot.RotationData.StarSurgeAvgCast = spellDetails[9];
                rot.RotationData.AverageInstantCast = spellDetails[10];
                rot.RotationData.StarfireAvgEnergy = spellDetails[11];
                rot.RotationData.WrathAvgEnergy = spellDetails[12];
                rot.RotationData.StarSurgeAvgEnergy = spellDetails[13];
                rot.RotationData.TreantDamage = spellDetails[14];
                rot.RotationData.StarfallDamage = spellDetails[15];
                rot.RotationData.MushroomDamage = spellDetails[16];

                // Update the sustained DPS rotation if any one of the following three cases is true:
                // 1) No user rotation is selected and sustained DPS is maximum
                // 2) A user rotation is selected, Eclipse is not present, and the user rotation matches the current rotation
                // 3) A user rotation is selected, Eclipse is present, and the user rotation's dot spells matches this rotation's
                if ((calcOpts.UserRotation == "None" && sustainedDPS > maxDamageDone) || rot.RotationData.Name == calcOpts.UserRotation)
                {
                    maxDamageDone = sustainedDPS;
                    maxRotation = rot;
                }
                if (burstDPS > maxBurstDamageDone)
                {
                    maxBurstDamageDone = burstDPS;
                    maxBurstRotation = rot;
                }
                cachedResults[rotationIndex - 1] = rot.RotationData;

                // Deactivate always-up procs
                foreach (ProcEffect proc in alwaysUpEffects)
                {
                    proc.Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                }

                ++rotationIndex;
            }
            // Present the findings to the user.
            calcs.SelectedRotation = maxRotation.RotationData;
            calcs.BurstRotation = maxBurstRotation.RotationData;
            calcs.SubPoints = new float[] { maxBurstDamageDone, maxDamageDone };
            calcs.OverallPoints = calcs.SubPoints[0] + calcs.SubPoints[1];
            calcs.Rotations = cachedResults;
        }

        // Create proc effect calculations for proc-based trinkets.
        private void BuildProcList(CharacterCalculationsMoonkin calcs)
        {
            // Implement a new handler for each special effect in the calculations stats
            foreach (SpecialEffect effect in calcs.BasicStats.SpecialEffects())
            {
                procEffects.Add(new ProcEffect(effect));
            }
        }

        // Non-rotation-specific mana calculations
        private float GetEffectiveManaPool(Character character, CalculationOptionsMoonkin calcOpts, CharacterCalculationsMoonkin calcs)
        {
            float fightLength = character.BossOptions.BerserkTimer * 60.0f;

            float innervateCooldown = 180;

            // Mana/5 calculations
            float totalManaRegen = calcs.ManaRegen * fightLength;

            // Mana pot calculations
            float manaRestoredByPots = 0.0f;
            foreach (Buff b in character.ActiveBuffs)
            {
                if (b.Stats.ManaRestore > 0)
                {
                    manaRestoredByPots = b.Stats.ManaRestore;
                    break;
                }
            }

            // Innervate calculations
            float innervateDelay = calcOpts.InnervateDelay * 60.0f;
            int numInnervates = (calcOpts.Innervate && fightLength - innervateDelay > 0) ? ((int)(fightLength - innervateDelay) / (int)innervateCooldown + 1) : 0;
            float totalInnervateMana = numInnervates * 0.2f * calcs.BasicStats.Mana;
            totalInnervateMana *= 1 + 0.15f * character.DruidTalents.Dreamstate;

            // Replenishment calculations
            float replenishmentPerTick = calcs.BasicStats.Mana * calcs.BasicStats.ManaRestoreFromMaxManaPerSecond;
            float replenishmentMana = calcOpts.ReplenishmentUptime * replenishmentPerTick * character.BossOptions.BerserkTimer * 60;

            return calcs.BasicStats.Mana + totalInnervateMana + totalManaRegen + manaRestoredByPots + replenishmentMana;
        }

        /*private void RecreateRotations()
        {
            rotations[0] = new SpellRotation() { RotationData = new RotationData() { Name = "None" } };
            for (int mfMode = 0; mfMode < 2; ++mfMode)
            {
                for (int isMode = 0; isMode < 2; ++isMode)
                {
                    for (int sfMode = 0; sfMode < 3; ++sfMode)
                    {
                        for (int wmMode = 0; wmMode < 3; ++wmMode)
                        {
                            int index = 1 + (wmMode + 3 * sfMode + 9 * isMode + 18 * mfMode);
                            DotMode mfModeEnum = (DotMode)mfMode;
                            DotMode isModeEnum = (DotMode)isMode;
                            StarfallMode sfModeEnum = (StarfallMode)sfMode;
                            MushroomMode wmModeEnum = (MushroomMode)wmMode;
                            string name = String.Format("MF {0} IS {1} SF {2} WM {3}",
                                mfModeEnum.ToString(),
                                isModeEnum.ToString(),
                                sfModeEnum.ToString(),
                                wmModeEnum.ToString());
                            rotations[index] = new SpellRotation()
                            {
                                RotationData = new RotationData()
                                {
                                    Name = name,
                                    MoonfireRefreshMode = mfModeEnum,
                                    InsectSwarmRefreshMode = isModeEnum,
                                    StarfallCastMode = sfModeEnum,
                                    WildMushroomCastMode = wmModeEnum
                                }
                            };
                        }
                    }
                }
            }
        }*/

        // Add talented effects to the spells
        private void UpdateSpells(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            DruidTalents talents = character.DruidTalents;
            StatsMoonkin stats = calcs.BasicStats;

            switch (talents.StarlightWrath)
            {
                case 1:
                    Starfire.BaseCastTime -= 0.15f;
                    Wrath.BaseCastTime -= 0.15f;
                    break;
                case 2:
                    Starfire.BaseCastTime -= 0.25f;
                    Wrath.BaseCastTime -= 0.25f;
                    break;
                case 3:
                    Starfire.BaseCastTime -= 0.5f;
                    Wrath.BaseCastTime -= 0.5f;
                    break;
                default:
                    break;
            }

            float moonfireDotGlyph = talents.GlyphOfMoonfire ? 0.2f : 0.0f;
            float insectSwarmGlyph = talents.GlyphOfInsectSwarm ? 0.3f : 0.0f;
            // Add spell-specific damage
            // Moonfire, Insect Swarm: glyphs
            Moonfire.DotEffect.AllDamageModifier *= 1 + moonfireDotGlyph;
            InsectSwarm.DotEffect.AllDamageModifier *= 1 + insectSwarmGlyph;
            // Moonfire: Direct damage +(0.03 * Blessing of the Grove)
            Moonfire.AllDamageModifier *= 1 + 0.03f * talents.BlessingOfTheGrove;
            // Moonfire, Insect Swarm: +2/4/6 seconds for Genesis
            Moonfire.DotEffect.BaseDuration += 2f * talents.Genesis;
            InsectSwarm.DotEffect.BaseDuration += 2f * talents.Genesis;
            // Wrath: 10% for glyph
            Wrath.AllDamageModifier *= 1 + (talents.GlyphOfWrath ? 0.1f : 0f);

            // Add spell-specific critical strike damage
            // Burning Shadowspirit Diamond
            float baseCritMultiplier = 1.5f * (1 + stats.BonusCritDamageMultiplier);
            float moonfuryMultiplier = baseCritMultiplier + (baseCritMultiplier - 1);
            Starfire.CriticalDamageModifier = Wrath.CriticalDamageModifier = Moonfire.CriticalDamageModifier = InsectSwarm.CriticalDamageModifier = moonfuryMultiplier;
            Starsurge.CriticalDamageModifier = moonfuryMultiplier;

            // Reduce spell-specific mana costs
            // Shard of Woe (Mana cost -405)
            Starfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Moonfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Wrath.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            InsectSwarm.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            Starsurge.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            // All spells: Mana cost -(0.03 * Moonglow)
            Starfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Moonfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Wrath.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            InsectSwarm.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Starsurge.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);

            // Add set bonuses
            Moonfire.CriticalChanceModifier += stats.BonusCritChanceMoonfire;
            InsectSwarm.CriticalChanceModifier += stats.BonusCritChanceInsectSwarm;
            Starfire.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Wrath.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Starsurge.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;

            // Dragonwrath, Tarecgosa's Rest: X% chance on damaging spell cast to proc a duplicate version of the spell.
            // If it duplicates a DoT tick, it fires Wrath of Tarecgosa for an equivalent amount of damage.
            // Wrath, Starfire, and Starsurge will duplicate the Eclipse energy gained.
            if (calcs.BasicStats.DragonwrathProc > 0)
            {
                Starfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Wrath.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Starsurge.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                InsectSwarm.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
            }

            // PTR changes go here
            if (((CalculationOptionsMoonkin)character.CalculationOptions).PTRMode)
            {
            }
        }
    }
}
