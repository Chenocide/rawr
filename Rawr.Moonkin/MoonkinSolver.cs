using System;
using System.Collections.Generic;

namespace Rawr.Moonkin
{
    // The interface public class to the rest of Rawr.  Provides a single Solve method that runs all the calculations.
    public class MoonkinSolver
    {
        private const int NUM_SPELL_DETAILS = 17;
        // A list of all currently active proc effects.
        public List<ProcEffect> procEffects;
        public static float BaseMana = 18635f;
        public static float OOC_PROC_CHANCE = 0.0583f;
        public static float EUPHORIA_PERCENT = 0.08f;
        public static float DRAGONWRATH_PROC_RATE = 0.11f;
        public static float ECLIPSE_BASE = 0.25f;

        #region Cast Distributions

        #region Base

        public static double[,] CastDistribution = new double[21, 12] {
{ 0.111247122093534, 0.162710943953321, 0.0272273677920526, 0.0491073656830524, 0.140773300057998, 0.195983584948769, 0.0312966835972513, 0.0594581627093622, 0.0506098525457389, 0.080352906026468, 0.0604878820365912, 0.0307448285558621, },
{ 0.112555629090323, 0.163318980291609, 0.0260434885041851, 0.0514731266539832, 0.142064719223196, 0.198647526388626, 0.0285447442269693, 0.0602239201003665, 0.0470821816318897, 0.0787806830745435, 0.06035146885746, 0.0309135319568492, },
{ 0.117220929567725, 0.171905995694249, 0.0236108346039464, 0.0479411949639216, 0.146497059415596, 0.204171412163137, 0.0282091157562203, 0.0600456359567119, 0.0409187312842925, 0.0688201123841263, 0.0592801796549539, 0.0313787985551201, },
{ 0.120186385244133, 0.169851696606944, 0.022103285063645, 0.0510641493801521, 0.147205921067715, 0.207528142385171, 0.0256229114077161, 0.060104023457851, 0.037743170051237, 0.0729561936173964, 0.0594818433291934, 0.026152278388846, },
{ 0.124538770424025, 0.176428902218752, 0.0214267483704665, 0.0483707841162639, 0.151001221861387, 0.212405819663422, 0.0243690899095961, 0.0601251368530948, 0.0376275274514605, 0.061162217689966, 0.0530392358400355, 0.02950454560153, },
{ 0.125821183930257, 0.178216023532847, 0.0186929625614846, 0.0499606004140549, 0.15172303499235, 0.214210462185019, 0.0230876975583177, 0.0611945115313478, 0.0348098646677388, 0.0611558591293812, 0.0529042179110345, 0.0282235815861681, },
{ 0.129260827710536, 0.182778572956494, 0.0187620771497376, 0.0485016874689928, 0.155467289465549, 0.219428524293148, 0.0215297676585484, 0.0592423689255857, 0.034355168559248, 0.054861540546666, 0.0481592736264557, 0.0276529016390377, },
{ 0.130130233999264, 0.182954023924437, 0.0166719716933645, 0.0506845070660841, 0.155370572858285, 0.219844227848958, 0.0203520035023751, 0.0615071580848607, 0.0322716582561725, 0.0544105392727073, 0.0484460854190372, 0.0273570180744551, },
{ 0.132998799270861, 0.186333748773931, 0.016336510071013, 0.0500510527429804, 0.158149889284611, 0.225260806531614, 0.0193415807831372, 0.0590954343736017, 0.0341515948420981, 0.0527985004428738, 0.0420644942420276, 0.0234175886412519, },
{ 0.133846676619191, 0.185671327770822, 0.0153437464348894, 0.051697470038382, 0.158154059782712, 0.224736371546096, 0.0177111022869098, 0.0609823033417664, 0.0338332363052014, 0.0524686355951415, 0.0418746569537345, 0.0236804133251533, },
{ 0.135573880939769, 0.187721629330938, 0.0143235045799871, 0.0539668492473604, 0.160765124290746, 0.230138662717394, 0.0169416198250673, 0.0587073250301374, 0.0447217155193285, 0.0559487249947933, 0.0261934977374976, 0.0149974657869812, },
{ 0.135604761192336, 0.188163338055629, 0.0140544257979823, 0.0538994954061271, 0.160713131470792, 0.23025777466366, 0.0156198152863124, 0.0593154249595106, 0.0429689190667507, 0.0530317152681479, 0.0281822363281461, 0.018188962504605, },
{ 0.137431657396317, 0.189950794890467, 0.0114842851977964, 0.0532929771092384, 0.159988377872525, 0.227839086972105, 0.016384561396605, 0.0648741878988119, 0.02240456853802, 0.0506123752180826, 0.0463326687539393, 0.0194044587560925, },
{ 0.139014635390751, 0.192290625845244, 0.0100875230995691, 0.0531795047910433, 0.161234859570418, 0.230353053765947, 0.0153505509702482, 0.0647276723957592, 0.0240706283538708, 0.0444197728600249, 0.0428101587316398, 0.0224610142254857, },
{ 0.14031549497854, 0.192517980230353, 0.0105565191005019, 0.0528496375479653, 0.161621265779318, 0.229930629013757, 0.014515930932456, 0.0663051141924717, 0.0220467394616492, 0.0397626265352203, 0.0429588640208823, 0.0266191982068856, },
{ 0.141749588531655, 0.197242847989145, 0.011394008685856, 0.0473276544419735, 0.164315538636145, 0.236429187658881, 0.0151487358603562, 0.0579705501740103, 0.0260040665217628, 0.0436283132101232, 0.0382068774892264, 0.0205826308008661, },
{ 0.141701537320127, 0.196654395980854, 0.00999409983746571, 0.0496334184246566, 0.163381436713562, 0.233406092677323, 0.0150862878783639, 0.0629788385633984, 0.0245608256390044, 0.0426763433063136, 0.0382126464947198, 0.0217140771642124, },
{ 0.142602909292857, 0.196556288221297, 0.00939370871277326, 0.050967412908909, 0.164765441441495, 0.234943220482203, 0.0145818595684667, 0.0616460202490931, 0.0263629053445382, 0.0420996481908274, 0.0359086642169143, 0.020171921370625, },
{ 0.142313388296463, 0.19504207737789, 0.00930628207424078, 0.0532129075359997, 0.163921250672789, 0.233050585232663, 0.0135276226249105, 0.0655143881841529, 0.0242018542208473, 0.0414564342408119, 0.037531863099016, 0.0209213464402171, },
{ 0.143352622204758, 0.194741905136527, 0.0091771864444625, 0.054857238208692, 0.165296097714987, 0.235274145135919, 0.0127955004815882, 0.0640200190234344, 0.0258961202037756, 0.041388874772261, 0.0343465226210403, 0.0188537680525549, },
{ 0.142917691618954, 0.192935429319254, 0.00859656480366462, 0.0572531731353187, 0.164649174654249, 0.234050813976574, 0.012399837005452, 0.0663222476753899, 0.0247732087078578, 0.0419293661877108, 0.035083178861538, 0.0190893140540374, },
};
        public static double[,] CastDistributionGoSF = new double[21, 12] {
{ 0.115650244344812, 0.168042533625808, 0.0283025623038381, 0.0514556190220028, 0.146061496019061, 0.203842456206031, 0.0308968517774745, 0.0601220906247558, 0.0431398989908168, 0.0810108914723751, 0.0397499668330768, 0.0317253887799479, },
{ 0.118447514892336, 0.171449406637305, 0.0271232833529461, 0.0520581990762275, 0.149195496969553, 0.208988018724955, 0.028695098398573, 0.0590178486691217, 0.0515897063050005, 0.0803072735766388, 0.021009402384987, 0.0321187510123569, },
{ 0.122144354520584, 0.175707638041105, 0.0258217671268228, 0.0517720749851539, 0.152677860859249, 0.214603997813496, 0.0272358791284283, 0.0580607335281775, 0.0584522581032307, 0.0730837675681897, 0.0122423569910582, 0.0281973113345053, },
{ 0.123747108475716, 0.176559274137224, 0.0231076345451001, 0.0520277893327889, 0.153730085513905, 0.216089845626757, 0.0261878849929314, 0.0579694016482648, 0.0627781964870378, 0.0727506742412963, 0.00664923949265741, 0.0284028655063218, },
{ 0.127069224355108, 0.178514547307873, 0.0229259755783858, 0.0527366813686269, 0.155888409473926, 0.220151019411351, 0.0233015493490474, 0.0582089051070489, 0.0600304157064685, 0.0623551566988737, 0.00952188231242797, 0.029296233330863, },
{ 0.129423566471704, 0.179995549838653, 0.0206777664548443, 0.0524607213046313, 0.156460733921068, 0.221114667926781, 0.021685791082129, 0.0599346697963076, 0.0491216666083634, 0.0607385375370536, 0.0192416431876689, 0.0291446858707951, },
{ 0.132263687763779, 0.183891171198995, 0.0189161017285473, 0.0510197773112068, 0.157790989589084, 0.222761010590177, 0.0214310223852371, 0.0615880864762305, 0.0318476074979759, 0.0565280083410433, 0.0342002752090728, 0.0277622619086508, },
{ 0.13398232519514, 0.186530030134435, 0.0169006959591304, 0.0513318512628979, 0.15876278213182, 0.224498706102108, 0.0204186890761979, 0.0629189433961069, 0.0270023751038555, 0.0540147778668979, 0.035464268085774, 0.0281745556856366, },
{ 0.135856709231735, 0.188691722240498, 0.0158294456572665, 0.0520405315150971, 0.160400779528893, 0.227759253167459, 0.0197512634947217, 0.0621417606188383, 0.0286859405683982, 0.0537699243398427, 0.0308885831912836, 0.0241840864459663, },
{ 0.137197152657825, 0.190282143043466, 0.0154458015235013, 0.0523288285402396, 0.161622964717032, 0.229293129943724, 0.0182415680580978, 0.0625666304117092, 0.0279395729779827, 0.0520848294131344, 0.0283514841504041, 0.0246458945628841, },
{ 0.137836208640055, 0.191726372969041, 0.0142255530432646, 0.0548032253385254, 0.16333697114498, 0.232385314292918, 0.0174624220462731, 0.061825702939473, 0.0260997453454669, 0.0560398574805189, 0.0284449703906366, 0.0158136563688465, },
{ 0.138209538130883, 0.192086253424113, 0.0132325428048778, 0.0551224357302585, 0.163358386463726, 0.232359692296879, 0.016635153731335, 0.0622131929840137, 0.026422313100318, 0.0554253113376282, 0.0282312434454019, 0.0167039365505659, },
{ 0.139667886333593, 0.193287642363648, 0.0122377812172039, 0.0544611706407409, 0.163735612263433, 0.233283375972991, 0.0162204546571202, 0.0632747592516715, 0.0232833905225914, 0.0529236135881185, 0.0293659071290022, 0.0182584060598864, },
{ 0.140682950544957, 0.195009075885296, 0.0106895315172376, 0.0549440671183814, 0.163769427621201, 0.233435473152314, 0.015735768956952, 0.0658368519591284, 0.0205503320575814, 0.0467462189552887, 0.0315012507938237, 0.0210990514378396, },
{ 0.142396435059556, 0.195603662300815, 0.0110167998335396, 0.0541646760204422, 0.16471253058128, 0.234764178965593, 0.0147779903527073, 0.0652232632697662, 0.0196658256051744, 0.0444040834490385, 0.0304019604759974, 0.0228685940860898, },
{ 0.143236388076635, 0.200057374274843, 0.0113085497434038, 0.0492164793471626, 0.166241704396265, 0.238933122172978, 0.0158585085833745, 0.0601931381312905, 0.0198641210249788, 0.0449984114664678, 0.029993116526001, 0.0200990862565999, },
{ 0.143682099520985, 0.199264047072549, 0.0101856272960027, 0.0517106053004284, 0.16631168758771, 0.238237215299709, 0.0150355605215597, 0.0626834479365364, 0.0214164988216512, 0.0447228194084584, 0.0268451034902876, 0.0199052877441226, },
{ 0.144007346258235, 0.198372629506311, 0.00961532434482283, 0.0535701395590911, 0.166660196330227, 0.238193304131896, 0.0143280545497889, 0.063619583039388, 0.0210345582691203, 0.0435280763062952, 0.0274572770761844, 0.0196135106286397, },
{ 0.144096508508238, 0.197844221800234, 0.00946377790810248, 0.0546244216420042, 0.166704439255054, 0.237568849012093, 0.0135731523566202, 0.0650167883227181, 0.0212864463761221, 0.0424091609701862, 0.0267132599382107, 0.0206989739104176, },
{ 0.144358114011707, 0.19681824663216, 0.00882806579915083, 0.0569581222315262, 0.166787669507395, 0.237866396183029, 0.0128783867690252, 0.066312336853419, 0.0218425116793282, 0.0426965348236462, 0.0262357940571511, 0.0184178214524622, },
{ 0.144611179299193, 0.196254655498945, 0.00852950770812163, 0.0579795897293885, 0.167093885210905, 0.237334911176874, 0.0123262670662514, 0.0672954768224406, 0.0213225958616223, 0.0418485450123482, 0.0260689361955118, 0.0193344504183984, },
};
        public static double[] BaseRotationDurations = new double[21] { 60.9843140621122, 57.6804661520254, 53.8814424138905, 51.1393210817053, 48.2847386735106, 45.8063113352657, 43.5584012664434, 41.7355816430979, 40.0245804415583, 38.640376260506, 37.0802851734739, 36.0414722113137, 34.8958643255297, 33.8909128745648, 32.9439122587898, 32.3013744604465, 31.7741449944258, 31.4225200356401, 30.9967195510511, 30.6286214250675, 30.2792931929605, };
        public static double[] BaseRotationDurationsGoSF = new double[21] { 59.4123876211181, 55.9967696302865, 52.5030276723758, 49.9633541776937, 47.4150914138485, 45.2141065971013, 43.1380643637714, 41.2432896805737, 39.6109297086389, 38.1137852582799, 36.7878082345193, 35.766238549286, 34.6596357664439, 33.6061617556839, 32.7093468103761, 32.0136547067092, 31.5035697531453, 31.0963459710142, 30.7181793387818, 30.3078142353878, 29.9861391490683, };
        public static double[] BaseNGUptimes = new double[21] { 0.481290630408313, 0.492583031108725, 0.543399357514134, 0.571123718794188, 0.588826161900918, 0.641467814707882, 0.660427701358296, 0.700583427330473, 0.7192513289768, 0.747522907211878, 0.773545964125873, 0.795090405511907, 0.815726284498753, 0.827327502884682, 0.850684763814704, 0.814341974139073, 0.845099596370946, 0.807902129876486, 0.845850135491611, 0.800668541681599, 0.837211613911826, };
        public static double[] BaseNGUptimesGoSF = new double[21] { 0.493956098097267, 0.507922884247247, 0.555063831025165, 0.579627496002681, 0.592515188103862, 0.61934090650695, 0.631028716793038, 0.675965274253685, 0.693679969051689, 0.727258078469617, 0.727183255273436, 0.744053960919235, 0.762434951059135, 0.790365373017798, 0.797837744065719, 0.782295638535545, 0.791355683169727, 0.788687228124244, 0.795101384158792, 0.796901283628598, 0.788718711461284, };
        public static double[] BasePercentMoonfiresExtended = new double[21] { 0.63160427759236, 0.842121382082492, 0.901611916236267, 0.891054061919397, 0.81221552184377, 0.675941211951422, 0.589372586466139, 0.665364405228774, 0.764038048454476, 0.865251733058155, 0.919912959752658, 0.926279906433125, 0.913623808442906, 0.913290514620055, 0.917019528822264, 0.925249154553215, 0.974666482874029, 0.965224030075393, 0.979020748538171, 0.969220496240806, 0.98419784126996, };

        #endregion

        #region 4T12

        public static double[,] T12CastDistribution = new double[21, 12] {
{ 0.100186752515878, 0.149517558954285, 0.0246063895659608, 0.0440707936999647, 0.15171134277859, 0.211152269048384, 0.0333008905922313, 0.0645752913201018, 0.045275522873373, 0.0773121389844193, 0.0651638328889292, 0.0331272167778829, },
{ 0.101314932382742, 0.150508065170923, 0.023266612214738, 0.0467542999267583, 0.153100783917708, 0.213677971027106, 0.0308810458771671, 0.0648558149274644, 0.0415220131008073, 0.0755339615145239, 0.0653123041518679, 0.033272195788195, },
{ 0.106375870160074, 0.156707740045947, 0.0214901001898645, 0.0434881933687655, 0.15760910922148, 0.220274627518975, 0.0300357340286438, 0.0647794043196541, 0.037076255863695, 0.0656266882001609, 0.0625433547096028, 0.033992922373137, },
{ 0.107708532724, 0.157642890992046, 0.0195496975663707, 0.0459432678013472, 0.158365689303728, 0.222544448209337, 0.0276597628910591, 0.0654405312430409, 0.0346367023935111, 0.066159214085635, 0.0619916157224942, 0.032357647067431, },
{ 0.111090024543055, 0.163475328572898, 0.0194332671386069, 0.0438465262586188, 0.162830051095034, 0.228925898665363, 0.0259874854068126, 0.0642663028378816, 0.0327803523337559, 0.0586131079236199, 0.057292205407109, 0.031459449817245, },
{ 0.112503067839957, 0.165504940452278, 0.0166041478601869, 0.0453106959308846, 0.16340123860612, 0.230645619714916, 0.0247064783502569, 0.0657302105697875, 0.0312714450095486, 0.0584982610653789, 0.0559274603795322, 0.0298964342211538, },
{ 0.115496441881894, 0.169237118841863, 0.0173323485408026, 0.043800280417714, 0.167612472384341, 0.237133731299227, 0.0226900639788622, 0.0634675276417811, 0.0304313952903669, 0.0532588600308107, 0.0511836122163905, 0.0283561474759467, },
{ 0.116115105503771, 0.169475205747251, 0.0148624125508452, 0.0458974088317041, 0.167140112232501, 0.237210575318484, 0.0216619036471733, 0.0661355351376069, 0.030593944700675, 0.0540705607223638, 0.0497661206170256, 0.0270711149905993, },
{ 0.118020626918444, 0.171809797179158, 0.0156154077786844, 0.046694690523371, 0.171014492753623, 0.243985555814586, 0.0200848972296693, 0.06153677099118, 0.0415817937211019, 0.0567134621362241, 0.0340370866845398, 0.0189054182694176, },
{ 0.11870288726532, 0.170718246062134, 0.014627586631854, 0.0488341353850392, 0.171218446021296, 0.244453398641244, 0.0185734877106669, 0.0619241508380766, 0.0480098928436368, 0.0572994759982553, 0.0273835313392189, 0.0182547612632586, },
{ 0.121418500864752, 0.176441542915998, 0.0112391067088967, 0.0458841374117262, 0.172371946423463, 0.244793201642262, 0.0194814671158108, 0.0670665589114984, 0.021816212982147, 0.0448297140374235, 0.0488095651100746, 0.0258480458759477, },
{ 0.12134045896948, 0.176586102975125, 0.0110002808587156, 0.0462288925068364, 0.172359094538626, 0.24528742244598, 0.0181443772028619, 0.0673362443934215, 0.0217120175319131, 0.0457217645160725, 0.0490891305416617, 0.0251942135193066, },
{ 0.122765072277132, 0.177142587043289, 0.00930185795909741, 0.0472394787134484, 0.172427525011072, 0.244253596608884, 0.0178198189799559, 0.0713691167748814, 0.0201453107603909, 0.0414712155031039, 0.0480247947660443, 0.0280396256027006, },
{ 0.123255854667686, 0.177854891564705, 0.00894644894901666, 0.0486359047380062, 0.174179354454683, 0.248221463816793, 0.0165449569192588, 0.0688897153185577, 0.0251333059939553, 0.0440006599648054, 0.0416023987916914, 0.0227350448208413, },
{ 0.12396635656966, 0.177634087653451, 0.00920458288054503, 0.0492372737981023, 0.174390346739049, 0.248017781652885, 0.0156393476878495, 0.0708527375991693, 0.0232825733119283, 0.0430972788152353, 0.0414413067032822, 0.0232363265888428, },
{ 0.12513858041781, 0.182892394080923, 0.00977051123978272, 0.0435085906479574, 0.177278369104543, 0.254523083699896, 0.0163646337421962, 0.0623921666299589, 0.0252950172800981, 0.0429498434602187, 0.038770817938368, 0.0211159917582474, },
{ 0.124890739236109, 0.181749225964407, 0.00927603015542097, 0.0458410826870665, 0.176394036379298, 0.252424131814945, 0.0156715651680034, 0.0667548650845138, 0.0237491885735561, 0.0436159271826184, 0.0389464697988402, 0.0206867379552224, },
{ 0.125597023233963, 0.182125494406538, 0.00861549333728034, 0.0463394550271809, 0.177598434614375, 0.253060688255389, 0.0151887741343395, 0.0666662791817481, 0.0246115722571354, 0.0403775653046538, 0.0377926066474574, 0.022026613599939, },
{ 0.12561509480255, 0.180253483653815, 0.00840729371115708, 0.0486845086963934, 0.176999370685742, 0.251813600704864, 0.014348345035799, 0.0697069524342054, 0.0245588911961852, 0.0410692950267135, 0.0369953396267432, 0.0215478244258322, },
{ 0.126140414584724, 0.180697055955519, 0.00800863396320173, 0.0497898248719777, 0.17840577476919, 0.253736347177378, 0.0138210503221809, 0.0689102468388124, 0.0238091967396078, 0.0401701867068661, 0.0364361290189, 0.0200751390516417, },
{ 0.12576632648161, 0.178815386092999, 0.00774478684989567, 0.0520274200619335, 0.177408404863593, 0.25229733351303, 0.0130845768832171, 0.0720406920814027, 0.0223407164024656, 0.0398858652799014, 0.0372322359421933, 0.0213562555477584, },
};
        public static double[,] T12CastDistributionGoSF = new double[21, 12] {
{ 0.104721664463922, 0.156062738272303, 0.0255982148358971, 0.0471008257661263, 0.159249914861909, 0.221511275769915, 0.0335432859661184, 0.0634404350094735, 0.0518690766888368, 0.0776507720941761, 0.0248793093121653, 0.0343724869591574, },
{ 0.105824374449703, 0.157334877092427, 0.0248460551874268, 0.0478278690155473, 0.160900033236266, 0.224346698026292, 0.0309166479089094, 0.062528125822364, 0.0615772329675383, 0.0773524346992153, 0.0120619443717299, 0.0344837072225814, },
{ 0.109180618404332, 0.159896303493823, 0.0241664022757064, 0.047937039039117, 0.163960131980215, 0.230182288250205, 0.0283709612880033, 0.0619048564697185, 0.0631883188659747, 0.0670374551167352, 0.0104343866596218, 0.0337412381565489, },
{ 0.111090452466572, 0.16093177999107, 0.0214892159527931, 0.0478760957102481, 0.164665516981797, 0.230822948060568, 0.0271528146542408, 0.063318275998552, 0.0539203142868456, 0.0668188207137969, 0.0187876286646205, 0.0331261365188963, },
{ 0.114607241219997, 0.164343615272623, 0.0195853598440135, 0.047299335534046, 0.166554302134649, 0.233723046650346, 0.0254809543192005, 0.0659686941771502, 0.0367060493732951, 0.0600871303549311, 0.0341238365474744, 0.0315204345722734, },
{ 0.116340377026568, 0.169109569903858, 0.0172468264566449, 0.0455647735617347, 0.167793889707186, 0.23630344094608, 0.0247840186809464, 0.0668756533807701, 0.0273851269916787, 0.0567937187543791, 0.0394410100085876, 0.0323615945815666, },
{ 0.118303577644572, 0.171918186696951, 0.0168499684989689, 0.0458590300016324, 0.170516122282083, 0.241222444222753, 0.0232390220796303, 0.066033613741796, 0.0284174972016396, 0.0549815323464734, 0.0340907327825416, 0.0285682725009591, },
{ 0.11935042481199, 0.174149541206193, 0.0153904235705736, 0.0465431719007176, 0.171851087097294, 0.243535041276449, 0.0220031933740827, 0.0664381831474548, 0.0287192836135491, 0.0532249529459878, 0.0300524969956539, 0.0287422000600542, },
{ 0.120667892100264, 0.175709689238661, 0.0143790777226641, 0.0471663849400985, 0.173464497833938, 0.245901047776515, 0.0209737578629423, 0.066067866852637, 0.029505485200888, 0.0515740047970491, 0.0289835366998888, 0.0256067589744537, },
{ 0.120714017526509, 0.175295646348317, 0.0141291837731321, 0.0495431868210073, 0.174357725332947, 0.247392986942235, 0.0192952340753429, 0.0651777804499174, 0.0259627678240576, 0.059859704488622, 0.0313578995673588, 0.0169138668505535, },
{ 0.123481471473452, 0.179313174360391, 0.0114883643075879, 0.0479916112898979, 0.17541093935385, 0.248665631604115, 0.0197571829944172, 0.0688250502967543, 0.0180150685064158, 0.0470780156495187, 0.0353978250775029, 0.0245756650860982, },
{ 0.123679142092287, 0.179503268527088, 0.0108296518964886, 0.0481483981796395, 0.175285539690227, 0.248913394871493, 0.0188215315551647, 0.0691589533122926, 0.0181861235870223, 0.047177057781643, 0.0356002121170057, 0.0246967263896487, },
{ 0.124740529192503, 0.180402280084343, 0.0102379837486142, 0.0486107936793994, 0.176450428417989, 0.250934597937531, 0.0179074498166891, 0.0691945846793957, 0.020491714540229, 0.0458033364922193, 0.030375717884726, 0.0248505835263622, },
{ 0.12490301463887, 0.180440718308129, 0.00936441999329287, 0.0504624825081178, 0.176778762489983, 0.251576224480297, 0.016731478182568, 0.0712511389341658, 0.0204512503817122, 0.0457038491794982, 0.0303506876320082, 0.0219859732713576, },
{ 0.125988081884927, 0.181368764689214, 0.00964945725128269, 0.0496697730182311, 0.178049416091956, 0.253923144640663, 0.0160991705672081, 0.0694532779392074, 0.0205095392698604, 0.0447275679275204, 0.0281793478289785, 0.0223824588909519, },
{ 0.127038954920471, 0.18553796947314, 0.0100123975631982, 0.044987423116361, 0.179931352874914, 0.258008084091506, 0.0170101739897331, 0.0642239215098129, 0.0203329002472992, 0.0435707916345384, 0.0281716487862451, 0.0211743817927806, },
{ 0.126923312141149, 0.184876496993061, 0.0092400457313945, 0.0469148070932831, 0.17969991769243, 0.257065681278512, 0.0158886525472578, 0.0671609252175482, 0.0203723935004855, 0.0430677256595831, 0.0277411661586868, 0.0210488759866089, },
{ 0.127070318055218, 0.184133133048371, 0.00865357901956397, 0.0482995515952165, 0.179832468548081, 0.256654532938199, 0.0152526344327422, 0.0684920492040665, 0.0205733941480182, 0.0411780976459333, 0.0277099945035826, 0.022150246861009, },
{ 0.127320896573347, 0.183628703356602, 0.00826167151765138, 0.0494348498562056, 0.1801650881631, 0.255742696991475, 0.0145085669345099, 0.0701883954868693, 0.0208221440558859, 0.0404593511960943, 0.0267783032058465, 0.0226893326624138, },
{ 0.127326173948583, 0.182867098757735, 0.00799530408766228, 0.051300619814799, 0.180145648807278, 0.256300027810437, 0.0136658601508687, 0.0715461855841234, 0.0199625444150781, 0.0407095437790176, 0.027989612191907, 0.0201913806525107, },
{ 0.127650986544623, 0.181749670862864, 0.00794889056467123, 0.052713370913234, 0.180436974692797, 0.256311102250653, 0.012889077655176, 0.0722866050094335, 0.0200131751163657, 0.0401263193174365, 0.0267291136363417, 0.0211447134364036, },
};
        public static double[] T12RotationDurations = new double[21] { 56.3468388913045, 53.2746961329652, 49.7949306763283, 47.1760059668136, 44.5460100772947, 42.2241857644267, 40.1166491809063, 38.478755168594, 36.9065573338981, 35.6450567743054, 34.2324118729096, 33.2608087397314, 32.1540076678211, 31.4199445826635, 30.5135044111559, 29.9405132084, 29.448723452036, 29.1373405765765, 28.7333940915328, 28.3880059704571, 28.0701888144929, };
        public static double[] T12RotationDurationsGoSF = new double[21] { 54.6391525062114, 51.8027937934207, 48.731165634607, 46.3886840730937, 43.9284479999999, 41.6678993037155, 39.6014732709029, 37.9251423617821, 36.4628157048749, 35.3704455207014, 33.9012049149015, 32.9718797173372, 31.9294759053991, 31.1013754526631, 30.236322500061, 29.5903598665483, 29.1316335289279, 28.7988536304349, 28.4177634523267, 28.0715492192493, 27.7607986974638, };
        public static double[] T12NGUptimes = new double[21] { 0.520030111849995, 0.533364550994795, 0.582556722835894, 0.617135980212016, 0.638318667349132, 0.693721084428252, 0.718689153574358, 0.755522287918793, 0.773121275469425, 0.799491859213164, 0.815223008878392, 0.835324762925575, 0.87089347136288, 0.825866202193914, 0.858716548686413, 0.812590381889012, 0.853584760920887, 0.80962397567975, 0.853026441344815, 0.801272541455491, 0.8531662432301, };
        public static double[] T12NGUptimesGoSF = new double[21] { 0.534940645772335, 0.548360142010587, 0.584274994145852, 0.60046501063981, 0.61897175938688, 0.669153090536873, 0.696682026240332, 0.733668458980155, 0.755230617287579, 0.740781679275761, 0.77728858814021, 0.790968640795296, 0.807454997569507, 0.7973982791113, 0.809047199056193, 0.795990902691181, 0.812786786370858, 0.804240895583765, 0.813414909068397, 0.806071210155192, 0.799440839703023, };
        public static double[] T12PercentMoonfiresExtended = new double[21] { 0.842813903557706, 0.89224839731648, 0.843293812865469, 0.711396216816521, 0.575421144527958, 0.642759637033778, 0.78028774092092, 0.890093821809383, 0.911676203646655, 0.893248483660332, 0.90357401788804, 0.905762362573285, 0.967837020984039, 0.981717052631716, 0.984746198830531, 0.992216514619946, 0.994495052631627, 0.992644842105325, 0.995221216374313, 0.992078120300821, 0.99644419883044, };

        #endregion

        #region 4T13

        public static double[,] T13CastDistribution = new double[21, 12] {
{ 0.10389095343858, 0.154881434691775, 0.0415930593727712, 0.0485839698216524, 0.133133591365032, 0.184049910128387, 0.0520931003988294, 0.0598906813341253, 0.0498000242649849, 0.0802720413374355, 0.0611416254594393, 0.0306696083869886, },
{ 0.104168747141166, 0.154606083249241, 0.0414090079017294, 0.0514020943249311, 0.135058294022549, 0.189175363923001, 0.0472522023932149, 0.0606034365365075, 0.0463895765608796, 0.0784980778161477, 0.0606008177574173, 0.0308362983732144, },
{ 0.109625046582803, 0.16481197149172, 0.0371631551494689, 0.0473686032938172, 0.139783666065379, 0.194766314416091, 0.0469719083367445, 0.0604291799893087, 0.0394674326721382, 0.0682381731857293, 0.0600726446651959, 0.0313019041516048, },
{ 0.111730895984867, 0.162339737462337, 0.0359826107780888, 0.0503616513183764, 0.140222276034466, 0.197993810333241, 0.0455972222812269, 0.0607768379516669, 0.0367114362503503, 0.072969716766652, 0.0598500715372411, 0.0254637333014866, },
{ 0.116664411405671, 0.169196685630053, 0.0337596736301449, 0.0476397494069143, 0.145041544786604, 0.20320424603266, 0.0433663657092844, 0.0606435843102932, 0.036440507174609, 0.0607469424419006, 0.0538013623695787, 0.0294949271022871, },
{ 0.11681557249214, 0.171367434152238, 0.0323913969040193, 0.0494251688339066, 0.146645696714366, 0.20496559965802, 0.0405993684129534, 0.0617491394372637, 0.0335592651668774, 0.0606979721911202, 0.0536344143289398, 0.0281489717081554, },
{ 0.119240051335667, 0.176669945520281, 0.0324940868960966, 0.0478969015295898, 0.151284931321827, 0.209610463996773, 0.0388006928808436, 0.0596962811509265, 0.0331900338180512, 0.0544561946610853, 0.0489632888659462, 0.0276971280229121, },
{ 0.120342966711265, 0.176300132321222, 0.0305345429970283, 0.0500517915998657, 0.151344765732488, 0.210946159894985, 0.0365870283095832, 0.0621436037900503, 0.0316107713895623, 0.0542388055930717, 0.0487073943035556, 0.0271920373573231, },
{ 0.123041059737257, 0.180471019037985, 0.0289813895407306, 0.0492431992493129, 0.154179013521188, 0.216819784153021, 0.0355584524187172, 0.0597710927068552, 0.0335366199999438, 0.0528252579540331, 0.0424308748175227, 0.0231422368634334, },
{ 0.123591377926822, 0.180075837407468, 0.0290353393436657, 0.0510568348649542, 0.155145805645262, 0.216700041811962, 0.0318662788292992, 0.0610719406106645, 0.0330004603342102, 0.0523116817644819, 0.0424986204004554, 0.023645781060755, },
{ 0.124949162139717, 0.180214894793224, 0.0305420891965194, 0.0540408446219746, 0.158822937678416, 0.223498482317756, 0.0282145288289074, 0.0582716242693516, 0.0470303975697056, 0.0571541585995583, 0.0236758202505262, 0.0135850597343436, },
{ 0.126066534429017, 0.181912609804477, 0.0273925758005101, 0.0534773590252196, 0.158303428733352, 0.222731085293284, 0.0288729951827713, 0.0595216775290451, 0.0435299518277132, 0.0533654859733636, 0.0273082459620289, 0.0175180504392179, },
{ 0.128247156923583, 0.183767496068736, 0.0243021034205885, 0.0525297986436863, 0.157630098687503, 0.221852931821771, 0.0281823216585372, 0.0652462961603733, 0.0209304472187562, 0.0499819840258362, 0.0475711797794044, 0.0197581855912242, },
{ 0.130168535055268, 0.185924797645125, 0.0238423463660808, 0.0527703790883699, 0.158910809073779, 0.22375529245789, 0.0263962377994751, 0.064953485787979, 0.0239410934516409, 0.0444014049997531, 0.0426979649113755, 0.0222376533632634, },
{ 0.131451121292148, 0.186106490886074, 0.0242327020946829, 0.0522193098056652, 0.159365569076388, 0.223214494799452, 0.0258817842384283, 0.066553280569345, 0.0219145776933004, 0.0395129109579352, 0.0428578043609815, 0.0266899542255995, },
{ 0.133207045114796, 0.189881590951548, 0.025452846802939, 0.0468838481331758, 0.162080560613539, 0.229340686482445, 0.0268251889935126, 0.0583241774200761, 0.0258033765364277, 0.0438792180062997, 0.0381986512075566, 0.0201228097376847, },
{ 0.133408929207573, 0.189702001979737, 0.023638064557111, 0.0491387785328958, 0.160965347830961, 0.226523179869527, 0.0263737935541657, 0.0634343240846703, 0.0243737453650317, 0.042741571431729, 0.0382444499359702, 0.0214558136506276, },
{ 0.135205997530324, 0.189270561645339, 0.0227209240780545, 0.0506150606570213, 0.162466379580433, 0.228323524636438, 0.0253698432346307, 0.0619423056966906, 0.0257501753946939, 0.0420581828762148, 0.036292526075841, 0.0199845185943201, },
{ 0.135034828582221, 0.188743962143989, 0.0214050465084303, 0.052778319660515, 0.16145898328238, 0.226184303336525, 0.0248785231271416, 0.0656977306943727, 0.0237764577348838, 0.0415625879525321, 0.0378791421144149, 0.0206001148625943, },
{ 0.135749043891999, 0.188247883802661, 0.0220819204998627, 0.0545952247682438, 0.162987393280503, 0.228533263287696, 0.0234076372008128, 0.0641813756690762, 0.0260886771791612, 0.0420166165664247, 0.0340194516204118, 0.0180915122331483, },
{ 0.135085250192821, 0.187091244716585, 0.0214152189537392, 0.0570476464670998, 0.16216107123897, 0.227015165716687, 0.0228918330812144, 0.0665858854572302, 0.0246635915194805, 0.0422527444900197, 0.0350529489488608, 0.0187373992172924, },
};
        public static double[,] T13CastDistributionGoSF = new double[21, 12] {
{ 0.108029892266625, 0.159929640109268, 0.0420275545445835, 0.0509636446727705, 0.138157452625626, 0.190334155140625, 0.0543727773663005, 0.0605603323745883, 0.0412437855012327, 0.0806791240117527, 0.0420786344776144, 0.0316230069090138, },
{ 0.11004546015381, 0.163182865726325, 0.0409753341534663, 0.0512722591179149, 0.141347404160052, 0.198756436715186, 0.0496935748127659, 0.0596496230508748, 0.0498181163823602, 0.0797921131611495, 0.023463764026639, 0.0320030485394565, },
{ 0.112858138819399, 0.168067031924407, 0.0395341697564565, 0.0509931741690572, 0.14623440488711, 0.204389824435452, 0.0476803334146457, 0.0585714035965138, 0.0569501114873194, 0.0724795835323254, 0.0141548947483566, 0.0280869292289574, },
{ 0.11322430027783, 0.168268337176361, 0.0392082932327758, 0.051363408839971, 0.148177369918293, 0.206586743214667, 0.0452569467720006, 0.0583212190832478, 0.0627535097439234, 0.0719456727281665, 0.00652826708086503, 0.0283659319318988, },
{ 0.116399813581015, 0.170927071754944, 0.0374574774079033, 0.0518052815075581, 0.150896171967828, 0.211443861037356, 0.0418078926118134, 0.0585683511459003, 0.0605933944517499, 0.0620179280098948, 0.00883838886463555, 0.0292443676594023, },
{ 0.119124444293036, 0.172356998597272, 0.0356464930434447, 0.0516824402942409, 0.152376420991295, 0.212231204885446, 0.0384597896149631, 0.0603830342409138, 0.0493567703919814, 0.0603599428873856, 0.0187893773502045, 0.0292330834098175, },
{ 0.121597561841485, 0.176290457574278, 0.0351928182762916, 0.0503382536140988, 0.154438042329978, 0.213295838649503, 0.0369123256959789, 0.0621581694016701, 0.0314782680726456, 0.0560910124640419, 0.0343975444137726, 0.0278097076662572, },
{ 0.124042797170178, 0.17923002494059, 0.0322088443492859, 0.0504561060321769, 0.155478026226491, 0.215355797373989, 0.0354565577783334, 0.0635453195946471, 0.0261345657248635, 0.0536623218491756, 0.0361944536077709, 0.0282351853524986, },
{ 0.125363005297536, 0.182385985467614, 0.0301854944958844, 0.0513888050396029, 0.15742945666408, 0.219737426271633, 0.0338426897956537, 0.0625697036008486, 0.0280323690541229, 0.0537347217284431, 0.0313968992906723, 0.023933443293908, },
{ 0.126496617116164, 0.184228775012692, 0.0300438469899414, 0.0518715022194856, 0.158778574921022, 0.221314437732785, 0.0318802203055919, 0.0628307827874292, 0.0276115897753181, 0.0517771426287768, 0.0285411242532024, 0.0246253862575926, },
{ 0.126980289399016, 0.184724956455819, 0.0294080888025474, 0.054807677993366, 0.161003086204264, 0.22523636414833, 0.0298750065923576, 0.0618543745038421, 0.0269274005154098, 0.057499667929822, 0.0275303776414004, 0.0141527098138249, },
{ 0.128059818624133, 0.18579960124606, 0.0272560629227078, 0.0546984077508028, 0.160916903515195, 0.225488482798434, 0.0290502942700793, 0.0623515277882805, 0.027025977103925, 0.0556770793948236, 0.0275109325345959, 0.0161649120509638, },
{ 0.130175947654519, 0.187104016555068, 0.0252211400585777, 0.0538466851988689, 0.161412582283412, 0.226733534168688, 0.0282402331360092, 0.0636679144442725, 0.0232099315281436, 0.0521144496784636, 0.0294962790806838, 0.018777286213294, },
{ 0.131689353389481, 0.188391147480966, 0.0242891890165377, 0.0546494406112827, 0.161521056324305, 0.226844753459374, 0.0268986497476698, 0.0660599934401131, 0.0209056401606797, 0.0465192606760549, 0.0311511957299538, 0.0210803199635824, },
{ 0.133288287412872, 0.189209723261787, 0.0243224348762366, 0.0538783710756659, 0.162542939202288, 0.228116213320958, 0.0259957122267892, 0.0654973624729545, 0.019583486650878, 0.0441356965226346, 0.0304867396742714, 0.0229430333026645, },
{ 0.134311263343039, 0.192656046824692, 0.0259044934803756, 0.0486206187829379, 0.164112730872657, 0.232134186185144, 0.0270001048118464, 0.0604898438958563, 0.0193595873361087, 0.0448990817499648, 0.0305094592691339, 0.0200025834482442, },
{ 0.135154234615807, 0.192042993722384, 0.0244997765649035, 0.051269021792997, 0.164271233805484, 0.231741186791036, 0.0255486788148411, 0.0628584659160602, 0.021173053878297, 0.0449126178090601, 0.0269970574588934, 0.0195316788302365, },
{ 0.136494430700859, 0.191270996592609, 0.0226646129335838, 0.0533063575257921, 0.164511975717745, 0.231420202751593, 0.0252255690775875, 0.0637249071867398, 0.0208702316290672, 0.0434199389016086, 0.0275774593562765, 0.0195133176265385, },
{ 0.136977018053789, 0.19120841010909, 0.0220804859804647, 0.0543287219516599, 0.16442495562724, 0.230595179369125, 0.0244141868701768, 0.0651577308552295, 0.0209600838608896, 0.0423071699287295, 0.0269203813236221, 0.020625676069984, },
{ 0.136820376763093, 0.190370984518444, 0.0219842119279839, 0.0565767721382235, 0.16442910190894, 0.231165010979293, 0.0230684736019617, 0.0665731039992764, 0.0217968855992885, 0.0428796398189045, 0.0261816683499907, 0.0181537703946013, },
{ 0.137163235953678, 0.190076547869541, 0.0215266807100076, 0.0577070858862065, 0.164671275366751, 0.230583652937919, 0.0225604739568613, 0.067309963840821, 0.0213102916672727, 0.0422583626208664, 0.0260988573636543, 0.0187335718264218, },
};
        public static double[] T13RotationDurations = new double[21] { 60.827347652174, 57.4666813842059, 53.723034841897, 51.0019408380591, 48.1827816686793, 45.7512498117874, 43.503585481977, 41.6722788991364, 39.9597223941277, 38.5868946263233, 37.0358898427757, 35.977620691193, 34.8410441290414, 33.8560704945781, 32.9118839048934, 32.2972031148729, 31.79739120189, 31.47174158624, 31.0448849689441, 30.6927504097256, 30.369560837681, };
        public static double[] T13RotationDurationsGoSF = new double[21] { 59.3051102608693, 55.8439214581486, 52.4106792094862, 49.8613916635163, 47.3150273945251, 45.1682529731398, 43.1080406118713, 41.2074608379446, 39.5567627317899, 38.0462978692473, 36.7575524339043, 35.7052293034128, 34.6109731702899, 33.574746609912, 32.6922691942331, 32.0104426867794, 31.5268777411478, 31.1426776169213, 30.7669438243434, 30.3821200698625, 30.072216668737, };
        public static double[] T13NGUptimes = new double[21] { 0.480324005126451, 0.500261678673554, 0.543962006540707, 0.569505544268304, 0.591609487287882, 0.640375755584304, 0.660487254203638, 0.703429602972385, 0.719709553295192, 0.747745351321994, 0.772075614159792, 0.796712919863, 0.816069085579216, 0.827118920231637, 0.852025261710022, 0.81473665797113, 0.844426159577159, 0.807330437841445, 0.845859809095371, 0.800402925169814, 0.836869735088374, };
        public static double[] T13NGUptimesGoSF = new double[21] { 0.492382559320146, 0.513914930707551, 0.554900425316441, 0.57906218932223, 0.594888784039002, 0.621294294745815, 0.630448238984366, 0.677102988000344, 0.693499274978089, 0.728821613932851, 0.722602343011552, 0.745916782535359, 0.764585360129581, 0.790621442464235, 0.798052271790911, 0.782103102094585, 0.789379082324289, 0.787137553547326, 0.79467328777553, 0.796177514972186, 0.788440800487147, };
        public static double[] T13PercentMoonfiresExtended = new double[21] { 0.609622139129011, 0.815334273739039, 0.881029720845906, 0.887363949088331, 0.810881042606462, 0.669866760430459, 0.584812068602862, 0.659885031991765, 0.761746828345391, 0.865190141726896, 0.919137833505668, 0.923864011696263, 0.905848621160937, 0.903202432748688, 0.907760382623404, 0.910139654135469, 0.973351609022728, 0.959543238095449, 0.977416584795485, 0.965109804511502, 0.978681811194807, };

        #endregion

        public static string[] CastDistributionSpells = new string[12] { "Starfire", "Wrath", "Starsurge", "Shooting Stars", "Starfire (Eclipse)", "Wrath (Eclipse)", "Starsurge (Eclipse)", "Shooting Stars (Eclipse)", "Moonfire", "Insect Swarm", "Moonfire (Eclipse)", "Insect Swarm (Eclipse)" };

        #endregion

        // A list of all the damage spells
        private Spell[] _spellData = null;
        private Spell[] SpellData
        {
            get
            {
                if (_spellData == null)
                {
                    _spellData = new Spell[] {
                        new Spell()
                        {
                            Name = "SF",
                            BaseDamage = (1214f + 1514f) / 2.0f,
                            SpellDamageModifier = 1.231f,
                            BaseCastTime = 3.2f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Arcane,
                            BaseEnergy = 20
                        },
                        new Spell()
                        {
                            Name = "MF",
                            BaseDamage = (197.0f + 239.0f) / 2.0f,
                            SpellDamageModifier = 0.18f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = new DotEffect()
                                {
                                    BaseDuration = 12.0f,
                                    BaseTickLength = 2.0f,
                                    TickDamage = 93.0f,
                                    SpellDamageModifierPerTick = 0.18f
                                },
                            School = SpellSchool.Arcane
                        },
                        new Spell()
                        {
                            Name = "W",
                            BaseDamage = (831f + 937f) / 2.0f,
                            SpellDamageModifier = 3.075f/3.5f,
                            BaseCastTime = 2.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = null,
                            School = SpellSchool.Nature,
                            BaseEnergy = 40/3f
                        },
                        new Spell()
                        {
                            Name = "IS",
                            BaseDamage = 0.0f,
                            SpellDamageModifier = 0.0f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.08f),
                            DotEffect = new DotEffect()
                            {
                                BaseDuration = 12.0f,
                                BaseTickLength = 2.0f,
                                TickDamage = 136.0f,
                                SpellDamageModifierPerTick = 0.13f
                            },
                            School = SpellSchool.Nature
                        },
                        new Spell()
                        {
                            Name = "SS",
                            BaseDamage = (1018 + 1404) / 2f,
                            SpellDamageModifier = 1.228f,
                            BaseCastTime = 2.0f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Spellstorm,
                            BaseEnergy = 15
                        }
                    };
                }
                return _spellData;
            }
        }
        public Spell Starfire
        {
            get
            {
                return SpellData[0];
            }
        }
        public Spell Moonfire
        {
            get
            {
                return SpellData[1];
            }
        }
        public Spell Wrath
        {
            get
            {
                return SpellData[2];
            }
        }
        public Spell InsectSwarm
        {
            get
            {
                return SpellData[3];
            }
        }
        public Spell Starsurge
        {
            get
            {
                return SpellData[4];
            }
        }
        private void ResetSpellList()
        {
            // Since the property rebuilding the array is based on this variable being null, this effectively forces a refresh
            _spellData = null;
        }

        // The spell rotations themselves.
        private SpellRotation[] rotations = null;
        public SpellRotation[] Rotations
        {
            get
            {
                if (rotations == null)
                {
                    rotations = new SpellRotation[3]
                    {
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Unused" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Lunar Only", StarfallCastMode = StarfallMode.LunarOnly } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall On CD", StarfallCastMode = StarfallMode.OnCooldown } },
                    };
                    //RecreateRotations();
                }
                return rotations;
            }
        }

        // Results data from the calculations, which will be sent to the UI.
        RotationData[] cachedResults = new RotationData[3];

        public void Solve(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            CalculationOptionsMoonkin calcOpts = character.CalculationOptions as CalculationOptionsMoonkin;
            DruidTalents talents = character.DruidTalents;
            procEffects = new List<ProcEffect>();
            UpdateSpells(character, ref calcs);

            float trinketDPS = 0.0f;
            float baseSpellPower = calcs.SpellPower;
            float baseHit = 1 - Math.Max(0, calcs.SpellHitCap - calcs.SpellHit);
            float baseCrit = calcs.SpellCrit;
            float baseHaste = calcs.SpellHaste;
            float baseMastery = calcs.Mastery;
            float sub35PercentTime = (float)(character.BossOptions.Under20Perc + character.BossOptions.Under35Perc);

            BuildProcList(calcs);

            float maxDamageDone = 0.0f, maxBurstDamageDone = 0.0f;
            SpellRotation maxBurstRotation = Rotations[0];
            SpellRotation maxRotation = Rotations[0];

            float manaPool = GetEffectiveManaPool(character, calcOpts, calcs);

            float manaGained = manaPool - calcs.BasicStats.Mana;

            float oldArcaneMultiplier = calcs.BasicStats.BonusArcaneDamageMultiplier;
            float oldNatureMultiplier = calcs.BasicStats.BonusNatureDamageMultiplier;

            int rotationIndex = 1;
            foreach (SpellRotation rot in Rotations)
            {
                if (rot.RotationData.Name == "None") continue;
                rot.Solver = this;

                // Reset variables modified in the pre-loop to base values
                float currentSpellPower = baseSpellPower;
                float currentCrit = baseCrit + StatConversion.NPC_LEVEL_SPELL_CRIT_MOD[character.BossOptions.Level - character.Level];
                float currentHaste = baseHaste;
                float currentMastery = baseMastery;
                float currentTrinketDPS = trinketDPS;
                calcs.BasicStats.BonusArcaneDamageMultiplier = oldArcaneMultiplier;
                calcs.BasicStats.BonusNatureDamageMultiplier = oldNatureMultiplier;
                float accumulatedDamage = 0.0f;
                float totalUpTime = 0.0f;
                float[] spellDetails = new float[NUM_SPELL_DETAILS];
                List<ProcEffect> activatedEffects = new List<ProcEffect>();
                List<ProcEffect> alwaysUpEffects = new List<ProcEffect>();

                float baselineDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);

                // Calculate spell power/spell damage modifying trinkets in a separate pre-loop
                // Add spell crit effects here as well, since they no longer affect timing
                foreach (ProcEffect proc in procEffects)
                {
                    bool handled = false;
                    if (proc.Effect.Stats.SpellPower > 0 || proc.Effect.Stats.CritRating > 0 || proc.Effect.Stats.MasteryRating > 0)
                    {
                        handled = true;
                        float procSpellPower = proc.Effect.Stats.SpellPower;
                        float procSpellCrit = StatConversion.GetSpellCritFromRating(proc.Effect.Stats.CritRating);
                        float procMastery = StatConversion.GetMasteryFromRating(proc.Effect.Stats.MasteryRating);

                        float triggerInterval = 0.0f, triggerChance = 1.0f;
                        switch (proc.Effect.Trigger)
                        {
                            case Trigger.DamageDone:
                            case Trigger.DamageOrHealingDone:
                                triggerInterval = ((rot.RotationData.Duration / rot.RotationData.CastCount) + (rot.RotationData.Duration / (rot.RotationData.MoonfireTicks + rot.RotationData.InsectSwarmTicks))) / 2.0f;
                                break;
                            case Trigger.Use:
                                break;
                            case Trigger.SpellHit:
                            case Trigger.DamageSpellHit:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                triggerChance = baseHit;
                                break;
                            case Trigger.SpellCrit:
                            case Trigger.DamageSpellCrit:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts);
                                triggerChance = baseCrit;
                                break;
                            case Trigger.SpellCast:
                            case Trigger.DamageSpellCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                break;
                            case Trigger.MoonfireCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireCasts;
                                break;
                            case Trigger.DoTTick:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.InsectSwarmTicks + rot.RotationData.MoonfireTicks);
                                break;
                            case Trigger.MoonfireTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireTicks;
                                break;
                            case Trigger.InsectSwarmTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.InsectSwarmTicks;
                                break;
                            default:
                                triggerChance = 0.0f;
                                break;
                        }
                        if (triggerChance > 0)
                        {
                            float durationMultiplier = proc.Effect.LimitedToExecutePhase ? sub35PercentTime : 1f;
                            currentSpellPower += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                            proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellPower * durationMultiplier;
                            currentCrit += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellCrit * durationMultiplier;
                            currentMastery += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procMastery * durationMultiplier;
                        }
                    }
                    // 2T10 (both if statements, which is why it isn't else-if)
                    if (proc.Effect.Stats.BonusArcaneDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusArcaneDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusArcaneDamageMultiplier;
                    }
                    if (proc.Effect.Stats.BonusNatureDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusNatureDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusNatureDamageMultiplier;
                    }
                    // Variable Pulse Lightning Capacitor
                    // This might catch some other effects, I probably need a better way to differentiate
                    if (proc.Effect.Trigger == Trigger.DamageSpellCrit && proc.Effect.Stats.NatureDamage > 0)
                    {
                        float procInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts + rot.RotationData.DotTicks);
                        currentTrinketDPS += proc.Effect.GetAverageProcsPerSecond(procInterval, currentCrit, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.NatureDamage;
                    }
                    // Nested special effects
                    if (proc.Effect.Stats._rawSpecialEffectDataSize > 0)
                    {
                        handled = true;
                        SpecialEffect childEffect = proc.Effect.Stats._rawSpecialEffectData[0];
                        // Heart of Ignacious
                        if (childEffect.Stats.SpellPower > 0)
                        {
                            float averageStack = childEffect.GetAverageStackSize(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit, 3.0f, proc.Effect.Duration);
                            currentSpellPower += childEffect.Stats.SpellPower * averageStack * proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit);
                        }
                        // 4T11
                        if (childEffect.Stats.SpellCrit != 0)
                        {
                            float maxStack = proc.Effect.Stats.SpellCrit;
                            float numNegativeStacks = childEffect.GetAverageStackSize(rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts), Math.Min(1.0f, baseCrit + maxStack), 3.0f, proc.Effect.Duration);
                            float averageNegativeValue = childEffect.Stats.SpellCrit * numNegativeStacks;
                            float averageCrit = maxStack + averageNegativeValue;
                            currentCrit += averageCrit * proc.Effect.GetAverageUptime(rot.RotationData.Duration / 2f, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f);
                        }
                    }
                    if (!handled)
                    {
                        if (proc.CalculateDPS != null)
                        {
                            accumulatedDamage += proc.CalculateDPS(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) * rot.RotationData.Duration;
                        }
                        if (proc.Activate != null)
                        {
                            float upTime = proc.UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            // Procs with 100% uptime should be activated and not put into the combination loop
                            if (upTime == 1)
                            {
                                alwaysUpEffects.Add(proc);
                                proc.Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                            }
                            // Procs with uptime 0 < x < 100 should be activated
                            else if (upTime > 0)
                                activatedEffects.Add(proc);
                        }
                        if (proc.CalculateMP5 != null)
                        {
                            manaGained += proc.CalculateMP5(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) / 5.0f * character.BossOptions.BerserkTimer * 60.0f;
                        }
                    }
                }
                // Calculate stat-boosting trinkets, taking into effect interactions with other stat-boosting procs
                int sign = 1;
                float[] cachedDamages = new float[1 << activatedEffects.Count];
                float[] cachedUptimes = new float[1 << activatedEffects.Count];
                float[,] cachedDetails = new float[1 << activatedEffects.Count, NUM_SPELL_DETAILS];
                List<int> calculatedPairs = new List<int>();
                // Iterate over the entire set of trinket combinations (each trinket by itself, 2 at a time, ...)
                for (int i = 1; i <= activatedEffects.Count; ++i)
                {
                    // Create a new combination generator for this "level" of trinket interaction
                    CombinationGenerator gen = new CombinationGenerator(activatedEffects.Count, i);
                    // Iterate over all combinations
                    while (gen.HasNext())
                    {
                        float tempUpTime = 1.0f;
                        int[] vals = gen.GetNext();
                        int pairs = 0;
                        int lengthCounter = 0;
                        // Activate the trinkets, calculate the damage and uptime, then deactivate them
                        foreach (int idx in vals)
                        {
                            pairs |= 1 << idx;
                            ++lengthCounter;
                            activatedEffects[idx].Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        currentCrit = (float)Math.Min(1.0f, currentCrit);
                        float tempDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency) / rot.RotationData.Duration;
                        spellDetails[0] = rot.RotationData.StarfireAvgHit;
                        spellDetails[1] = rot.RotationData.WrathAvgHit;
                        spellDetails[2] = rot.RotationData.MoonfireAvgHit;
                        spellDetails[3] = rot.RotationData.InsectSwarmAvgHit;
                        spellDetails[4] = rot.RotationData.StarSurgeAvgHit;
                        spellDetails[5] = rot.RotationData.StarfireAvgCast;
                        spellDetails[6] = rot.RotationData.WrathAvgCast;
                        spellDetails[7] = rot.RotationData.MoonfireAvgCast;
                        spellDetails[8] = rot.RotationData.InsectSwarmAvgCast;
                        spellDetails[9] = rot.RotationData.StarSurgeAvgCast;
                        spellDetails[10] = rot.RotationData.AverageInstantCast;
                        spellDetails[11] = rot.RotationData.StarfireAvgEnergy;
                        spellDetails[12] = rot.RotationData.WrathAvgEnergy;
                        spellDetails[13] = rot.RotationData.StarSurgeAvgEnergy;
                        spellDetails[14] = rot.RotationData.TreantDamage;
                        spellDetails[15] = rot.RotationData.StarfallDamage;
                        spellDetails[16] = rot.RotationData.MushroomDamage;
                        foreach (int idx in vals)
                        {
                            tempUpTime *= activatedEffects[idx].UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            activatedEffects[idx].Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        if (tempUpTime == 0) continue;
                        // Adjust previous probability tables by the current factor
                        // At the end of the algorithm, this ensures that the probability table will contain the individual
                        // probabilities of each effect or set of effects.
                        // These adjustments only need to be made for higher levels of the table, and if the current probability is > 0.
                        if (lengthCounter > 1)
                        {
                            foreach (int subset in calculatedPairs)
                            {
                                // Truly a subset?
                                if ((pairs & subset) != subset)
                                {
                                    continue;
                                }

                                // Calculate the "layer" of the current subset by getting the set bit count.
                                int subsetLength = 0;
                                for (int j = subset; j > 0; ++subsetLength)
                                {
                                    j &= --j;
                                }

                                // Set the sign of the operation: Evenly separated layers are added, oddly separated layers are subtracted
                                int newSign = ((lengthCounter - subsetLength) % 2 == 0) ? 1 : -1;

                                // Adjust by current uptime * sign of operation.
                                cachedUptimes[subset] += newSign * tempUpTime;
                            }
                        }
                        // Cache the results to be calculated later
                        cachedUptimes[pairs] = tempUpTime;
                        cachedDamages[pairs] = tempDPS;
                        for (int idx = 0; idx < NUM_SPELL_DETAILS; ++idx)
                        {
                            cachedDetails[pairs, idx] = spellDetails[idx];
                        }
                        calculatedPairs.Add(pairs);
                        totalUpTime += sign * tempUpTime;
                    }
                    sign = -sign;
                }
                float accumulatedDPS = 0.0f;
                Array.Clear(spellDetails, 0, spellDetails.Length);
                // Apply the above-calculated probabilities to the previously stored damage calculations and add to the result.
                for (int idx = 0; idx < cachedUptimes.Length; ++idx)
                {
                    if (cachedUptimes[idx] == 0) continue;
                    accumulatedDPS += cachedUptimes[idx] * cachedDamages[idx];
                    for (int i = 0; i < NUM_SPELL_DETAILS; ++i)
                    {
                        spellDetails[i] += cachedUptimes[idx] * cachedDetails[idx,i];
                    }
                }
                float damageDone = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);
                accumulatedDPS += (1 - totalUpTime) * damageDone / rot.RotationData.Duration;
                spellDetails[0] += (1 - totalUpTime) * rot.RotationData.StarfireAvgHit;
                spellDetails[1] += (1 - totalUpTime) * rot.RotationData.WrathAvgHit;
                spellDetails[2] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgHit;
                spellDetails[3] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgHit;
                spellDetails[4] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgHit;
                spellDetails[5] += (1 - totalUpTime) * rot.RotationData.StarfireAvgCast;
                spellDetails[6] += (1 - totalUpTime) * rot.RotationData.WrathAvgCast;
                spellDetails[7] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgCast;
                spellDetails[8] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgCast;
                spellDetails[9] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgCast;
                spellDetails[10] += (1 - totalUpTime) * rot.RotationData.AverageInstantCast;
                spellDetails[11] += (1 - totalUpTime) * rot.RotationData.StarfireAvgEnergy;
                spellDetails[12] += (1 - totalUpTime) * rot.RotationData.WrathAvgEnergy;
                spellDetails[13] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgEnergy;
                spellDetails[14] += (1 - totalUpTime) * rot.RotationData.TreantDamage;
                spellDetails[15] += (1 - totalUpTime) * rot.RotationData.StarfallDamage;
                spellDetails[16] += (1 - totalUpTime) * rot.RotationData.MushroomDamage;

                float burstDPS = accumulatedDPS + accumulatedDamage / rot.RotationData.Duration;
                float sustainedDPS = burstDPS;

                // Mana calcs:
                // Main rotation - all spells
                // Movement rotation - Lunar Shower MF, IS, Shooting Stars procs, and Starfall only
                rot.RotationData.ManaGained += manaGained / (character.BossOptions.BerserkTimer * 60.0f) * rot.RotationData.Duration;
                float timeToOOM = manaPool / ((rot.RotationData.ManaUsed - rot.RotationData.ManaGained) / rot.RotationData.Duration);
                if (timeToOOM <= 0) timeToOOM = character.BossOptions.BerserkTimer * 60.0f;   // Happens when ManaUsed is less than 0
                if (timeToOOM < character.BossOptions.BerserkTimer * 60.0f)
                {
                    rot.RotationData.TimeToOOM = new TimeSpan(0, (int)(timeToOOM / 60), (int)(timeToOOM % 60));
                    sustainedDPS = burstDPS * timeToOOM / (character.BossOptions.BerserkTimer * 60.0f);
                }
                
                burstDPS += currentTrinketDPS;
                sustainedDPS += currentTrinketDPS;

                rot.RotationData.SustainedDPS = sustainedDPS;
                rot.RotationData.BurstDPS = burstDPS;
                rot.RotationData.StarfireAvgHit = spellDetails[0];
                rot.RotationData.WrathAvgHit = spellDetails[1];
                rot.RotationData.MoonfireAvgHit = spellDetails[2];
                rot.RotationData.InsectSwarmAvgHit = spellDetails[3];
                rot.RotationData.StarSurgeAvgHit = spellDetails[4];
                rot.RotationData.StarfireAvgCast = spellDetails[5];
                rot.RotationData.WrathAvgCast = spellDetails[6];
                rot.RotationData.MoonfireAvgCast = spellDetails[7];
                rot.RotationData.InsectSwarmAvgCast = spellDetails[8];
                rot.RotationData.StarSurgeAvgCast = spellDetails[9];
                rot.RotationData.AverageInstantCast = spellDetails[10];
                rot.RotationData.StarfireAvgEnergy = spellDetails[11];
                rot.RotationData.WrathAvgEnergy = spellDetails[12];
                rot.RotationData.StarSurgeAvgEnergy = spellDetails[13];
                rot.RotationData.TreantDamage = spellDetails[14];
                rot.RotationData.StarfallDamage = spellDetails[15];
                rot.RotationData.MushroomDamage = spellDetails[16];

                // Update the sustained DPS rotation if any one of the following three cases is true:
                // 1) No user rotation is selected and sustained DPS is maximum
                // 2) A user rotation is selected, Eclipse is not present, and the user rotation matches the current rotation
                // 3) A user rotation is selected, Eclipse is present, and the user rotation's dot spells matches this rotation's
                if ((calcOpts.UserRotation == "None" && sustainedDPS > maxDamageDone) || rot.RotationData.Name == calcOpts.UserRotation)
                {
                    maxDamageDone = sustainedDPS;
                    maxRotation = rot;
                }
                if (burstDPS > maxBurstDamageDone)
                {
                    maxBurstDamageDone = burstDPS;
                    maxBurstRotation = rot;
                }
                cachedResults[rotationIndex - 1] = rot.RotationData;

                // Deactivate always-up procs
                foreach (ProcEffect proc in alwaysUpEffects)
                {
                    proc.Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                }

                ++rotationIndex;
            }
            // Present the findings to the user.
            calcs.SelectedRotation = maxRotation.RotationData;
            calcs.BurstRotation = maxBurstRotation.RotationData;
            calcs.SubPoints = new float[] { maxBurstDamageDone, maxDamageDone };
            calcs.OverallPoints = calcs.SubPoints[0] + calcs.SubPoints[1];
            calcs.Rotations = cachedResults;
        }

        // Create proc effect calculations for proc-based trinkets.
        private void BuildProcList(CharacterCalculationsMoonkin calcs)
        {
            // Implement a new handler for each special effect in the calculations stats
            foreach (SpecialEffect effect in calcs.BasicStats.SpecialEffects())
            {
                procEffects.Add(new ProcEffect(effect));
            }
        }

        // Non-rotation-specific mana calculations
        private float GetEffectiveManaPool(Character character, CalculationOptionsMoonkin calcOpts, CharacterCalculationsMoonkin calcs)
        {
            float fightLength = character.BossOptions.BerserkTimer * 60.0f;

            float innervateCooldown = 180;

            // Mana/5 calculations
            float totalManaRegen = calcs.ManaRegen * fightLength;

            // Mana pot calculations
            float manaRestoredByPots = 0.0f;
            foreach (Buff b in character.ActiveBuffs)
            {
                if (b.Stats.ManaRestore > 0)
                {
                    manaRestoredByPots = b.Stats.ManaRestore;
                    break;
                }
            }

            // Innervate calculations
            float innervateDelay = calcOpts.InnervateDelay * 60.0f;
            int numInnervates = (calcOpts.Innervate && fightLength - innervateDelay > 0) ? ((int)(fightLength - innervateDelay) / (int)innervateCooldown + 1) : 0;
            float totalInnervateMana = numInnervates * 0.2f * calcs.BasicStats.Mana;
            totalInnervateMana *= 1 + 0.15f * character.DruidTalents.Dreamstate;

            // Replenishment calculations
            float replenishmentPerTick = calcs.BasicStats.Mana * calcs.BasicStats.ManaRestoreFromMaxManaPerSecond;
            float replenishmentMana = calcOpts.ReplenishmentUptime * replenishmentPerTick * character.BossOptions.BerserkTimer * 60;

            return calcs.BasicStats.Mana + totalInnervateMana + totalManaRegen + manaRestoredByPots + replenishmentMana;
        }

        /*private void RecreateRotations()
        {
            rotations[0] = new SpellRotation() { RotationData = new RotationData() { Name = "None" } };
            for (int mfMode = 0; mfMode < 2; ++mfMode)
            {
                for (int isMode = 0; isMode < 2; ++isMode)
                {
                    for (int sfMode = 0; sfMode < 3; ++sfMode)
                    {
                        for (int wmMode = 0; wmMode < 3; ++wmMode)
                        {
                            int index = 1 + (wmMode + 3 * sfMode + 9 * isMode + 18 * mfMode);
                            DotMode mfModeEnum = (DotMode)mfMode;
                            DotMode isModeEnum = (DotMode)isMode;
                            StarfallMode sfModeEnum = (StarfallMode)sfMode;
                            MushroomMode wmModeEnum = (MushroomMode)wmMode;
                            string name = String.Format("MF {0} IS {1} SF {2} WM {3}",
                                mfModeEnum.ToString(),
                                isModeEnum.ToString(),
                                sfModeEnum.ToString(),
                                wmModeEnum.ToString());
                            rotations[index] = new SpellRotation()
                            {
                                RotationData = new RotationData()
                                {
                                    Name = name,
                                    MoonfireRefreshMode = mfModeEnum,
                                    InsectSwarmRefreshMode = isModeEnum,
                                    StarfallCastMode = sfModeEnum,
                                    WildMushroomCastMode = wmModeEnum
                                }
                            };
                        }
                    }
                }
            }
        }*/

        // Add talented effects to the spells
        private void UpdateSpells(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            DruidTalents talents = character.DruidTalents;
            StatsMoonkin stats = calcs.BasicStats;

            switch (talents.StarlightWrath)
            {
                case 1:
                    Starfire.BaseCastTime -= 0.15f;
                    Wrath.BaseCastTime -= 0.15f;
                    break;
                case 2:
                    Starfire.BaseCastTime -= 0.25f;
                    Wrath.BaseCastTime -= 0.25f;
                    break;
                case 3:
                    Starfire.BaseCastTime -= 0.5f;
                    Wrath.BaseCastTime -= 0.5f;
                    break;
                default:
                    break;
            }

            float moonfireDotGlyph = talents.GlyphOfMoonfire ? 0.2f : 0.0f;
            float insectSwarmGlyph = talents.GlyphOfInsectSwarm ? 0.3f : 0.0f;
            // Add spell-specific damage
            // Moonfire, Insect Swarm: glyphs
            Moonfire.DotEffect.AllDamageModifier *= 1 + moonfireDotGlyph;
            InsectSwarm.DotEffect.AllDamageModifier *= 1 + insectSwarmGlyph;
            // Moonfire: Direct damage +(0.03 * Blessing of the Grove)
            Moonfire.AllDamageModifier *= 1 + 0.03f * talents.BlessingOfTheGrove;
            // Moonfire, Insect Swarm: +2/4/6 seconds for Genesis
            Moonfire.DotEffect.BaseDuration += 2f * talents.Genesis;
            InsectSwarm.DotEffect.BaseDuration += 2f * talents.Genesis;
            // Wrath: 10% for glyph
            Wrath.AllDamageModifier *= 1 + (talents.GlyphOfWrath ? 0.1f : 0f);

            // Add spell-specific critical strike damage
            // Burning Shadowspirit Diamond
            float baseCritMultiplier = 1.5f * (1 + stats.BonusCritDamageMultiplier);
            float moonfuryMultiplier = baseCritMultiplier + (baseCritMultiplier - 1);
            Starfire.CriticalDamageModifier = Wrath.CriticalDamageModifier = Moonfire.CriticalDamageModifier = InsectSwarm.CriticalDamageModifier = moonfuryMultiplier;
            Starsurge.CriticalDamageModifier = moonfuryMultiplier;

            // Reduce spell-specific mana costs
            // Shard of Woe (Mana cost -405)
            Starfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Moonfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Wrath.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            InsectSwarm.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            Starsurge.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            // All spells: Mana cost -(0.03 * Moonglow)
            Starfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Moonfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Wrath.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            InsectSwarm.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Starsurge.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);

            // Add set bonuses
            Moonfire.CriticalChanceModifier += stats.BonusCritChanceMoonfire;
            InsectSwarm.CriticalChanceModifier += stats.BonusCritChanceInsectSwarm;
            Starfire.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Wrath.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Starsurge.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;

            // Dragonwrath, Tarecgosa's Rest: X% chance on damaging spell cast to proc a duplicate version of the spell.
            // If it duplicates a DoT tick, it fires Wrath of Tarecgosa for an equivalent amount of damage.
            // Wrath, Starfire, and Starsurge will duplicate the Eclipse energy gained.
            if (calcs.BasicStats.DragonwrathProc > 0)
            {
                Starfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Wrath.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Starsurge.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                InsectSwarm.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
            }

            // PTR changes go here
            if (((CalculationOptionsMoonkin)character.CalculationOptions).PTRMode)
            {
            }
        }
    }
}
