using System;
using System.Collections.Generic;

namespace Rawr.Moonkin
{
    // The interface public class to the rest of Rawr.  Provides a single Solve method that runs all the calculations.
    public class MoonkinSolver
    {
        private const int NUM_SPELL_DETAILS = 17;
        // A list of all currently active proc effects.
        public List<ProcEffect> procEffects;
        public static float BaseMana = 18635f;
        public static float OOC_PROC_CHANCE = 0.0583f;
        public static float EUPHORIA_PERCENT = 0.08f;
        public static float DRAGONWRATH_PROC_RATE = 0.11f;
        public static float ECLIPSE_BASE = 0.25f;

        #region Cast Distributions

        #region No GoSF

        public static double[,] CastDistribution = new double[21, 12] {
{ 0.104433029595219, 0.161825976594847, 0.0275195408859163, 0.0475166805018416, 0.132718457803961, 0.209531309373631, 0.0332709453500805, 0.0605830061271891, 0.0498481736221563, 0.0783668314933563, 0.0612298111236319, 0.0331562375281703, },
{ 0.102994400072861, 0.166764985443026, 0.0263139295093245, 0.0504240410713653, 0.14232313963262, 0.202260506139241, 0.03087477802826, 0.0611048062320821, 0.0456792459450158, 0.0783767524623182, 0.0612230882727025, 0.031660327191184, },
{ 0.11129645710543, 0.171451426798479, 0.0234714557905631, 0.0466111626987339, 0.139982454183865, 0.21701396017554, 0.0297158320354779, 0.0609718098095745, 0.0396747416241819, 0.0666985443565413, 0.0597697884240399, 0.0333423669975737, },
{ 0.111310886660795, 0.173175826674901, 0.0226790121417946, 0.0501693634794773, 0.147487723531036, 0.211662285655252, 0.0267771551651823, 0.0611131560761429, 0.0371080994858704, 0.0713038871754228, 0.0603837461504832, 0.0268288578036426, },
{ 0.119328619555823, 0.174832483776299, 0.0214721001794153, 0.047257455608299, 0.145451854761125, 0.224608992837491, 0.0252407525476473, 0.0610865724175048, 0.0364774479196927, 0.0591313417710435, 0.0538725074795078, 0.0312398711461516, },
{ 0.118235752547291, 0.180847377779613, 0.0190313054324064, 0.0491219344754261, 0.152010915769052, 0.217448781634978, 0.024005572029235, 0.0620165847100576, 0.0344875594258354, 0.0611307442076739, 0.0531761875779462, 0.0284872844104854, },
{ 0.124523852396847, 0.180360141152225, 0.0188557891131089, 0.0474994609563535, 0.150204267911051, 0.230349475769406, 0.0219339966675353, 0.0601778212128547, 0.0339658810864914, 0.0539111825409507, 0.0490098837367166, 0.0292082474564592, },
{ 0.122866745680191, 0.186185509638666, 0.0168665926852044, 0.0497608660690753, 0.155362449373852, 0.223789250919518, 0.0209792988656704, 0.0622556094976498, 0.0316887378608934, 0.0542860608938812, 0.0484577321094886, 0.0275011464059101, },
{ 0.129619250583576, 0.184151433569786, 0.0163100724314596, 0.0490935025633857, 0.15452753745244, 0.234580481303649, 0.019805672460477, 0.0599086622135869, 0.0335965519225051, 0.0519909945146099, 0.0421495829433033, 0.0242662580412216, },
{ 0.126550995093533, 0.190126125193898, 0.0155341537009154, 0.0510772331386939, 0.155874530916288, 0.230964547306306, 0.0182389851656376, 0.0613646242296722, 0.0334501370422226, 0.0510392662650395, 0.0415705027741306, 0.0242088991736636, },
{ 0.133313658982272, 0.185478619282726, 0.0152561010684502, 0.0534149353093411, 0.158912701865275, 0.236901707454342, 0.0168620332748024, 0.0592622309479758, 0.0442843409414049, 0.0552841342819045, 0.0259493979232981, 0.0150801386682082, },
{ 0.129752977161124, 0.191313273799059, 0.0141729550542876, 0.0532178323187969, 0.155573320759828, 0.238684239513485, 0.0158349106409744, 0.0599131584614006, 0.0418476188732887, 0.0511811143848822, 0.0289162910271, 0.0195923080057733, },
{ 0.133103258067851, 0.191143214176809, 0.0119380272608049, 0.0526165844268675, 0.160478573590251, 0.23038553099718, 0.0166213418273065, 0.0651575863060852, 0.0222373676703492, 0.0498543497034308, 0.0467514733461236, 0.0197126926269415, },
{ 0.135943037121566, 0.189861455371006, 0.010043273831244, 0.0524111750501323, 0.157680648976091, 0.238001134867093, 0.0156740824367533, 0.065665698077953, 0.0238101194290115, 0.0436482635070056, 0.0435478883694719, 0.0237132229626716, },
{ 0.133655463943658, 0.19606729237318, 0.0108523855843651, 0.0523025577728379, 0.159238940276333, 0.23512454468824, 0.0147335983795081, 0.0667566371068175, 0.0219257902841444, 0.0385429748227262, 0.0436843545081185, 0.0271154602600711, },
{ 0.137444318075296, 0.198169952386748, 0.011519020745344, 0.0467851189686147, 0.164621027523857, 0.238163164018611, 0.0152961007724874, 0.0584778291833634, 0.0256091290121987, 0.0435855039883429, 0.0391479897447533, 0.0211808455803837, },
{ 0.139680294027228, 0.19477683522118, 0.0101079043783671, 0.049049872619602, 0.161363592202261, 0.238159183870219, 0.0154549662107681, 0.0638046079556778, 0.0245529928193804, 0.0421642057043466, 0.0392343610954697, 0.0216511838954998, },
{ 0.139265786688817, 0.194474669194778, 0.00945599407309084, 0.0503541011500903, 0.160943124578091, 0.243292368595391, 0.0147950484162291, 0.0623301005565511, 0.0262047139482943, 0.0419025563037501, 0.0361180163366698, 0.0208635201582476, },
{ 0.137021557789142, 0.197072398229232, 0.00946639854156729, 0.052750606418642, 0.159136568079189, 0.240369312741628, 0.0137931118466711, 0.0659256651579843, 0.0245590175792484, 0.0404663651600619, 0.037515281169955, 0.0219237172866788, },
{ 0.137103882651084, 0.198179619683881, 0.00934117782353817, 0.0544219098293364, 0.164142175628651, 0.2397998958716, 0.0130357908623508, 0.0646226696410378, 0.0251508336189947, 0.0400460266139712, 0.0344715504497987, 0.019684467325756, },
{ 0.137976057461515, 0.194640268834538, 0.00872844342974609, 0.0567085115516371, 0.164868542617614, 0.236415803296874, 0.0126478629610242, 0.0671258819940996, 0.0245976567854436, 0.041948669349176, 0.0349818571548727, 0.0193604445634601, },
};
        
        public static double[,] T12CastDistribution = new double[21, 12] {
{ 0.0957389131875714, 0.149503955809482, 0.0250668995223429, 0.0433048054921489, 0.151172601006563, 0.21336428490112, 0.0353959546053048, 0.0645581022615007, 0.0448494798860087, 0.0770726875089786, 0.0658420410948694, 0.0341302747241092, },
{ 0.0946133691038063, 0.151890710324619, 0.0236922818925342, 0.0457188673952425, 0.145102999839694, 0.225269036637993, 0.0329902441960741, 0.0656301747080115, 0.0404709900588396, 0.0736665160798451, 0.0656830651520193, 0.0352717446113213, },
{ 0.10328419743279, 0.155977605903325, 0.0219327478320021, 0.0427407797415198, 0.156700964140332, 0.223715233728381, 0.0314748599099165, 0.0647582391772637, 0.0366483502375645, 0.0650914524808552, 0.0627529331762044, 0.0349226362398455, },
{ 0.100507653483533, 0.160985555678548, 0.0203853619296055, 0.0452280138033132, 0.151924087674274, 0.232119428219167, 0.0284041141008962, 0.0660977215389675, 0.0344819883116757, 0.063901187594922, 0.0622585439540013, 0.0337063437110964, },
{ 0.108668371636408, 0.161985348435667, 0.0196976215458535, 0.0431450216221164, 0.161054258111907, 0.23399690633765, 0.0269368321939126, 0.0646222686169463, 0.0323620040792205, 0.0578856114047878, 0.0575802920828484, 0.0320654639326823, },
{ 0.105344256750643, 0.169311739729962, 0.01686797889786, 0.0446603064562687, 0.159762222160555, 0.236985695581593, 0.0257083051022567, 0.0661415046236639, 0.0304968351631671, 0.0580989618489412, 0.0558836908575946, 0.0307385028274952, },
{ 0.112710671382827, 0.166250803196269, 0.0175227870467561, 0.0430378183632021, 0.164149288311066, 0.244306151782873, 0.0232059739962738, 0.0639012944026083, 0.0302393584025097, 0.0524984192882748, 0.0521287110236607, 0.0300487228036787, },
{ 0.109520958116881, 0.172937284257907, 0.0152877674286031, 0.0454669209724546, 0.164869269042096, 0.2428633658101, 0.0220305921844676, 0.0663986038232406, 0.0301355419172053, 0.0534643881084233, 0.0493146642016183, 0.0277106441370033, },
{ 0.115308655609456, 0.169562626054276, 0.0159624440316827, 0.0460263086354458, 0.168187370759969, 0.25147301070972, 0.0202194607860813, 0.0620803147374828, 0.0410549984181032, 0.0559340625513012, 0.0342841077413264, 0.0199066399651558, },
{ 0.112847320775063, 0.174284617907911, 0.015121430819753, 0.0482237063296825, 0.168151274045593, 0.250815448942361, 0.0188493518606111, 0.0624169021068535, 0.0467417811286503, 0.0552149588525982, 0.0278086227623971, 0.0195245844685265, },
{ 0.119569447203282, 0.174353046391844, 0.011997834729445, 0.0453224544830948, 0.170379002971318, 0.251313540204566, 0.0195718833161156, 0.0675600730726363, 0.0214616495862502, 0.0442724199678639, 0.0484144571129366, 0.0257841909606487, },
{ 0.116212769324348, 0.179084847152149, 0.0111648610606161, 0.0457919214373829, 0.167729016730044, 0.253231488960563, 0.0183994024684392, 0.067519696188291, 0.0214015084148774, 0.0443947717362168, 0.049027014695477, 0.0260427018315951, },
{ 0.12038310309467, 0.176906396171442, 0.0098107221907228, 0.0469109175728745, 0.172500927099447, 0.246656666103094, 0.018020535925379, 0.0713401005957881, 0.0196015891596248, 0.0412619401268434, 0.0490209426624437, 0.0275861592976705, },
{ 0.120303834323121, 0.175886015058015, 0.00889278538131953, 0.0478577258263204, 0.170181865346636, 0.255785007873555, 0.0169261193648952, 0.0695588411637449, 0.0247653881226445, 0.0432003840645733, 0.0425337210665962, 0.0241083124085789, },
{ 0.118471028342685, 0.180240386580811, 0.00920530749764893, 0.0486987318740413, 0.172919122981396, 0.251850744382195, 0.016152432377462, 0.0713718014949462, 0.0228604678295827, 0.0423192927812883, 0.0426709863093928, 0.0232396975485502, },
{ 0.122700885245071, 0.182593294082697, 0.00992877623676082, 0.0429670620434442, 0.176706376471467, 0.256162390588555, 0.0166444706520162, 0.062850690131245, 0.0249979765731243, 0.0427694467631249, 0.0397189688988795, 0.0219596623136156, },
{ 0.122442433338114, 0.179850447807779, 0.00927594797003311, 0.0452643089083629, 0.173100027751387, 0.259187240952949, 0.0161886644025114, 0.0673308909180967, 0.0237194215072271, 0.042839208823064, 0.0399453780075968, 0.0208560296128778, },
{ 0.121836501484675, 0.182037462963433, 0.008573947852736, 0.0457224743776338, 0.172920945998392, 0.261039697985664, 0.0154789694259698, 0.0670062562613945, 0.024735169063154, 0.0406433318456846, 0.0377537882898401, 0.0222514544514235, },
{ 0.120369950839805, 0.182870682506548, 0.00847797524581759, 0.0483907789692829, 0.173702838066989, 0.256944149328579, 0.0146663017456171, 0.0700021844158959, 0.0245142675747736, 0.0406199970795611, 0.0376832266301136, 0.0217576475970166, },
{ 0.122110904789227, 0.182223942360298, 0.00812092376260005, 0.0494951693966772, 0.178489122310804, 0.256493229422299, 0.0139931620492359, 0.0693808720986947, 0.0234110847035787, 0.0393052089735099, 0.0363124164155651, 0.0206639637175092, },
{ 0.123652529151886, 0.178649030648865, 0.00783321105823559, 0.0515208721372196, 0.176889073476318, 0.255150849756165, 0.0133580269223821, 0.0724010513550528, 0.0223118989631267, 0.0397768074425981, 0.0369653741638552, 0.0214912749242951, },
};
        public static double[,] T13CastDistribution = new double[21, 12] {
{ 0.0955061798352268, 0.152844715206064, 0.0465723611952365, 0.0473272049597322, 0.123146955185708, 0.195078090853061, 0.0577809577264675, 0.0605571866008178, 0.0486157198711935, 0.077846907297522, 0.0617416295282581, 0.0329820917407125, },
{ 0.095599771834689, 0.156631027243345, 0.0430525729543925, 0.0504506364219163, 0.134840068094169, 0.189379867788159, 0.0527967451297083, 0.0612903807730474, 0.0450537473820481, 0.0781652113609598, 0.0612474709982266, 0.0314925000193394, },
{ 0.102985163638562, 0.165274695835782, 0.0377189376119567, 0.046279895150938, 0.130965972351188, 0.203721340497496, 0.0539900965950588, 0.0612714478527084, 0.0381329834319695, 0.0658625594741454, 0.0604968168146046, 0.033300090745591, },
{ 0.103708337284722, 0.16482801150757, 0.0370417067865164, 0.0494580746444623, 0.139457970973194, 0.198393387828574, 0.0514396391027777, 0.0612378308520179, 0.0363418772590102, 0.0715088846591743, 0.060665876410534, 0.0259184026914472, },
{ 0.110471923541039, 0.168167129978043, 0.0342435292763068, 0.0465689017609263, 0.138446641582188, 0.212083472035554, 0.0485462713669907, 0.0617530228846312, 0.0349822448090509, 0.0586460646693622, 0.0548651917818354, 0.0312256063140724, },
{ 0.109688319507714, 0.172439472745135, 0.0332199772298344, 0.0485041450533125, 0.146404557329241, 0.206913044960346, 0.0442522085402195, 0.062400657395995, 0.0331694800980108, 0.0608826207201968, 0.0537929051786378, 0.0283326112413576, },
{ 0.113662135171748, 0.173265297372296, 0.0345525171354686, 0.0466540388253879, 0.14524836469712, 0.219478582495211, 0.0413126626217366, 0.0606036715256181, 0.0328224933824244, 0.0535537087242398, 0.0497114205569136, 0.0291351074918358, },
{ 0.113447379718686, 0.178012284874765, 0.0317370268304013, 0.0491571162803656, 0.150663817985942, 0.213402885597403, 0.0393841762391562, 0.0629309303780722, 0.0310157513664652, 0.054279378461435, 0.0487300796031233, 0.0272391726641849, },
{ 0.119167360492483, 0.177468406472323, 0.0299855284560722, 0.0482877362965521, 0.149733377679415, 0.225016944002317, 0.0381622914103269, 0.0603654995627843, 0.0328601410002809, 0.0519880949734622, 0.0427881541647473, 0.0241764654892364, },
{ 0.115761068176992, 0.18430938786632, 0.030026401081914, 0.0502456970762946, 0.152734748586761, 0.221308137352144, 0.0341045435058856, 0.0617316227416114, 0.0326898498618317, 0.0509781546444459, 0.0419976492659698, 0.0241127398398297, },
{ 0.122453998310267, 0.178092776936014, 0.0311876896650791, 0.0534809722728217, 0.156332889944158, 0.229005758698714, 0.0304819154044095, 0.058985668109707, 0.0466483888848624, 0.0563600622929487, 0.0232816712560017, 0.0136882082250163, },
{ 0.119468671721036, 0.185206845914174, 0.0285271610056396, 0.0527410746638962, 0.153028693127011, 0.229613402947635, 0.0306898900597582, 0.0597854152767313, 0.0430271686267977, 0.0517838838993749, 0.0274395183600023, 0.0186882743979439, },
{ 0.123725932898635, 0.184491995359257, 0.0251571091132908, 0.0520984647385668, 0.157729193915474, 0.223692262950483, 0.0294334641067605, 0.065641711265261, 0.0209375363122547, 0.0494267657384689, 0.0477854601238223, 0.0198801034777257, },
{ 0.126168628653837, 0.183176874533991, 0.0246875735280199, 0.0518479968907686, 0.154977340948482, 0.231106423746403, 0.0278414809345297, 0.0659969785961671, 0.0232839372066297, 0.0434284875374862, 0.0438126786038431, 0.0236715988198423, },
{ 0.124041209861023, 0.189498653646818, 0.0252333468326004, 0.0516571341405259, 0.157144759943592, 0.227526205638879, 0.0270028991417864, 0.0671299030947106, 0.0216800873772574, 0.0383302500141893, 0.0436760230625247, 0.0270795272460939, },
{ 0.128567648420281, 0.190351182368374, 0.0262207108632306, 0.0461734943799746, 0.162082711526802, 0.230074804295366, 0.0287054922822826, 0.058766954143429, 0.0251378049953015, 0.0437212811213883, 0.0393872341561736, 0.0208106814473968, },
{ 0.131171557162718, 0.187646428301858, 0.0241331094576659, 0.0483712897156614, 0.158981059878534, 0.230554104676555, 0.0280870013779924, 0.0638470833546416, 0.0242373160241267, 0.0421879922895097, 0.0393510833897344, 0.0214319743710039, },
{ 0.131644272204635, 0.186905191607064, 0.0230706503505316, 0.0498494926629622, 0.158690827630413, 0.235638910711804, 0.0270241433544813, 0.0627345835271399, 0.0254137963941394, 0.0416907952104436, 0.0365853756795581, 0.0207519606668275, },
{ 0.129540846502672, 0.190137604216314, 0.0220586800531794, 0.0523358582040399, 0.156464552954463, 0.232887262240462, 0.0261847470369607, 0.066224015816208, 0.0242628795034725, 0.0404578045476715, 0.0376596129925548, 0.0217861359320018, },
{ 0.129203797456406, 0.191718984365046, 0.0226949904719672, 0.0541781754556791, 0.160714293560288, 0.232981950878053, 0.0246681099715835, 0.0646820715515262, 0.0251872223479795, 0.0406718467413396, 0.0343139485204257, 0.0189846086797058, },
{ 0.129060481163808, 0.189024824809505, 0.0221224825649474, 0.0563931862041462, 0.162203114785758, 0.229574031602273, 0.0238715490347757, 0.0671583183112974, 0.0242791115353681, 0.0423289404167675, 0.0351335555502704, 0.0188504040210833, },
};
        public static double[] BaseRotationDurations = new double[21] { 60.989962236025, 57.6778147116241, 53.873720909091, 51.1282637345095, 48.2750338607084, 45.8138609020291, 43.5595013823855, 41.7336724678669, 40.0166828673067, 38.6378048135025, 37.0806741176986, 36.0406820012949, 34.8923915475193, 33.8946865754536, 32.9475106354515, 32.3041953908947, 31.7816008961088, 31.4268673490786, 31.0035434830552, 30.6247117526145, 30.2799107813664, };
        public static double[] T12RotationDurations = new double[21] { 56.3380863136643, 53.2619055486541, 49.7908228634166, 47.1661458533919, 44.5458951111109, 42.2235754245059, 40.1232987327455, 38.4829168584396, 36.9016773931863, 35.6443430607774, 34.2371478833146, 33.2654519208421, 32.1623871255374, 31.422003114277, 30.5141879693094, 29.9424753029282, 29.4514265829307, 29.136461990879, 28.7338319698703, 28.3882673030472, 28.07361967971, };
        public static double[] T13RotationDurations = new double[21] { 60.728697217391, 57.4075737769888, 53.6677416883115, 50.9696949443396, 48.146341298309, 45.7263642249275, 43.4905823128949, 41.6757230262038, 39.9720708119704, 38.5850171387035, 37.0396376126481, 35.980327955191, 34.8430654285119, 33.8518634022499, 32.9061562682331, 32.292747049621, 31.8001515347454, 31.4701728399688, 31.0479997515525, 30.6996254106282, 30.3704594041407, };
        public static double[] BaseNGUptimes = new double[21] { 0.480990118856201, 0.492800554700838, 0.543596011628719, 0.570973960940929, 0.589003508840932, 0.641411058748092, 0.660409977651369, 0.700611444628149, 0.719282373554618, 0.747459731717875, 0.773051068111661, 0.795325251255784, 0.816071951154998, 0.827378719791146, 0.85074623183832, 0.814390334742635, 0.845045105476324, 0.808053931628142, 0.845812108677301, 0.800777932824308, 0.837231260535001, };
        public static double[] T12NGUptimes = new double[21] { 0.519824432130538, 0.533726857601935, 0.582611063177825, 0.616949409580761, 0.638232284968279, 0.693865812151969, 0.718630826434904, 0.755491566627226, 0.772970956642567, 0.799957302116416, 0.81535485159219, 0.835386154238662, 0.870935792363279, 0.825891039175511, 0.858740800296245, 0.812710092188888, 0.853613118297824, 0.809662347803527, 0.853007550530364, 0.801396593148055, 0.853159813958059, };
        public static double[] T13NGUptimes = new double[21] { 0.479524552156379, 0.501889771297067, 0.543099235484748, 0.569517347809985, 0.59143486583075, 0.640504844007703, 0.660749460075238, 0.703244643840231, 0.71961491058731, 0.747748982449887, 0.772132340302798, 0.796631615029964, 0.815607062069825, 0.826962555053639, 0.85226199924607, 0.814841652015491, 0.844524652472872, 0.807310659960757, 0.84576067849409, 0.80043334104057, 0.83679795127219, };

        #endregion

        #region With GoSF

        public static double[,] CastDistributionGoSF = new double[21, 12] {
{ 0.105493942361288, 0.173855887185751, 0.0290072627547423, 0.0506036761479185, 0.138565766448547, 0.213482805296731, 0.0327031417659145, 0.0604737269099007, 0.0425165375617514, 0.0792950249408867, 0.0406635748438857, 0.0333386537826834, },
{ 0.114777049473542, 0.170161032250869, 0.0283199463507017, 0.0511475286515298, 0.147953288890437, 0.21273952153893, 0.0306870311198533, 0.0596356462159195, 0.0506911389161202, 0.0794725121281888, 0.0216339058579751, 0.0327813986059336, },
{ 0.113058695631949, 0.181840353455352, 0.0256754249756919, 0.051036133149874, 0.146507555602091, 0.223643655055009, 0.0289062179821954, 0.0585304545226316, 0.0575011615649673, 0.071317876918441, 0.0123902944132195, 0.0295921767285794, },
{ 0.1201261196797, 0.176126609008259, 0.0238999668747563, 0.0512247489440728, 0.153324639148878, 0.219045222924165, 0.0276525315364002, 0.058157351877301, 0.0620970226981305, 0.0723706474415435, 0.00659434919443339, 0.0293807906723605, },
{ 0.119370945259614, 0.182607448889004, 0.0231725707621034, 0.0519339458638882, 0.149059757709061, 0.230761490418575, 0.0243185063195438, 0.0585769604817966, 0.0597051244174199, 0.0603297185326358, 0.00962315242450215, 0.030540378921855, },
{ 0.124689086799998, 0.180559379066286, 0.0212844461273422, 0.0517490289892308, 0.156996887237348, 0.223081857304197, 0.0225679405739133, 0.0602861923178746, 0.048635584540291, 0.0609954088181748, 0.0195515462858214, 0.0296026419395226, },
{ 0.126033166630227, 0.185224733547599, 0.0191758636107939, 0.0499416374836676, 0.151549024748, 0.233154614263715, 0.0220952948609987, 0.0621142233922142, 0.0317319952956232, 0.0547738485208388, 0.035172672415408, 0.0290329252309151, },
{ 0.128599934455939, 0.187832453992669, 0.0171511291190222, 0.0505291721615097, 0.158908047819884, 0.227017724148531, 0.0211713735768506, 0.0634020636395253, 0.0269353667558765, 0.0540396866203082, 0.0358719963508016, 0.0285410513590823, },
{ 0.130633510142616, 0.18801958084021, 0.0160702714809375, 0.0510228389816469, 0.155076131074564, 0.237700309018187, 0.0203112936649478, 0.0630902355336935, 0.0280627746297871, 0.0525764300759256, 0.0318561691141038, 0.025580455443381, },
{ 0.130722397581628, 0.192705988810929, 0.0157115295120173, 0.0518075529577947, 0.162001227126553, 0.233012931261579, 0.0187468672483327, 0.0630796454530493, 0.0276444254953083, 0.0513037504392562, 0.0285183989062141, 0.0247452852073389, },
{ 0.13483138495401, 0.189836703579432, 0.0147224313578582, 0.0539723773306334, 0.160229740131455, 0.241003844585387, 0.0178188668704033, 0.0625728570376008, 0.0257028684713834, 0.0550657936401743, 0.0282634675623626, 0.0159796644793001, },
{ 0.131475035363574, 0.196880209791339, 0.0135676774750857, 0.0544859020566519, 0.159127660983851, 0.239414343571695, 0.016838172203505, 0.0625539261349771, 0.0260664522420903, 0.0535866026809168, 0.0281058472386917, 0.0178981702576232, },
{ 0.135888096596175, 0.193047812201173, 0.0126975364544638, 0.0540575286178645, 0.163757330513968, 0.236958744762071, 0.0164403596546824, 0.0637381335737421, 0.0229766310529182, 0.0526366718434528, 0.0295715070841019, 0.0182296476453879, },
{ 0.136138440201982, 0.194909267346544, 0.0107615037183394, 0.0543452889509882, 0.159052482348143, 0.242299682432946, 0.0160544794783937, 0.0666137885290265, 0.0202538069933094, 0.045607096514201, 0.031771722836925, 0.0221924406492022, },
{ 0.13599488153927, 0.198336446933364, 0.0112544297666473, 0.0538267973061476, 0.164916612432528, 0.238770240561753, 0.0149780831566658, 0.0655088879349207, 0.0193908561641023, 0.0437629708907763, 0.0306392030596629, 0.0226205902541618, },
{ 0.141376356903775, 0.199302138880756, 0.0116366158414919, 0.0486061793642381, 0.165484006542555, 0.241745893690905, 0.0162166913780079, 0.0604669816859003, 0.0196683711380146, 0.0446422229695275, 0.0303089291858089, 0.0205456124190194, },
{ 0.140530262796744, 0.197465362255438, 0.0102855371535008, 0.0508388345515539, 0.1629336443732, 0.246294678385523, 0.0155259745339224, 0.0633652777360263, 0.0212204354332536, 0.04382688187361, 0.0272830253988554, 0.020430085508372, },
{ 0.139146146036553, 0.199318014429982, 0.00972090701215454, 0.0530112870918789, 0.161788264248817, 0.246033873314347, 0.0147681691189478, 0.0639404713595686, 0.0209858154815691, 0.0433328092133406, 0.0278092050449672, 0.0201450376478745, },
{ 0.137887905847028, 0.201205892845886, 0.0096237667700799, 0.054161964365681, 0.163957566038484, 0.242965186289158, 0.0138020394803812, 0.0654247619722868, 0.021455396267298, 0.0420922536845663, 0.0267555264466504, 0.0206677399925006, },
{ 0.139027125412221, 0.198820006038661, 0.00889726621228637, 0.0563124145398107, 0.166763628660149, 0.240353613448238, 0.0132872733066099, 0.0666489871505326, 0.0218583613762417, 0.0428324866267624, 0.0260142894627458, 0.0191845477657415, },
{ 0.142045299392658, 0.196100522905822, 0.00875445093409209, 0.0575119879398136, 0.166810894509129, 0.239552981198667, 0.012642923400272, 0.0676358493243648, 0.0212417741140756, 0.0417034018256944, 0.0261247400359432, 0.0198751744194684, },
};
        public static double[,] T12CastDistributionGoSF = new double[21, 12] {
{ 0.100541053235696, 0.152110818610709, 0.0263457327112079, 0.0456230297608439, 0.154142420983978, 0.232144814254432, 0.0358550677146954, 0.0645562917511893, 0.0501087358048127, 0.0757388916083677, 0.0260657343904769, 0.0367674091735919, },
{ 0.0964706037272869, 0.161517495180436, 0.0263539583410804, 0.0468401960181916, 0.158131591708275, 0.2317677597093, 0.0323326413676259, 0.0631031371490339, 0.0597183212015028, 0.0757574845197831, 0.0123707515810648, 0.0356360594964204, },
{ 0.105432116399743, 0.156967125561627, 0.0241786649551539, 0.0468197046261881, 0.15932708555757, 0.2406775699297, 0.0300370415277613, 0.0629054197813541, 0.0619015696077792, 0.0655238729184952, 0.0108814410467295, 0.0353483880878989, },
{ 0.103092161321155, 0.164664484491203, 0.021655310130536, 0.0471750777269057, 0.161838225623709, 0.236815911699577, 0.0284141991253798, 0.0639660268242791, 0.0533891646064211, 0.0658400021921705, 0.0191806405768361, 0.0339687956818272, },
{ 0.111002008866431, 0.162156570298451, 0.0199783943353387, 0.0463819603271497, 0.162262096432323, 0.242347680337645, 0.0265300919649321, 0.0665405726451388, 0.0358555555246549, 0.0586615685459324, 0.0359696793339883, 0.0323138213880153, },
{ 0.109280569009453, 0.171332222597552, 0.0176041595992571, 0.0450885263200388, 0.166620875423873, 0.240007366474614, 0.0257824616438257, 0.0673183448614378, 0.0274162400324087, 0.0567501725939545, 0.0399454279360615, 0.032853633507524, },
{ 0.113865936453752, 0.171382799994058, 0.0170068263146278, 0.0449586870118691, 0.164955796572421, 0.251108536613459, 0.0240818052570814, 0.0666997261913951, 0.0278121403015406, 0.0534257984764576, 0.0349032633422221, 0.0297986834711171, },
{ 0.113957955553641, 0.175759296846302, 0.0156431846314264, 0.0457825679640491, 0.172105608001952, 0.246511144285454, 0.0227656822967777, 0.066706870033052, 0.0282779633432899, 0.0532472213606283, 0.0303586281228492, 0.0288838775605787, },
{ 0.116748198593865, 0.174247531313203, 0.0146363326739957, 0.0462381994305612, 0.168396945554046, 0.255687849288339, 0.0216229025306802, 0.0669650073474265, 0.0287983862996922, 0.050163039879237, 0.0290315669308917, 0.027464040158062, },
{ 0.11447588661821, 0.178231271654684, 0.0149217587862178, 0.0487113810266194, 0.173021348672402, 0.25270124096717, 0.019418910582825, 0.0655731469496934, 0.0255935798034514, 0.0578405647107309, 0.0316603745047152, 0.0178505357232813, },
{ 0.120583501997256, 0.177185229722663, 0.0120786186293521, 0.0470551414451947, 0.171771083304511, 0.257525744307987, 0.0201218644416005, 0.0694665307824561, 0.0178169179242055, 0.0461889211604693, 0.0357503641864349, 0.0244560820978702, },
{ 0.117824502344699, 0.182493390185235, 0.0111460902074083, 0.0476814002193565, 0.172418136803637, 0.254648321784446, 0.0190205688465569, 0.069770585332919, 0.0179235307085352, 0.0461204723186293, 0.0359438563276595, 0.0250091449209178, },
{ 0.122867826433552, 0.179090091973521, 0.0107138510009292, 0.0480825860828967, 0.175345944300025, 0.254669002909843, 0.0182073651235098, 0.0694271016796672, 0.0202744730052016, 0.0455681132421883, 0.0305518654863389, 0.0252017787623276, },
{ 0.120567254441381, 0.181408657144185, 0.00951033667173503, 0.0499613607838141, 0.172169440133227, 0.259678926897584, 0.0171715958815386, 0.0714617731981694, 0.020138063143458, 0.0447317488890928, 0.0302233017667226, 0.0229775410490926, },
{ 0.122183814523846, 0.18249868613181, 0.00978013894536398, 0.0492851731493374, 0.178410999690969, 0.256682816491433, 0.0165240696331507, 0.0697771488339288, 0.020395795236459, 0.0443368940549583, 0.0281522166144582, 0.0219722466942853, },
{ 0.124973417078943, 0.183708697267331, 0.0100894958019371, 0.0444815777068943, 0.177298705961278, 0.263380475891066, 0.0175364739241618, 0.064869976030301, 0.0201480527949544, 0.0430003442257018, 0.0284948567385952, 0.0220179265788359, },
{ 0.123032457843787, 0.18568246595725, 0.00920028595113108, 0.046363700951334, 0.175303150644175, 0.264854865822793, 0.0163971732466655, 0.0677217038440102, 0.0200917800451271, 0.0420137224665418, 0.0273178862428798, 0.0220208069843058, },
{ 0.121913858769811, 0.186777690402175, 0.00868331787270521, 0.0479915869935257, 0.176014441566609, 0.262226815213376, 0.0157183021775467, 0.0687607282714475, 0.0207707729542617, 0.0413850813931434, 0.0277716257834337, 0.0219857786019645, },
{ 0.122801315990395, 0.185263982806646, 0.008302806643763, 0.0491220613041175, 0.17973298694597, 0.258749779310978, 0.0148367716119115, 0.0705084338872546, 0.0206822725443927, 0.0406181659151353, 0.0273222431584739, 0.0220591798809622, },
{ 0.12499516005723, 0.182657920935588, 0.00804430975607233, 0.0509108936086787, 0.179453651588711, 0.258487347702397, 0.0140705819962604, 0.0718098108096826, 0.0197677940971425, 0.0405479582861004, 0.0280022244058081, 0.0212523467563288, },
{ 0.125702877869753, 0.180111112735096, 0.00796560258068633, 0.0520974673483903, 0.178125868900821, 0.261153379052188, 0.013290430260649, 0.0728000489203018, 0.0198334998381948, 0.0396541762375475, 0.027443832576263, 0.0218217036801094, },
};
        public static double[,] T13CastDistributionGoSF = new double[21, 12] {
{ 0.0972596144603996, 0.163295946559137, 0.0468043238130755, 0.0502095266224443, 0.128597874838537, 0.197194692021118, 0.0600800532182969, 0.0609477026633688, 0.0407035501500923, 0.0788194771411911, 0.0429359100360036, 0.0331513284763353, },
{ 0.106749249300906, 0.161307687201586, 0.0426309437176084, 0.0506012656148343, 0.137768930677262, 0.200158471777731, 0.0562317901633743, 0.0601398798910062, 0.0492721829218485, 0.0786691533554197, 0.0236850910846121, 0.0327853542938116, },
{ 0.103199322701038, 0.173757865628693, 0.0410671251532261, 0.0503843917397212, 0.139002248859304, 0.209614598252202, 0.0534846647380246, 0.0589738558824585, 0.056310718759358, 0.0707431142498394, 0.0139913548245338, 0.029470739211601, },
{ 0.109343504778164, 0.167375120307423, 0.0407924555612938, 0.050662977069421, 0.146187780873933, 0.206612618696103, 0.0508219639720187, 0.0586251062692123, 0.0617983529129334, 0.0714998165464963, 0.0068168421729032, 0.0294634608400983, },
{ 0.108157812149853, 0.17493856357851, 0.0383111153308934, 0.0510775153886409, 0.143552880178293, 0.218223286599468, 0.0468601140864858, 0.0593649106797423, 0.0602038230665646, 0.0598949669334077, 0.0089485999846549, 0.0304664120234865, },
{ 0.114881209808054, 0.171298075191888, 0.0369051957216938, 0.0508548682247252, 0.151520548384802, 0.212932827644204, 0.0427981665897613, 0.0606492042316082, 0.0485480319740789, 0.060575829881544, 0.0194301895352028, 0.0296058528124383, },
{ 0.114920478000455, 0.176585998864591, 0.0367943514750953, 0.0493757926724068, 0.14780232779797, 0.222039116765059, 0.0398001993148486, 0.0625937807828458, 0.0310183829695824, 0.054279559672491, 0.0356644789682544, 0.0291255327164007, },
{ 0.118482604558592, 0.179033789366992, 0.0335747195123631, 0.0499317226076182, 0.155227457889986, 0.216619248834603, 0.0382463070031594, 0.0638120378246336, 0.0259282241206229, 0.0538064365290953, 0.0367367157599652, 0.0286007359923692, },
{ 0.119598099319649, 0.181636498524019, 0.0311854899661908, 0.0503882709540587, 0.151587250205979, 0.228106868285734, 0.0364355595198933, 0.0634968608295487, 0.0273691963152024, 0.052544565440812, 0.0324038420771308, 0.0252474985617818, },
{ 0.1196354763975, 0.186505824068798, 0.0312144987632169, 0.0507496043133619, 0.158699344978976, 0.223404425640824, 0.0344645710051671, 0.0634559329717846, 0.0272543116224698, 0.0510565945811284, 0.0288354227842022, 0.0247239928725713, },
{ 0.123343687235731, 0.18252861614916, 0.0304960417465045, 0.0540805102147273, 0.157423943426362, 0.233207327249866, 0.0319885761471032, 0.0623864368532968, 0.0267023869106912, 0.0568939566351374, 0.0270816653587744, 0.0138668520726461, },
{ 0.12124933708799, 0.190365647288878, 0.0279152791786514, 0.0541131458521377, 0.156590208004788, 0.230892707598829, 0.0309638365775736, 0.062594356474006, 0.0268222515310894, 0.0541664592621831, 0.0273074039759924, 0.0170193671678815, },
{ 0.12618073404912, 0.186587334568352, 0.0260564122059054, 0.0534178108281968, 0.160912011592685, 0.229706500776287, 0.0298345919574235, 0.0641052627817273, 0.0230714922201234, 0.0519320382583615, 0.0295040877214961, 0.0186917230403228, },
{ 0.126388747807767, 0.18846799772927, 0.0252022249882781, 0.0537894661920342, 0.156452535923152, 0.2350232152832, 0.0282955275493498, 0.066834057489415, 0.0204358370398201, 0.0453357786360766, 0.0315791213168493, 0.0221954900447879, },
{ 0.126314613177539, 0.191770761821119, 0.0253550900913037, 0.0531603775031641, 0.162630179620503, 0.23133583641125, 0.027238765870246, 0.0660439969061554, 0.0191978036958331, 0.0435055724536627, 0.0308045408629156, 0.0226424615863086, },
{ 0.131652887427608, 0.191619384783684, 0.0271387476400176, 0.0480058391626836, 0.163185919140427, 0.234252287116878, 0.0284713827068599, 0.0607303361200174, 0.0190596765720066, 0.0445049535639801, 0.0309375445846659, 0.0204410411811722, },
{ 0.131793528374484, 0.189562291906354, 0.0250835468586155, 0.0503469262460937, 0.16074430508701, 0.239128218899042, 0.0271465619418854, 0.0636390224311138, 0.0207885577754754, 0.0439984461131119, 0.0276985732909722, 0.0200700210758421, },
{ 0.131492165244019, 0.191622235950881, 0.02305823364659, 0.0526106099985046, 0.159382007212562, 0.238629784262036, 0.0268348836539021, 0.0643392949457328, 0.0206308882002368, 0.0431016288721257, 0.0280857616675327, 0.0202125063458762, },
{ 0.130308367085006, 0.194545824488577, 0.0226858005844089, 0.053785932447484, 0.161002976154767, 0.235559705066818, 0.0257735139530815, 0.0656166448568732, 0.0209765674907161, 0.0418145278839744, 0.0271473990096119, 0.0207827409786814, },
{ 0.130449195903488, 0.192401467142545, 0.0225167244753808, 0.0559201308333048, 0.164002111240057, 0.233602722434432, 0.0245199436082998, 0.0668905826038985, 0.0216965359568393, 0.0429863647195067, 0.0261132608270867, 0.0189009602551618, },
{ 0.133420566468865, 0.190193845957062, 0.0223806868856689, 0.0572159174315366, 0.164693133668238, 0.232050267183131, 0.0236231642615237, 0.067695734308117, 0.0212092560298749, 0.0420794472200188, 0.0260673592532994, 0.0193706213326643, },
};
        public static double[] BaseRotationDurationsGoSF = new double[21] { 59.4306549782608, 55.9789767494827, 52.5069717303471, 49.9572257088846, 47.4098468115939, 45.2214011176813, 43.1447124920105, 41.2446577578682, 39.6071471914174, 38.1031266693929, 36.7894688247694, 35.7655750235553, 34.6671580741362, 33.605664331948, 32.7177494106407, 32.0188904484338, 31.5062981042627, 31.1011746046666, 30.7202737007735, 30.3102142288053, 29.9867638356107, };
        public static double[] T12RotationDurationsGoSF = new double[21] { 54.6487885496894, 51.7921874856223, 48.7184833355287, 46.3880058928796, 43.9291847600644, 41.6692547756521, 39.6059937585892, 37.9325388747378, 36.465037781856, 35.3690845519551, 33.905811836492, 32.9710979831387, 31.9325899438604, 31.106622846371, 30.2406453981248, 29.5957616989058, 29.1346275213941, 28.7996586500196, 28.4187756517925, 28.0767537352286, 27.7627318213769, };
        public static double[] T13RotationDurationsGoSF = new double[21] { 59.22226589441, 55.7780366459624, 52.3958859705752, 49.8299979878176, 47.2847443800321, 45.1654172490826, 43.1057935044083, 41.211364006441, 39.5609206561264, 38.052583778111, 36.7728742608695, 35.7197065461932, 34.6139743478261, 33.5698427607176, 32.688766756415, 32.0139997660228, 31.5315947964112, 31.146500493537, 30.7711514586465, 30.3843609086373, 30.0746950861282, };
        public static double[] BaseNGUptimesGoSF = new double[21] { 0.493573424997453, 0.508189441099822, 0.555097437252594, 0.579544689776585, 0.59262027208033, 0.619287037901568, 0.630886621301388, 0.675767099873877, 0.6936372203455, 0.727399217156878, 0.727192063920661, 0.744207248179757, 0.761745171127465, 0.790574348156843, 0.797629464508127, 0.782314672717672, 0.791030411044615, 0.788446564175492, 0.795107926087214, 0.797105659183904, 0.788759157415204, };
        public static double[] T12NGUptimesGoSF = new double[21] { 0.534503620647449, 0.548648971358832, 0.584470310880904, 0.600315838355401, 0.618911631794181, 0.669158812723878, 0.696667958663069, 0.733487904560324, 0.755247798036357, 0.742236771046411, 0.777287975014463, 0.791030705295012, 0.807318235833063, 0.797424615019201, 0.808838319998262, 0.79589229465492, 0.812517220235224, 0.804051327117684, 0.813728433445724, 0.806216211207759, 0.79938371199683, };
        public static double[] T13NGUptimesGoSF = new double[21] { 0.492153902149006, 0.515289965619084, 0.554046928675037, 0.578918852240433, 0.595248096672375, 0.620499266833306, 0.630592875104493, 0.677065986905549, 0.693338365397215, 0.728609144142359, 0.720689494304201, 0.744844614862179, 0.763429833671077, 0.790635131546834, 0.797749446504854, 0.782105330337403, 0.789038127812448, 0.787399608807429, 0.794547640399449, 0.796285394922676, 0.788390671387403, };
        public static double[] BasePercentMoonfiresExtended = new double[21] { 0.605165893370135, 0.838647405299898, 0.880613947319479, 0.888533791144692, 0.785259889724261, 0.668768315789527, 0.563618385053623, 0.662471679198047, 0.736456626566521, 0.863855577276533, 0.912884152047087, 0.916150511278461, 0.908057869674344, 0.889329208020108, 0.911686010025218, 0.917250591478864, 0.951170751879904, 0.932509809524077, 0.964191809524038, 0.966434476190662, 0.978917238095393, };
        public static double[] T12PercentMoonfiresExtended = new double[21] { 0.823422013268379, 0.887419326453629, 0.831109309941491, 0.703729824561466, 0.553202987468713, 0.639810603782232, 0.754813273182982, 0.887159894737001, 0.896953318295919, 0.889023072681819, 0.878671157894815, 0.895075097744451, 0.959271373433829, 0.966772220551533, 0.980266631579083, 0.975149804511452, 0.983561157894838, 0.972598190476396, 0.98226428571444, 0.989197904761995, 0.973032380952614, };
        public static double[] T13PercentMoonfiresExtended = new double[21] { 0.582141212786249, 0.809483926313803, 0.85830329009703, 0.881298693400302, 0.783127874686653, 0.662880746867227, 0.558158267486981, 0.654373187514287, 0.732087729323422, 0.862366750208854, 0.914180070175747, 0.913944436090476, 0.899506766917419, 0.878458511278211, 0.903754987468796, 0.900117057644218, 0.947672837092944, 0.928362095238359, 0.959523619047853, 0.964074857143052, 0.977396095238255, };

        #endregion

        public static string[] CastDistributionSpells = new string[12] { "Starfire", "Wrath", "Starsurge", "Shooting Stars", "Starfire (Eclipse)", "Wrath (Eclipse)", "Starsurge (Eclipse)", "Shooting Stars (Eclipse)", "Moonfire", "Insect Swarm", "Moonfire (Eclipse)", "Insect Swarm (Eclipse)" };

        #endregion

        // A list of all the damage spells
        private Spell[] _spellData = null;
        private Spell[] SpellData
        {
            get
            {
                if (_spellData == null)
                {
                    _spellData = new Spell[] {
                        new Spell()
                        {
                            Name = "SF",
                            BaseDamage = (1214f + 1514f) / 2.0f,
                            SpellDamageModifier = 1.0f,
                            BaseCastTime = 3.2f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Arcane,
                            BaseEnergy = 20
                        },
                        new Spell()
                        {
                            Name = "MF",
                            BaseDamage = (197.0f + 239.0f) / 2.0f,
                            SpellDamageModifier = 0.18f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = new DotEffect()
                                {
                                    BaseDuration = 12.0f,
                                    BaseTickLength = 2.0f,
                                    TickDamage = 93.0f,
                                    SpellDamageModifierPerTick = 0.18f
                                },
                            School = SpellSchool.Arcane
                        },
                        new Spell()
                        {
                            Name = "W",
                            BaseDamage = (831f + 937f) / 2.0f,
                            SpellDamageModifier = 2.5f/3.5f,
                            BaseCastTime = 2.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = null,
                            School = SpellSchool.Nature,
                            BaseEnergy = 40/3f
                        },
                        new Spell()
                        {
                            Name = "IS",
                            BaseDamage = 0.0f,
                            SpellDamageModifier = 0.0f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.08f),
                            DotEffect = new DotEffect()
                            {
                                BaseDuration = 12.0f,
                                BaseTickLength = 2.0f,
                                TickDamage = 136.0f,
                                SpellDamageModifierPerTick = 0.13f
                            },
                            School = SpellSchool.Nature
                        },
                        new Spell()
                        {
                            Name = "SS",
                            BaseDamage = (1018 + 1404) / 2f,
                            SpellDamageModifier = 1.228f,
                            BaseCastTime = 2.0f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Spellstorm,
                            BaseEnergy = 15
                        }
                    };
                }
                return _spellData;
            }
        }
        public Spell Starfire
        {
            get
            {
                return SpellData[0];
            }
        }
        public Spell Moonfire
        {
            get
            {
                return SpellData[1];
            }
        }
        public Spell Wrath
        {
            get
            {
                return SpellData[2];
            }
        }
        public Spell InsectSwarm
        {
            get
            {
                return SpellData[3];
            }
        }
        public Spell Starsurge
        {
            get
            {
                return SpellData[4];
            }
        }
        private void ResetSpellList()
        {
            // Since the property rebuilding the array is based on this variable being null, this effectively forces a refresh
            _spellData = null;
        }

        // The spell rotations themselves.
        private SpellRotation[] rotations = null;
        public SpellRotation[] Rotations
        {
            get
            {
                if (rotations == null)
                {
                    rotations = new SpellRotation[3]
                    {
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Unused" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Lunar Only", StarfallCastMode = StarfallMode.LunarOnly } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall On CD", StarfallCastMode = StarfallMode.OnCooldown } },
                    };
                    //RecreateRotations();
                }
                return rotations;
            }
        }

        // Results data from the calculations, which will be sent to the UI.
        RotationData[] cachedResults = new RotationData[3];

        public void Solve(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            CalculationOptionsMoonkin calcOpts = character.CalculationOptions as CalculationOptionsMoonkin;
            DruidTalents talents = character.DruidTalents;
            procEffects = new List<ProcEffect>();
            UpdateSpells(character, ref calcs);

            float trinketDPS = 0.0f;
            float baseSpellPower = calcs.SpellPower;
            float baseHit = 1 - Math.Max(0, calcs.SpellHitCap - calcs.SpellHit);
            float baseCrit = calcs.SpellCrit;
            float baseHaste = calcs.SpellHaste;
            float baseMastery = calcs.Mastery;
            float sub35PercentTime = (float)(character.BossOptions.Under20Perc + character.BossOptions.Under35Perc);

            BuildProcList(calcs);

            float maxDamageDone = 0.0f, maxBurstDamageDone = 0.0f;
            SpellRotation maxBurstRotation = Rotations[0];
            SpellRotation maxRotation = Rotations[0];

            float manaPool = GetEffectiveManaPool(character, calcOpts, calcs);

            float manaGained = manaPool - calcs.BasicStats.Mana;

            float oldArcaneMultiplier = calcs.BasicStats.BonusArcaneDamageMultiplier;
            float oldNatureMultiplier = calcs.BasicStats.BonusNatureDamageMultiplier;

            int rotationIndex = 1;
            foreach (SpellRotation rot in Rotations)
            {
                if (rot.RotationData.Name == "None") continue;
                rot.Solver = this;

                // Reset variables modified in the pre-loop to base values
                float currentSpellPower = baseSpellPower;
                float currentCrit = baseCrit + StatConversion.NPC_LEVEL_SPELL_CRIT_MOD[character.BossOptions.Level - character.Level];
                float currentHaste = baseHaste;
                float currentMastery = baseMastery;
                float currentTrinketDPS = trinketDPS;
                calcs.BasicStats.BonusArcaneDamageMultiplier = oldArcaneMultiplier;
                calcs.BasicStats.BonusNatureDamageMultiplier = oldNatureMultiplier;
                float accumulatedDamage = 0.0f;
                float totalUpTime = 0.0f;
                float[] spellDetails = new float[NUM_SPELL_DETAILS];
                List<ProcEffect> activatedEffects = new List<ProcEffect>();
                List<ProcEffect> alwaysUpEffects = new List<ProcEffect>();

                float baselineDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);

                // Calculate spell power/spell damage modifying trinkets in a separate pre-loop
                // Add spell crit effects here as well, since they no longer affect timing
                foreach (ProcEffect proc in procEffects)
                {
                    bool handled = false;
                    if (proc.Effect.Stats.SpellPower > 0 || proc.Effect.Stats.CritRating > 0 || proc.Effect.Stats.MasteryRating > 0)
                    {
                        handled = true;
                        float procSpellPower = proc.Effect.Stats.SpellPower;
                        float procSpellCrit = StatConversion.GetSpellCritFromRating(proc.Effect.Stats.CritRating);
                        float procMastery = StatConversion.GetMasteryFromRating(proc.Effect.Stats.MasteryRating);

                        float triggerInterval = 0.0f, triggerChance = 1.0f;
                        switch (proc.Effect.Trigger)
                        {
                            case Trigger.DamageDone:
                            case Trigger.DamageOrHealingDone:
                                triggerInterval = ((rot.RotationData.Duration / rot.RotationData.CastCount) + (rot.RotationData.Duration / (rot.RotationData.MoonfireTicks + rot.RotationData.InsectSwarmTicks))) / 2.0f;
                                break;
                            case Trigger.Use:
                                break;
                            case Trigger.SpellHit:
                            case Trigger.DamageSpellHit:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                triggerChance = baseHit;
                                break;
                            case Trigger.SpellCrit:
                            case Trigger.DamageSpellCrit:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts);
                                triggerChance = baseCrit;
                                break;
                            case Trigger.SpellCast:
                            case Trigger.DamageSpellCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                break;
                            case Trigger.MoonfireCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireCasts;
                                break;
                            case Trigger.DoTTick:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.InsectSwarmTicks + rot.RotationData.MoonfireTicks);
                                break;
                            case Trigger.MoonfireTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireTicks;
                                break;
                            case Trigger.InsectSwarmTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.InsectSwarmTicks;
                                break;
                            default:
                                triggerChance = 0.0f;
                                break;
                        }
                        if (triggerChance > 0)
                        {
                            float durationMultiplier = proc.Effect.LimitedToExecutePhase ? sub35PercentTime : 1f;
                            currentSpellPower += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                            proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellPower * durationMultiplier;
                            currentCrit += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellCrit * durationMultiplier;
                            currentMastery += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procMastery * durationMultiplier;
                        }
                    }
                    // 2T10 (both if statements, which is why it isn't else-if)
                    if (proc.Effect.Stats.BonusArcaneDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusArcaneDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusArcaneDamageMultiplier;
                    }
                    if (proc.Effect.Stats.BonusNatureDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusNatureDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusNatureDamageMultiplier;
                    }
                    // Variable Pulse Lightning Capacitor
                    // This might catch some other effects, I probably need a better way to differentiate
                    if (proc.Effect.Trigger == Trigger.DamageSpellCrit && proc.Effect.Stats.NatureDamage > 0)
                    {
                        float procInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts + rot.RotationData.DotTicks);
                        currentTrinketDPS += proc.Effect.GetAverageProcsPerSecond(procInterval, currentCrit, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.NatureDamage;
                    }
                    // Nested special effects
                    if (proc.Effect.Stats._rawSpecialEffectDataSize > 0)
                    {
                        handled = true;
                        SpecialEffect childEffect = proc.Effect.Stats._rawSpecialEffectData[0];
                        // Heart of Ignacious
                        if (childEffect.Stats.SpellPower > 0)
                        {
                            float averageStack = childEffect.GetAverageStackSize(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit, 3.0f, proc.Effect.Duration);
                            currentSpellPower += childEffect.Stats.SpellPower * averageStack * proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit);
                        }
                        // 4T11
                        if (childEffect.Stats.SpellCrit != 0)
                        {
                            float maxStack = proc.Effect.Stats.SpellCrit;
                            float numNegativeStacks = childEffect.GetAverageStackSize(rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts), Math.Min(1.0f, baseCrit + maxStack), 3.0f, proc.Effect.Duration);
                            float averageNegativeValue = childEffect.Stats.SpellCrit * numNegativeStacks;
                            float averageCrit = maxStack + averageNegativeValue;
                            currentCrit += averageCrit * proc.Effect.GetAverageUptime(rot.RotationData.Duration / 2f, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f);
                        }
                    }
                    if (!handled)
                    {
                        if (proc.CalculateDPS != null)
                        {
                            accumulatedDamage += proc.CalculateDPS(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) * rot.RotationData.Duration;
                        }
                        if (proc.Activate != null)
                        {
                            float upTime = proc.UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            // Procs with 100% uptime should be activated and not put into the combination loop
                            if (upTime == 1)
                            {
                                alwaysUpEffects.Add(proc);
                                proc.Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                            }
                            // Procs with uptime 0 < x < 100 should be activated
                            else if (upTime > 0)
                                activatedEffects.Add(proc);
                        }
                        if (proc.CalculateMP5 != null)
                        {
                            manaGained += proc.CalculateMP5(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) / 5.0f * character.BossOptions.BerserkTimer * 60.0f;
                        }
                    }
                }
                // Calculate stat-boosting trinkets, taking into effect interactions with other stat-boosting procs
                int sign = 1;
                float[] cachedDamages = new float[1 << activatedEffects.Count];
                float[] cachedUptimes = new float[1 << activatedEffects.Count];
                float[,] cachedDetails = new float[1 << activatedEffects.Count, NUM_SPELL_DETAILS];
                List<int> calculatedPairs = new List<int>();
                // Iterate over the entire set of trinket combinations (each trinket by itself, 2 at a time, ...)
                for (int i = 1; i <= activatedEffects.Count; ++i)
                {
                    // Create a new combination generator for this "level" of trinket interaction
                    CombinationGenerator gen = new CombinationGenerator(activatedEffects.Count, i);
                    // Iterate over all combinations
                    while (gen.HasNext())
                    {
                        float tempUpTime = 1.0f;
                        int[] vals = gen.GetNext();
                        int pairs = 0;
                        int lengthCounter = 0;
                        // Activate the trinkets, calculate the damage and uptime, then deactivate them
                        foreach (int idx in vals)
                        {
                            pairs |= 1 << idx;
                            ++lengthCounter;
                            activatedEffects[idx].Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        currentCrit = (float)Math.Min(1.0f, currentCrit);
                        float tempDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency) / rot.RotationData.Duration;
                        spellDetails[0] = rot.RotationData.StarfireAvgHit;
                        spellDetails[1] = rot.RotationData.WrathAvgHit;
                        spellDetails[2] = rot.RotationData.MoonfireAvgHit;
                        spellDetails[3] = rot.RotationData.InsectSwarmAvgHit;
                        spellDetails[4] = rot.RotationData.StarSurgeAvgHit;
                        spellDetails[5] = rot.RotationData.StarfireAvgCast;
                        spellDetails[6] = rot.RotationData.WrathAvgCast;
                        spellDetails[7] = rot.RotationData.MoonfireAvgCast;
                        spellDetails[8] = rot.RotationData.InsectSwarmAvgCast;
                        spellDetails[9] = rot.RotationData.StarSurgeAvgCast;
                        spellDetails[10] = rot.RotationData.AverageInstantCast;
                        spellDetails[11] = rot.RotationData.StarfireAvgEnergy;
                        spellDetails[12] = rot.RotationData.WrathAvgEnergy;
                        spellDetails[13] = rot.RotationData.StarSurgeAvgEnergy;
                        spellDetails[14] = rot.RotationData.TreantDamage;
                        spellDetails[15] = rot.RotationData.StarfallDamage;
                        spellDetails[16] = rot.RotationData.MushroomDamage;
                        foreach (int idx in vals)
                        {
                            tempUpTime *= activatedEffects[idx].UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            activatedEffects[idx].Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        if (tempUpTime == 0) continue;
                        // Adjust previous probability tables by the current factor
                        // At the end of the algorithm, this ensures that the probability table will contain the individual
                        // probabilities of each effect or set of effects.
                        // These adjustments only need to be made for higher levels of the table, and if the current probability is > 0.
                        if (lengthCounter > 1)
                        {
                            foreach (int subset in calculatedPairs)
                            {
                                // Truly a subset?
                                if ((pairs & subset) != subset)
                                {
                                    continue;
                                }

                                // Calculate the "layer" of the current subset by getting the set bit count.
                                int subsetLength = 0;
                                for (int j = subset; j > 0; ++subsetLength)
                                {
                                    j &= --j;
                                }

                                // Set the sign of the operation: Evenly separated layers are added, oddly separated layers are subtracted
                                int newSign = ((lengthCounter - subsetLength) % 2 == 0) ? 1 : -1;

                                // Adjust by current uptime * sign of operation.
                                cachedUptimes[subset] += newSign * tempUpTime;
                            }
                        }
                        // Cache the results to be calculated later
                        cachedUptimes[pairs] = tempUpTime;
                        cachedDamages[pairs] = tempDPS;
                        for (int idx = 0; idx < NUM_SPELL_DETAILS; ++idx)
                        {
                            cachedDetails[pairs, idx] = spellDetails[idx];
                        }
                        calculatedPairs.Add(pairs);
                        totalUpTime += sign * tempUpTime;
                    }
                    sign = -sign;
                }
                float accumulatedDPS = 0.0f;
                Array.Clear(spellDetails, 0, spellDetails.Length);
                // Apply the above-calculated probabilities to the previously stored damage calculations and add to the result.
                for (int idx = 0; idx < cachedUptimes.Length; ++idx)
                {
                    if (cachedUptimes[idx] == 0) continue;
                    accumulatedDPS += cachedUptimes[idx] * cachedDamages[idx];
                    for (int i = 0; i < NUM_SPELL_DETAILS; ++i)
                    {
                        spellDetails[i] += cachedUptimes[idx] * cachedDetails[idx,i];
                    }
                }
                float damageDone = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);
                accumulatedDPS += (1 - totalUpTime) * damageDone / rot.RotationData.Duration;
                spellDetails[0] += (1 - totalUpTime) * rot.RotationData.StarfireAvgHit;
                spellDetails[1] += (1 - totalUpTime) * rot.RotationData.WrathAvgHit;
                spellDetails[2] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgHit;
                spellDetails[3] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgHit;
                spellDetails[4] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgHit;
                spellDetails[5] += (1 - totalUpTime) * rot.RotationData.StarfireAvgCast;
                spellDetails[6] += (1 - totalUpTime) * rot.RotationData.WrathAvgCast;
                spellDetails[7] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgCast;
                spellDetails[8] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgCast;
                spellDetails[9] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgCast;
                spellDetails[10] += (1 - totalUpTime) * rot.RotationData.AverageInstantCast;
                spellDetails[11] += (1 - totalUpTime) * rot.RotationData.StarfireAvgEnergy;
                spellDetails[12] += (1 - totalUpTime) * rot.RotationData.WrathAvgEnergy;
                spellDetails[13] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgEnergy;
                spellDetails[14] += (1 - totalUpTime) * rot.RotationData.TreantDamage;
                spellDetails[15] += (1 - totalUpTime) * rot.RotationData.StarfallDamage;
                spellDetails[16] += (1 - totalUpTime) * rot.RotationData.MushroomDamage;

                float burstDPS = accumulatedDPS + accumulatedDamage / rot.RotationData.Duration;
                float sustainedDPS = burstDPS;

                // Mana calcs:
                // Main rotation - all spells
                // Movement rotation - Lunar Shower MF, IS, Shooting Stars procs, and Starfall only
                rot.RotationData.ManaGained += manaGained / (character.BossOptions.BerserkTimer * 60.0f) * rot.RotationData.Duration;
                float timeToOOM = manaPool / ((rot.RotationData.ManaUsed - rot.RotationData.ManaGained) / rot.RotationData.Duration);
                if (timeToOOM <= 0) timeToOOM = character.BossOptions.BerserkTimer * 60.0f;   // Happens when ManaUsed is less than 0
                if (timeToOOM < character.BossOptions.BerserkTimer * 60.0f)
                {
                    rot.RotationData.TimeToOOM = new TimeSpan(0, (int)(timeToOOM / 60), (int)(timeToOOM % 60));
                    sustainedDPS = burstDPS * timeToOOM / (character.BossOptions.BerserkTimer * 60.0f);
                }
                
                burstDPS += currentTrinketDPS;
                sustainedDPS += currentTrinketDPS;

                rot.RotationData.SustainedDPS = sustainedDPS;
                rot.RotationData.BurstDPS = burstDPS;
                rot.RotationData.StarfireAvgHit = spellDetails[0];
                rot.RotationData.WrathAvgHit = spellDetails[1];
                rot.RotationData.MoonfireAvgHit = spellDetails[2];
                rot.RotationData.InsectSwarmAvgHit = spellDetails[3];
                rot.RotationData.StarSurgeAvgHit = spellDetails[4];
                rot.RotationData.StarfireAvgCast = spellDetails[5];
                rot.RotationData.WrathAvgCast = spellDetails[6];
                rot.RotationData.MoonfireAvgCast = spellDetails[7];
                rot.RotationData.InsectSwarmAvgCast = spellDetails[8];
                rot.RotationData.StarSurgeAvgCast = spellDetails[9];
                rot.RotationData.AverageInstantCast = spellDetails[10];
                rot.RotationData.StarfireAvgEnergy = spellDetails[11];
                rot.RotationData.WrathAvgEnergy = spellDetails[12];
                rot.RotationData.StarSurgeAvgEnergy = spellDetails[13];
                rot.RotationData.TreantDamage = spellDetails[14];
                rot.RotationData.StarfallDamage = spellDetails[15];
                rot.RotationData.MushroomDamage = spellDetails[16];

                // Update the sustained DPS rotation if any one of the following three cases is true:
                // 1) No user rotation is selected and sustained DPS is maximum
                // 2) A user rotation is selected, Eclipse is not present, and the user rotation matches the current rotation
                // 3) A user rotation is selected, Eclipse is present, and the user rotation's dot spells matches this rotation's
                if ((calcOpts.UserRotation == "None" && sustainedDPS > maxDamageDone) || rot.RotationData.Name == calcOpts.UserRotation)
                {
                    maxDamageDone = sustainedDPS;
                    maxRotation = rot;
                }
                if (burstDPS > maxBurstDamageDone)
                {
                    maxBurstDamageDone = burstDPS;
                    maxBurstRotation = rot;
                }
                cachedResults[rotationIndex - 1] = rot.RotationData;

                // Deactivate always-up procs
                foreach (ProcEffect proc in alwaysUpEffects)
                {
                    proc.Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                }

                ++rotationIndex;
            }
            // Present the findings to the user.
            calcs.SelectedRotation = maxRotation.RotationData;
            calcs.BurstRotation = maxBurstRotation.RotationData;
            calcs.SubPoints = new float[] { maxBurstDamageDone, maxDamageDone };
            calcs.OverallPoints = calcs.SubPoints[0] + calcs.SubPoints[1];
            calcs.Rotations = cachedResults;
        }

        // Create proc effect calculations for proc-based trinkets.
        private void BuildProcList(CharacterCalculationsMoonkin calcs)
        {
            // Implement a new handler for each special effect in the calculations stats
            foreach (SpecialEffect effect in calcs.BasicStats.SpecialEffects())
            {
                procEffects.Add(new ProcEffect(effect));
            }
        }

        // Non-rotation-specific mana calculations
        private float GetEffectiveManaPool(Character character, CalculationOptionsMoonkin calcOpts, CharacterCalculationsMoonkin calcs)
        {
            float fightLength = character.BossOptions.BerserkTimer * 60.0f;

            float innervateCooldown = 180;

            // Mana/5 calculations
            float totalManaRegen = calcs.ManaRegen * fightLength;

            // Mana pot calculations
            float manaRestoredByPots = 0.0f;
            foreach (Buff b in character.ActiveBuffs)
            {
                if (b.Stats.ManaRestore > 0)
                {
                    manaRestoredByPots = b.Stats.ManaRestore;
                    break;
                }
            }

            // Innervate calculations
            float innervateDelay = calcOpts.InnervateDelay * 60.0f;
            int numInnervates = (calcOpts.Innervate && fightLength - innervateDelay > 0) ? ((int)(fightLength - innervateDelay) / (int)innervateCooldown + 1) : 0;
            float totalInnervateMana = numInnervates * 0.2f * calcs.BasicStats.Mana;
            totalInnervateMana *= 1 + 0.15f * character.DruidTalents.Dreamstate;

            // Replenishment calculations
            float replenishmentPerTick = calcs.BasicStats.Mana * calcs.BasicStats.ManaRestoreFromMaxManaPerSecond;
            float replenishmentMana = calcOpts.ReplenishmentUptime * replenishmentPerTick * character.BossOptions.BerserkTimer * 60;

            return calcs.BasicStats.Mana + totalInnervateMana + totalManaRegen + manaRestoredByPots + replenishmentMana;
        }

        /*private void RecreateRotations()
        {
            rotations[0] = new SpellRotation() { RotationData = new RotationData() { Name = "None" } };
            for (int mfMode = 0; mfMode < 2; ++mfMode)
            {
                for (int isMode = 0; isMode < 2; ++isMode)
                {
                    for (int sfMode = 0; sfMode < 3; ++sfMode)
                    {
                        for (int wmMode = 0; wmMode < 3; ++wmMode)
                        {
                            int index = 1 + (wmMode + 3 * sfMode + 9 * isMode + 18 * mfMode);
                            DotMode mfModeEnum = (DotMode)mfMode;
                            DotMode isModeEnum = (DotMode)isMode;
                            StarfallMode sfModeEnum = (StarfallMode)sfMode;
                            MushroomMode wmModeEnum = (MushroomMode)wmMode;
                            string name = String.Format("MF {0} IS {1} SF {2} WM {3}",
                                mfModeEnum.ToString(),
                                isModeEnum.ToString(),
                                sfModeEnum.ToString(),
                                wmModeEnum.ToString());
                            rotations[index] = new SpellRotation()
                            {
                                RotationData = new RotationData()
                                {
                                    Name = name,
                                    MoonfireRefreshMode = mfModeEnum,
                                    InsectSwarmRefreshMode = isModeEnum,
                                    StarfallCastMode = sfModeEnum,
                                    WildMushroomCastMode = wmModeEnum
                                }
                            };
                        }
                    }
                }
            }
        }*/

        // Add talented effects to the spells
        private void UpdateSpells(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            DruidTalents talents = character.DruidTalents;
            StatsMoonkin stats = calcs.BasicStats;

            switch (talents.StarlightWrath)
            {
                case 1:
                    Starfire.BaseCastTime -= 0.15f;
                    Wrath.BaseCastTime -= 0.15f;
                    break;
                case 2:
                    Starfire.BaseCastTime -= 0.25f;
                    Wrath.BaseCastTime -= 0.25f;
                    break;
                case 3:
                    Starfire.BaseCastTime -= 0.5f;
                    Wrath.BaseCastTime -= 0.5f;
                    break;
                default:
                    break;
            }

            float moonfireDotGlyph = talents.GlyphOfMoonfire ? 0.2f : 0.0f;
            float insectSwarmGlyph = talents.GlyphOfInsectSwarm ? 0.3f : 0.0f;
            // Add spell-specific damage
            // Moonfire, Insect Swarm: glyphs
            Moonfire.DotEffect.AllDamageModifier *= 1 + moonfireDotGlyph;
            InsectSwarm.DotEffect.AllDamageModifier *= 1 + insectSwarmGlyph;
            // Moonfire: Direct damage +(0.03 * Blessing of the Grove)
            Moonfire.AllDamageModifier *= 1 + 0.03f * talents.BlessingOfTheGrove;
            // Moonfire, Insect Swarm: +2/4/6 seconds for Genesis
            Moonfire.DotEffect.BaseDuration += 2f * talents.Genesis;
            InsectSwarm.DotEffect.BaseDuration += 2f * talents.Genesis;
            // Wrath: 10% for glyph
            Wrath.AllDamageModifier *= 1 + (talents.GlyphOfWrath ? 0.1f : 0f);

            // Add spell-specific critical strike damage
            // Burning Shadowspirit Diamond
            float baseCritMultiplier = 1.5f * (1 + stats.BonusCritDamageMultiplier);
            float moonfuryMultiplier = baseCritMultiplier + (baseCritMultiplier - 1);
            Starfire.CriticalDamageModifier = Wrath.CriticalDamageModifier = Moonfire.CriticalDamageModifier = InsectSwarm.CriticalDamageModifier = moonfuryMultiplier;
            Starsurge.CriticalDamageModifier = moonfuryMultiplier;

            // Reduce spell-specific mana costs
            // Shard of Woe (Mana cost -405)
            Starfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Moonfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Wrath.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            InsectSwarm.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            Starsurge.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            // All spells: Mana cost -(0.03 * Moonglow)
            Starfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Moonfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Wrath.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            InsectSwarm.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Starsurge.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);

            // Add set bonuses
            Moonfire.CriticalChanceModifier += stats.BonusCritChanceMoonfire;
            InsectSwarm.CriticalChanceModifier += stats.BonusCritChanceInsectSwarm;
            Starfire.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Wrath.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Starsurge.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;

            // Dragonwrath, Tarecgosa's Rest: X% chance on damaging spell cast to proc a duplicate version of the spell.
            // If it duplicates a DoT tick, it fires Wrath of Tarecgosa for an equivalent amount of damage.
            // Wrath, Starfire, and Starsurge will duplicate the Eclipse energy gained.
            if (calcs.BasicStats.DragonwrathProc > 0)
            {
                Starfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Wrath.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Starsurge.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                InsectSwarm.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
            }

            // PTR changes go here
            if (((CalculationOptionsMoonkin)character.CalculationOptions).PTRMode)
            {
            }
        }
    }
}
