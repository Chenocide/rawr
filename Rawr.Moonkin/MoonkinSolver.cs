using System;
using System.Collections.Generic;

namespace Rawr.Moonkin
{
    // The interface public class to the rest of Rawr.  Provides a single Solve method that runs all the calculations.
    public class MoonkinSolver
    {
        private const int NUM_SPELL_DETAILS = 17;
        // A list of all currently active proc effects.
        public List<ProcEffect> procEffects;
        public static float BaseMana = 18635f;
        public static float OOC_PROC_CHANCE = 0.0583f;
        public static float EUPHORIA_PERCENT = 0.08f;
        public static float DRAGONWRATH_PROC_RATE = 0.11f;
        public static float ECLIPSE_BASE = 0.25f;

        #region Cast Distributions

        #region Base

        public static double[,] CastDistribution = new double[21, 12] {
{ 0.114305579697549, 0.169589911597657, 0.0376804509851845, 0.0293302721775706, 0.14696459406304, 0.205973841941657, 0.0420095981703653, 0.0331042466477433, 0.047976028397455, 0.0830673204269501, 0.0591246588626018, 0.030873497032226, },
{ 0.117076266166084, 0.170855880489192, 0.0360865383828526, 0.0296170805357307, 0.149031467047322, 0.209652880835383, 0.039336922376824, 0.0333675372901998, 0.0449067473709266, 0.0801343916635327, 0.0587787408413391, 0.031155547000613, },
{ 0.121896477699051, 0.175064953795721, 0.0338750901617614, 0.0299220300306768, 0.152106644149457, 0.214856053303014, 0.0374567815225452, 0.0344265839044836, 0.0442676974770909, 0.0721330624787452, 0.0536132291149939, 0.0303813963624604, },
{ 0.125359464241088, 0.177462620038738, 0.0312607095304942, 0.0301908364337307, 0.153723020782769, 0.217363750773166, 0.0356469172391482, 0.0345879236654265, 0.0394553902756903, 0.0699186947644215, 0.0550270276151094, 0.030003644640219, },
{ 0.128409021115246, 0.180845571662161, 0.0307573838464489, 0.0304113248915614, 0.156052019222858, 0.222164634252333, 0.0331561851411063, 0.0358331083249993, 0.0406472244014875, 0.0636481943515762, 0.0485305314098114, 0.0295448013804116, },
{ 0.131137729173667, 0.184345741743616, 0.0277178019254324, 0.030345523543672, 0.157820902127129, 0.224836543042852, 0.0325764650239911, 0.0357865386948759, 0.0352542939724232, 0.061394734622694, 0.0496621906546042, 0.029121535475043, },
{ 0.133905785614558, 0.186984796274335, 0.0270245125637371, 0.0307038594277607, 0.159777540864255, 0.228336055176893, 0.0303495539237804, 0.0364845493785013, 0.0344815653328968, 0.0563095528057615, 0.0477951736190138, 0.0278470550185072, },
{ 0.135960204879684, 0.189156925041526, 0.0257098757805044, 0.0307896577034588, 0.161163157722493, 0.230729414687675, 0.0292910625946306, 0.0364939099119797, 0.0281954678818569, 0.0559398478162575, 0.0498774769263239, 0.0266929990536103, },
{ 0.138034954553437, 0.191580996835578, 0.0240234431320512, 0.0313860548858691, 0.162451954784497, 0.233824772290709, 0.0281435404223363, 0.0371111968356029, 0.0298114552095512, 0.0524647503406187, 0.0462635033091593, 0.02490337740059, },
{ 0.140328504776377, 0.192568873259802, 0.0233036354952266, 0.0318441143078977, 0.163715644657554, 0.235089355851108, 0.0267198023877328, 0.0367820808948123, 0.0229468328313628, 0.0526557966453899, 0.0497070326211485, 0.0243383262715883, },
{ 0.142813008316833, 0.19582732532637, 0.0214521377483585, 0.0319370162488528, 0.165274920482005, 0.238504099946321, 0.0255523741010032, 0.038010048322764, 0.0336868355880979, 0.0529048010341835, 0.0354644979719242, 0.0185729349132869, },
{ 0.142757973568694, 0.196196066977326, 0.0209982407968267, 0.0320105810141424, 0.165199598737775, 0.239313380022469, 0.024474302085534, 0.0381384016829364, 0.0322387421212226, 0.0522216146296126, 0.0368988671042018, 0.0195522312592587, },
{ 0.144653853653127, 0.197330619654206, 0.0188654633578325, 0.0322604286588877, 0.165795235093362, 0.239304321267369, 0.0248068253453873, 0.0386450435890012, 0.0354546677568651, 0.0520297825981235, 0.0327112945076631, 0.0181424645181758, },
{ 0.145589066066209, 0.199473247601411, 0.016671834767255, 0.0326787888697316, 0.166344285767966, 0.241050856345219, 0.0246011168419723, 0.0390679663242095, 0.0421545625067129, 0.0452516971435573, 0.0246748860223583, 0.0224416917433978, },
{ 0.146789251307765, 0.200267893281598, 0.0166998339996687, 0.032982425654224, 0.167382706761781, 0.242589011700291, 0.0232051427654084, 0.0393854785574366, 0.034135205732818, 0.0411575577115864, 0.0299178452063989, 0.0254876473210245, },
{ 0.147766612976552, 0.200586939155541, 0.0173721522515636, 0.032932210668423, 0.168615924261257, 0.244268296931939, 0.0220461096915484, 0.0380610018768452, 0.0363779909990349, 0.0440424752192206, 0.0273994842558672, 0.0205308017122067, },
{ 0.148473612711901, 0.201336577599996, 0.0159093614168305, 0.0335598795704109, 0.168954075547219, 0.244236931908066, 0.0224169786636735, 0.0387401598529534, 0.0331951757855168, 0.0426387036995186, 0.028884519675272, 0.0216540235686431, },
{ 0.149210655525411, 0.202051385640301, 0.014917495577531, 0.0337193639644522, 0.1693886142797, 0.243994292039956, 0.0225988418081073, 0.039407424148031, 0.0331894676737263, 0.0421895046734673, 0.0290563966052238, 0.0202765580640936, },
{ 0.14976967578208, 0.201955049693101, 0.0149094338714915, 0.0341818979998477, 0.169618351367713, 0.2448552906415, 0.0217647365403659, 0.0401564961853178, 0.0303385505410314, 0.0414019307944883, 0.0298691822588211, 0.021179404324242, },
{ 0.149818272881033, 0.202406366840163, 0.0148132734539149, 0.0348095773091223, 0.169974000571076, 0.245275827313386, 0.0209578633473868, 0.0411769993845778, 0.0290197531047516, 0.0412199404804306, 0.0313259307432361, 0.0192021945709211, },
{ 0.150598749113931, 0.202149531688219, 0.014733950590895, 0.0348677283920914, 0.170814149666898, 0.24586443067385, 0.0206769021531108, 0.0402315660334027, 0.0295042884255757, 0.0415033300293186, 0.0297427938841593, 0.019312579348549, },
};
        public static double[,] CastDistributionGoSF = new double[21, 12] {
{ 0.123072952537203, 0.174602965711971, 0.0409761245710158, 0.0267154615628697, 0.155554385764817, 0.214122335253252, 0.0437865468216055, 0.0279099275753309, 0.0447031875335401, 0.0835625392062677, 0.0330303209759564, 0.0319632524861709, },
{ 0.128216241306818, 0.17631280433447, 0.0400537220898361, 0.0254652780963741, 0.157739822083809, 0.217381596855836, 0.0403412234279407, 0.0288253375397046, 0.057934398239729, 0.0832082486616705, 0.0122269029647001, 0.0322944243991123, },
{ 0.132154468915001, 0.180027761294897, 0.0390057029856691, 0.0266538313640897, 0.160497325832683, 0.221512737718812, 0.0380463390982735, 0.0287365852425107, 0.0635321207113906, 0.0737399954749155, 0.00643166219357576, 0.0296614691681824, },
{ 0.132875162955743, 0.182397425405106, 0.0337549204248394, 0.0282933180573689, 0.160803082375247, 0.222223271594424, 0.0381958816772775, 0.0285777883872926, 0.0643187904458352, 0.0731959907758012, 0.0053639021969186, 0.0300004657041463, },
{ 0.134667836742944, 0.185551336207548, 0.0332644861400197, 0.0298554683135461, 0.163079825697756, 0.227563387281911, 0.0349726256090813, 0.0286393062052275, 0.0575011877104055, 0.0634729333913037, 0.0118381311499022, 0.0295934755503552, },
{ 0.136090438705067, 0.188374724185319, 0.029482275698424, 0.0303347770164699, 0.164088555550188, 0.230224251719959, 0.0351078094350077, 0.0290738254914587, 0.0360090588790206, 0.0618662466646311, 0.029801058897929, 0.0295469777565256, },
{ 0.139506810793432, 0.191316306259239, 0.0284587273847009, 0.030136443963153, 0.165996593788661, 0.233952329333714, 0.0330541528950081, 0.0297456963453829, 0.0328080009036887, 0.0580121726436479, 0.0294647870954988, 0.0275479785938734, },
{ 0.141998987757402, 0.193790438637102, 0.0273393723145813, 0.0295193992127093, 0.167336676801308, 0.235823344257898, 0.0318346089517371, 0.0302101075232916, 0.0306524377225817, 0.0554583533019834, 0.0276708145811252, 0.0283654589382799, },
{ 0.144579045476035, 0.195854902110973, 0.0256620372143425, 0.0297498764732953, 0.168690830394538, 0.238903472120635, 0.0304784172006934, 0.0303725640753579, 0.0316129165926344, 0.0537191426524684, 0.0253346835989812, 0.0250421120900467, },
{ 0.146139866885115, 0.196842825365063, 0.0256222152019782, 0.0300122971553686, 0.16955158484522, 0.240593731692808, 0.0285036148811413, 0.0305653298630876, 0.0289454378759925, 0.0530054393487358, 0.0251350286971323, 0.0250826281883573, },
{ 0.147056023725825, 0.199606830530159, 0.023036433080498, 0.0318404120210221, 0.170913411499447, 0.243182801583905, 0.0277376266223211, 0.0309242640059315, 0.0236735500560167, 0.0537298474334056, 0.0295337866125912, 0.0187650128288789, },
{ 0.147621698817762, 0.200260413883102, 0.0218952609645933, 0.0317518114182437, 0.170951710849734, 0.24311740072229, 0.0271665101286524, 0.0312021468867215, 0.0237055173724664, 0.0523836921004923, 0.0296774697260438, 0.0202663671298984, },
{ 0.148839975738988, 0.200640506382444, 0.0215889167370481, 0.0319257472123606, 0.171577480356419, 0.243902141417667, 0.0257312232990441, 0.0318561044314795, 0.0246765668388244, 0.0606687617824362, 0.0268457380172113, 0.0117468377860779, },
{ 0.150095762525815, 0.20310473783487, 0.0194831647629395, 0.0318733781476635, 0.172315308598134, 0.24585525873735, 0.025734751923609, 0.0324115655985474, 0.0204576151414398, 0.0476446292214146, 0.0300577799518791, 0.0209660475563379, },
{ 0.151562197725551, 0.20366542062723, 0.0199298354585983, 0.0316443122738499, 0.17328800427511, 0.247323827402862, 0.0239572697248852, 0.0325160555174331, 0.0225130756064574, 0.0448254301351847, 0.0257856641557917, 0.0229889070970462, },
{ 0.152614722323773, 0.204319489747783, 0.0199551785875502, 0.0315080785200828, 0.174226267802187, 0.248701519265734, 0.0233267869871754, 0.0314783302536449, 0.0223331741576498, 0.0457844477928808, 0.0260065149740024, 0.0197454895875367, },
{ 0.15326345455773, 0.205092125160471, 0.0179480736635798, 0.0323048473007127, 0.174498866233871, 0.248193816900958, 0.0238214238396981, 0.0324233254804737, 0.022312273760738, 0.0451626232307588, 0.02502843933171, 0.0199507305392991, },
{ 0.153889248177715, 0.205380164675231, 0.0173082691009272, 0.0324841818901967, 0.174855961770449, 0.248387189559463, 0.0235832713090035, 0.0328643064185856, 0.0223894363596836, 0.0438845637019088, 0.0253938430599984, 0.0195795639768384, },
{ 0.153969201804984, 0.205048693283036, 0.0171799275234844, 0.0337006539002701, 0.175151545551471, 0.249053600205849, 0.0225412402606566, 0.0335596363374788, 0.0220391322719303, 0.0430629584406184, 0.0243542214665562, 0.0203391889536649, },
{ 0.154501537810439, 0.205528549368312, 0.01673947455814, 0.0341269899733286, 0.175619072260188, 0.249376354016385, 0.0219483224248474, 0.0340928825597997, 0.021724807865775, 0.0427492028401183, 0.0248391779951884, 0.0187536283274784, },
{ 0.154993473048152, 0.205701948246026, 0.0162650706666747, 0.0344481687296294, 0.176316858475888, 0.249443220769261, 0.021883907957242, 0.0338540051254997, 0.0211220251226878, 0.0414933486928498, 0.0245085923777103, 0.0199693807883796, },
};
        public static double[] BaseRotationDurations = new double[21] { 61.6587503022772, 58.299074469092, 54.5423879305478, 51.7096787460619, 48.9091319243155, 46.2869871072463, 44.0803669698996, 42.1352433915971, 40.4071002642576, 38.8994809031847, 37.2701421475626, 36.1961077725363, 35.1369274721292, 34.0394818661533, 33.0352634636465, 32.3244137336702, 31.823380873281, 31.4183837269664, 30.9739504269368, 30.5956986798321, 30.2261282645962, };
        public static double[] BaseRotationDurationsGoSF = new double[21] { 60.3102574161489, 57.0065019402546, 53.4988726284581, 50.943211241336, 48.2062265016103, 45.8073317302415, 43.6079060557413, 41.7037923050796, 40.034327259176, 38.5376914365547, 37.0905645489681, 35.9924554015174, 35.0382378511706, 33.7839946657207, 32.781857916304, 32.0604186357245, 31.5336368227424, 31.1098506316635, 30.6686817831539, 30.2437894051069, 29.8541760782606, };
        public static double[] BaseNGUptimes = new double[21] { 0.479809850367868, 0.488655521507456, 0.538610494869139, 0.565379506255321, 0.581712971353124, 0.640655911273445, 0.656385153143012, 0.697521687319103, 0.717845699609885, 0.745247320949868, 0.77975215982765, 0.794749470411639, 0.797670984576976, 0.823859634026635, 0.834974829887993, 0.8178140195565, 0.829169005869017, 0.813598530385962, 0.829946114345952, 0.805574018061642, 0.829303433916011, };
        public static double[] BaseNGUptimesGoSF = new double[21] { 0.490752761915844, 0.502092817303903, 0.545149982969033, 0.566576149150502, 0.585055799747085, 0.626265323137753, 0.644763543954998, 0.68312320331475, 0.699835901443933, 0.723095956592677, 0.734812656430444, 0.751792776824768, 0.733241491710133, 0.782499543713848, 0.793799642631908, 0.780028823595509, 0.789579102746935, 0.78672271889395, 0.791638631282714, 0.787998026472904, 0.786089467040319, };
        public static double[] BasePercentMoonfiresExtended = new double[21] { 0.737961173546571, 0.906684817509351, 0.929641303749065, 0.90891940540038, 0.805081135190921, 0.66455917389057, 0.746081565187453, 0.830209405744698, 0.864642132955008, 0.927465675954242, 0.919171695046661, 0.923093252150271, 0.944340158238949, 0.935644079807597, 0.981257894736982, 0.982590116959208, 0.995960058479569, 0.992373625731058, 0.995465929824602, 0.990976807017621, 0.997936432748555, };

        #endregion

        #region 4T12

        public static double[,] T12CastDistribution = new double[21, 12] {
{ 0.10126843791078, 0.156710810039523, 0.0342025747056527, 0.0265548886976585, 0.15860285251618, 0.22209691855825, 0.0449484504276791, 0.035957989054324, 0.0422201115869835, 0.0802310117202693, 0.0639333328191415, 0.0332726219635592, },
{ 0.105555561150212, 0.157055326342474, 0.0330427692476048, 0.0265928574809342, 0.160676635673388, 0.225449164208654, 0.0418773474479806, 0.0363369590064964, 0.0397791833793046, 0.0770399320853445, 0.0630330379018963, 0.0335612260757098, },
{ 0.10860854899413, 0.161810074123658, 0.0308536853468784, 0.0270050957963781, 0.163779650283337, 0.231385085361972, 0.0402394007107209, 0.0373978297748071, 0.0395132579299845, 0.0687519072322246, 0.057320162356732, 0.0333353020891781, },
{ 0.111734377709987, 0.164847855833574, 0.0278700307421279, 0.0273553872485266, 0.165622581378769, 0.234250045890067, 0.0384748150557451, 0.0374125577612947, 0.0343269970536813, 0.0655911292391572, 0.0587034020296521, 0.0338108200574174, },
{ 0.114206707901627, 0.168344372248108, 0.028024992333165, 0.0276627076443692, 0.1682563087468, 0.238997114555864, 0.0354923937179009, 0.0384849301517775, 0.0349443938730815, 0.0616609720410922, 0.0533092478919707, 0.030615858894244, },
{ 0.116628075439452, 0.172043635586272, 0.0250469011718188, 0.0274640311240828, 0.170049955809899, 0.242209117652839, 0.0347274387654992, 0.0384238265446282, 0.0293769796649187, 0.0589903562226887, 0.0545263854703004, 0.0305132965476015, },
{ 0.119054215305694, 0.173749932133133, 0.0245204815899259, 0.0280528773494049, 0.172254803480784, 0.246155549399048, 0.0324599426188128, 0.0389508691671498, 0.0268568275262968, 0.0548872706448355, 0.054086142933131, 0.0289710878517843, },
{ 0.121169806646322, 0.176089704625681, 0.0232593494259309, 0.0279682058891543, 0.173933721152836, 0.248863083722868, 0.0313748300027001, 0.0389343248020201, 0.0183930989673016, 0.0550369614002356, 0.0581071918580427, 0.0268697215069074, },
{ 0.122398788672567, 0.178626736412596, 0.0214470823911631, 0.0284706991162543, 0.175095051863309, 0.252076200007852, 0.0303698287608053, 0.0397200054496443, 0.0252498953577227, 0.0524847017975088, 0.049700558785453, 0.0243604513851241, },
{ 0.124370446100223, 0.179018944514689, 0.0215183801184782, 0.0284297731941326, 0.176103768222586, 0.25270369478425, 0.0279268591113961, 0.0401001988570157, 0.0370172225290928, 0.0556808149273745, 0.0365288891880641, 0.020601008452699, },
{ 0.126138357251464, 0.183067607019055, 0.0169754383142641, 0.0291697616848551, 0.177736429738461, 0.255639442830663, 0.0293538111983466, 0.0411667070192521, 0.0383492891203442, 0.0456657208824224, 0.0309785001656793, 0.0257589347751936, },
{ 0.126132329712087, 0.183395893278421, 0.0166951559453351, 0.0292203799609121, 0.177712066642677, 0.256213831586389, 0.0282158436086077, 0.0412142377117581, 0.0394590500841065, 0.0465504754843215, 0.0301886146042683, 0.0250021213811167, },
{ 0.127635266894897, 0.184969365214198, 0.0154886217639252, 0.0292735498288269, 0.178838612889939, 0.25742607523131, 0.0276553589387829, 0.0417866515157773, 0.0334127341141697, 0.0428378002783864, 0.0336216913705788, 0.0270542719592087, },
{ 0.128320069433849, 0.186322715577272, 0.0142423713635624, 0.0294860696316661, 0.17947440611626, 0.259572999286561, 0.0270131488435978, 0.0421250403378768, 0.0333711754342836, 0.0450098839110243, 0.0324179718429643, 0.0226441482210823, },
{ 0.128881610486871, 0.186946336479388, 0.0146016096976471, 0.0298414245712192, 0.180460938995627, 0.261444952403908, 0.0251857476753878, 0.0424581351162693, 0.0302801906296677, 0.0428947681360281, 0.0337079838038372, 0.0232963020041498, },
{ 0.12987952285924, 0.187598612421847, 0.0146975517085447, 0.0298421873566382, 0.181993883777018, 0.262868050640295, 0.0245452769257992, 0.0409913302989789, 0.0294454848413354, 0.0430927067358735, 0.0337032271964663, 0.0213421652379642, },
{ 0.13022865767536, 0.188069827155152, 0.0139869841108359, 0.0303592830142626, 0.182341472771041, 0.263562406522059, 0.0241047680761885, 0.0418424304958395, 0.029617893238666, 0.0432456928521179, 0.0320940848254452, 0.0205464992630334, },
{ 0.130531157530658, 0.188318198514746, 0.013538183175858, 0.0304266546928233, 0.182659732542357, 0.263349968403662, 0.0236918708623813, 0.0428922425532296, 0.0297850694450383, 0.0404328492049303, 0.032191039276547, 0.0221830337977692, },
{ 0.130967766702069, 0.188385945160481, 0.0133526476729341, 0.0309160081141184, 0.183022880882804, 0.264035801587579, 0.0230999273243732, 0.0434571633452471, 0.0286107005565686, 0.0405280726107397, 0.031622512335864, 0.0220005737072217, },
{ 0.131305670884817, 0.188787012405837, 0.0130649628322104, 0.0312229321532457, 0.183493623051488, 0.264453571339781, 0.0226540039281008, 0.0443223031598836, 0.02661681127713, 0.040080650374164, 0.0336838127439525, 0.0203146458493897, },
{ 0.131653522643701, 0.188393237071426, 0.0132439344018915, 0.0317466408776934, 0.184206841287825, 0.265235791474463, 0.0218028849112314, 0.043749774084834, 0.0271496488224454, 0.0398807497408456, 0.0318489749968481, 0.0210879996867956, },
};
        public static double[,] T12CastDistributionGoSF = new double[21, 12] {
{ 0.11192456147344, 0.160476672703158, 0.0387744347527722, 0.0229206984817226, 0.168350685685859, 0.231694688970253, 0.0459927628828289, 0.0307149897389008, 0.0613242691721531, 0.0802931230880614, 0.0129602239513213, 0.0345728890995291, },
{ 0.113087017952099, 0.162235098918489, 0.0368508707206752, 0.0247158333064491, 0.169590113805435, 0.233038543018468, 0.0425094016880544, 0.0300479372483069, 0.0674354526113642, 0.0797243374069067, 0.00609908603901792, 0.0346663072847342, },
{ 0.114444388589266, 0.166030316595132, 0.0364105547137382, 0.0264595556640742, 0.172095710242483, 0.238939358032493, 0.0391584699191935, 0.0303548958261021, 0.0620954788424573, 0.0686200020586623, 0.0114772817039979, 0.0339139878124, },
{ 0.115788323331402, 0.169565562641076, 0.0296644209821207, 0.0274411696952877, 0.172884479460595, 0.2404915085135, 0.0417761794954246, 0.0303021964414457, 0.0405441847410334, 0.0678870778924163, 0.0299067316287725, 0.0337481651769253, },
{ 0.119479386696245, 0.173442063380149, 0.0293969451111457, 0.0270777939789004, 0.175594761303191, 0.245308563545148, 0.0386750033799451, 0.0313298375736501, 0.0328670220575943, 0.0621457781215065, 0.0336268918606561, 0.0310559529918692, },
{ 0.122584506835015, 0.176350045787114, 0.0276756541425343, 0.0261800528802393, 0.177462650196159, 0.248761384987364, 0.0370458852554764, 0.0316968311721748, 0.029679066902534, 0.0585137141721448, 0.0316740717073904, 0.0323761359618534, },
{ 0.124631716384621, 0.17820265842673, 0.0269439364823953, 0.0266370223398237, 0.179240263289062, 0.252935584357583, 0.0345506792979599, 0.0320619768903534, 0.0318194372546223, 0.0553622094399204, 0.027988219198134, 0.029626296638796, },
{ 0.125825837947832, 0.180481647243625, 0.0248192472838306, 0.0273333180066222, 0.18040706319007, 0.254674602338678, 0.0338836157279858, 0.0321072320868618, 0.0291088996686757, 0.0543640225773148, 0.027954851786248, 0.0290396621422572, },
{ 0.127078086315114, 0.18279171412872, 0.0221288185859019, 0.0279545850113542, 0.181516341626402, 0.256496467506388, 0.0332390697309232, 0.0324776477489725, 0.028871049354779, 0.0516160619414111, 0.0291513182389821, 0.0266788398110521, },
{ 0.128223352090401, 0.183257712787641, 0.0228177531219031, 0.0283877521232113, 0.182559000257479, 0.258044734948934, 0.03032566025794, 0.0331097304548211, 0.0217489298757285, 0.0577854715869708, 0.0340220589456144, 0.0197178435493556, },
{ 0.130504823168016, 0.187049850784425, 0.0196985571061109, 0.02801972575619, 0.184372550404397, 0.260838397168494, 0.0309707679888962, 0.0342825191021034, 0.0208822425586283, 0.0476635344917653, 0.0308999102897169, 0.0248171211812574, },
{ 0.130652367751469, 0.187446065414088, 0.01930811879868, 0.0281111459872668, 0.184415775009907, 0.261432627600434, 0.0298259417487954, 0.0342402445528383, 0.0204753511998015, 0.0481972654007548, 0.0314804372544009, 0.0244146592815635, },
{ 0.131998307950354, 0.188702306076854, 0.0179258492538401, 0.0280977000012961, 0.185488707825573, 0.262821544180775, 0.0293094193892085, 0.0347650057675385, 0.0209518516681169, 0.0460281302136336, 0.0283417198393044, 0.0255694578335061, },
{ 0.132594036238818, 0.190079701600231, 0.0167542619581443, 0.028335318879685, 0.186153194572722, 0.264780178685058, 0.0285747135596512, 0.0353809051637704, 0.0215082820245212, 0.0459774582495135, 0.0275957467436624, 0.0222662023242238, },
{ 0.133180950444473, 0.190403259661261, 0.0168955892175465, 0.0285643606261972, 0.186904534460725, 0.266122600017964, 0.026899162576187, 0.0353008632278134, 0.0205502584600181, 0.0443063085611341, 0.0275659095123927, 0.023306203234288, },
{ 0.134291843924458, 0.190953198617924, 0.0166551404938568, 0.0284582281973301, 0.188071194573369, 0.267469678894446, 0.0263607822149361, 0.0343074408690949, 0.0205655392728096, 0.0438453360680727, 0.0277874469276323, 0.0212341699460702, },
{ 0.134358767314225, 0.191637993579288, 0.015809802712038, 0.0293310106333508, 0.188570265681831, 0.267994777403769, 0.025914693570479, 0.0351755832473797, 0.0208024958452203, 0.0429411307896931, 0.0259139773614512, 0.0215495018612738, },
{ 0.134564131887734, 0.191775604573791, 0.0149901821065989, 0.0293001876804241, 0.188718852146076, 0.267739975070768, 0.0258367823955946, 0.0359594096186396, 0.0214556964810202, 0.0409872106960139, 0.0261392649938915, 0.0225327023494486, },
{ 0.134739301476572, 0.191648734015735, 0.0144561271291343, 0.0303044942489206, 0.189169312908982, 0.268258770040058, 0.0250753161274492, 0.0369128283446495, 0.0205113092702168, 0.0410667016110551, 0.0256432630852493, 0.0222138417419778, },
{ 0.135141467456106, 0.192149198038688, 0.0144134294458332, 0.0306195176733908, 0.18970425166291, 0.268975209527455, 0.0243138084144903, 0.037230008458278, 0.019950687609174, 0.0405872320954636, 0.0264222744104801, 0.0204929152077318, },
{ 0.135276770955406, 0.191882044043694, 0.0145660171514255, 0.0311273844158303, 0.190113996388105, 0.268893199460468, 0.0235011984379458, 0.0372760560790258, 0.0198157274157219, 0.0405206512162228, 0.0260804190486614, 0.0209465353874927, },
};
        public static double[] T12RotationDurations = new double[21] { 56.9225635962731, 53.8377634989651, 50.3509570948617, 47.6896301113211, 45.1106600305957, 42.662309355257, 40.6297231182727, 38.79945164056, 37.1997678618484, 35.8585171917885, 34.4508565797102, 33.4524915007011, 32.3605344021738, 31.5050893326965, 30.5949236667887, 29.8916073523809, 29.4332523386247, 29.0781815454366, 28.6824563401984, 28.3251203742104, 27.9950931018118, };
        public static double[] T12RotationDurationsGoSF = new double[21] { 55.5719547577641, 52.6992902599494, 49.5708775516033, 47.0395517109847, 44.4774683107892, 42.1428360626085, 40.1674578400732, 38.4264734894843, 36.9103502098628, 35.6518792576791, 34.2149697324414, 33.2194378080545, 32.1036673620402, 31.1896653079674, 30.3367498087929, 29.5748490725822, 29.1026929524385, 28.726654378966, 28.2938506182304, 27.9262472772203, 27.6394925800726, };
        public static double[] T12NGUptimes = new double[21] { 0.519431176069684, 0.529220625695474, 0.580133243593467, 0.610477327805922, 0.629880722916212, 0.693205844071288, 0.710207252898484, 0.755146471228013, 0.77744549389057, 0.800743780450588, 0.81079620959435, 0.8266475332286, 0.845938657708759, 0.829772406726563, 0.842186479347004, 0.82878483054211, 0.8399993486885, 0.825689405605403, 0.841168137017548, 0.817652837265943, 0.84252277335037, };
        public static double[] T12NGUptimesGoSF = new double[21] { 0.529116214858626, 0.545380146291826, 0.574553136367665, 0.603132200797791, 0.626761950435012, 0.678262813518395, 0.696074160595511, 0.731203629066079, 0.751433940764659, 0.748279708241227, 0.769491808787093, 0.780481183689816, 0.798968683312985, 0.795703843004893, 0.795160811038717, 0.800404441730635, 0.804199592131067, 0.807347594764871, 0.816876693228731, 0.810091222714141, 0.794843812184595, };
        public static double[] T12PercentMoonfiresExtended = new double[21] { 0.914010470931819, 0.911244078946948, 0.820146979532127, 0.651543327313343, 0.715886920192619, 0.822116160130715, 0.870663877708996, 0.911656425008183, 0.901930582731523, 0.889276437564607, 0.962180958032503, 0.965081018232077, 0.981225221878251, 0.996422456140383, 0.997606315789494, 0.99832788304095, 0.998776842105274, 0.997968514619902, 0.999059228070184, 0.998177497076039, 0.999394888888894, };

        #endregion

        #region 4T13

        public static double[,] T13CastDistribution = new double[21, 12] {
{ 0.106247692562026, 0.160603844964112, 0.0528355540782475, 0.028841368161731, 0.140307545720503, 0.192657360447648, 0.0650371364371239, 0.0332628462565412, 0.0473962944724834, 0.0827135417757849, 0.0592971726589485, 0.0307996424648517, },
{ 0.108128812330935, 0.161925072217776, 0.0517707582449884, 0.0292032128622279, 0.142117704958605, 0.19973750917016, 0.0595173047868499, 0.0335341519964798, 0.0443711619624797, 0.079939502653806, 0.0586939849072205, 0.0310608239084718, },
{ 0.112361550964989, 0.167970362410733, 0.0478138809066652, 0.0291932915318594, 0.145792856832856, 0.204244223416661, 0.0584011553958653, 0.0347399646525908, 0.0442591822323989, 0.0717834665487364, 0.0533200049292497, 0.030120060177396, },
{ 0.115170203984514, 0.170374784944556, 0.0456411921519196, 0.0295012691221528, 0.147733760562994, 0.205852314880082, 0.0576713793338815, 0.0348413740838814, 0.0386283274188435, 0.0699514677992548, 0.0551835299265957, 0.0294503957913243, },
{ 0.118836140932381, 0.172745042526829, 0.0452171974161272, 0.0298288499389136, 0.151128637942963, 0.211638273381752, 0.0531437893291862, 0.0360221488823376, 0.0389923132538357, 0.0633127875570968, 0.049706769462372, 0.0294280493762063, },
{ 0.120732935805157, 0.17882442918188, 0.0407396263946949, 0.0296836157733115, 0.152349743169564, 0.214340840565514, 0.0528865570794909, 0.0359668511172646, 0.0337137820341713, 0.0609239686743464, 0.0507489630456631, 0.0290886871589424, },
{ 0.122063991808404, 0.18145266273208, 0.0411256345718813, 0.0303540359526504, 0.156065549715977, 0.217398956503867, 0.0490411134510036, 0.0367902707321292, 0.0338855491491764, 0.0562776232612923, 0.0479484327825919, 0.0275961793389461, },
{ 0.124064826958736, 0.183736329221348, 0.0391673960408946, 0.0301982213023387, 0.157583142011157, 0.220696714224527, 0.047749359525184, 0.0367910549012618, 0.027853272074766, 0.0556211475074024, 0.0498648551582498, 0.0266736810741355, },
{ 0.126121566966563, 0.185991448530469, 0.0371286163503832, 0.0308202499999077, 0.159153675386374, 0.224782925796277, 0.0456071404364647, 0.0374810424875848, 0.0293738882123975, 0.0525289619863205, 0.0464053579597811, 0.0246051258874773, },
{ 0.127546057186581, 0.187217842293848, 0.0371611728650249, 0.0311375520697571, 0.161256847018817, 0.22636266003389, 0.0430970054648459, 0.0371514731902832, 0.0211197525527027, 0.052660639198743, 0.0512045829612567, 0.0240844151642505, },
{ 0.130593154530104, 0.187889821729072, 0.0391620695638839, 0.0316374833031344, 0.16351381033283, 0.230937958857539, 0.0381130711452219, 0.0380902417665788, 0.0325609201392592, 0.0533060226322158, 0.0363421801018905, 0.0178532658982698, },
{ 0.131222556706183, 0.189606091082661, 0.0364030676632453, 0.0315873407114016, 0.163508603991094, 0.231174466576222, 0.038096236247486, 0.0380574318596087, 0.0318324569914241, 0.0516496644273918, 0.0371419441749379, 0.019720139568345, },
{ 0.133494344251073, 0.189748933854271, 0.0339618756018108, 0.0318640945653441, 0.163821989588036, 0.233098209870886, 0.0372628822877807, 0.0389655472843693, 0.0339868815138421, 0.051253180899104, 0.0339271388823828, 0.0186149214011005, },
{ 0.134673588767157, 0.190936443611779, 0.0339360473601325, 0.0324525431379736, 0.164946217536214, 0.234734341696195, 0.0353278070229028, 0.0390617575584789, 0.0416277415183481, 0.0453569192155745, 0.0248968218411871, 0.0220497707340583, },
{ 0.136118584480553, 0.192236862688548, 0.0335827859508949, 0.0327312844337292, 0.165711425955047, 0.235750004599406, 0.0342247885310285, 0.0394058992986465, 0.0339790260724086, 0.0410873143714463, 0.0298372214528188, 0.0253348021654746, },
{ 0.137635413162564, 0.192340750394745, 0.0337035409687681, 0.0326956155138044, 0.166992838182016, 0.237005245189642, 0.0336715134309468, 0.0380433770087075, 0.0360148616148703, 0.0444114144470153, 0.0275276687573881, 0.0199577613295322, },
{ 0.138855841979885, 0.193015890927993, 0.0318534854118072, 0.033203439973141, 0.167178877082706, 0.236836692513284, 0.033995065172773, 0.0389499006191744, 0.032819082078918, 0.042693638546715, 0.0291532761658489, 0.021444809527754, },
{ 0.140378830982878, 0.193262659273156, 0.030951806798448, 0.0335929528038216, 0.167629669490504, 0.237099731476523, 0.0333309082853142, 0.0395401591435274, 0.0327109784312381, 0.0420797915108922, 0.0292965373598552, 0.0201259744438421, },
{ 0.141465599227598, 0.19378697000209, 0.0297666086666836, 0.033997066587272, 0.167759988788997, 0.237083284085712, 0.0335834364416437, 0.0402303442146887, 0.0299302853170275, 0.041303967288608, 0.0300605483915852, 0.0210319009880943, },
{ 0.14136923408049, 0.194091237107324, 0.030446509097791, 0.0345858745975894, 0.168129423668346, 0.237824963573464, 0.0318532099017827, 0.0412925340139215, 0.0292436490126615, 0.0421610553513485, 0.030895358366972, 0.0181069512283102, },
{ 0.141832588089459, 0.194391919129167, 0.0302961969813317, 0.0346367410257873, 0.168634088592776, 0.237934650509943, 0.0319993413220928, 0.0403006143844065, 0.0293753819928651, 0.0419006162959264, 0.0298831294727202, 0.0188147322035255, },
};
        public static double[,] T13CastDistributionGoSF = new double[21, 12] {
{ 0.113248979511485, 0.167572289084154, 0.0532843197478426, 0.0265429090038129, 0.148068809561915, 0.198966551454239, 0.0713230058959938, 0.0281427710551288, 0.0433346250832559, 0.0827631952619148, 0.0348726909362538, 0.0318798534040041, },
{ 0.115507832244754, 0.168490742345534, 0.0545111443612484, 0.0251971378027383, 0.149970486527952, 0.208296209608018, 0.0636994540935212, 0.0291739036950938, 0.0559038692948056, 0.0822898496800513, 0.014762036258197, 0.0321973340880867, },
{ 0.118177266718151, 0.172928146965274, 0.0528094281338761, 0.02593931203288, 0.154743844814723, 0.212704845613162, 0.0604158758622495, 0.029434940247909, 0.0621218864121258, 0.0748764708962159, 0.0079569104307648, 0.0278910718726685, },
{ 0.118096571182449, 0.173091519252747, 0.0521615376736308, 0.0276054757941966, 0.155927075144344, 0.213912629888877, 0.0579451651562576, 0.0292515938539325, 0.0645981381369155, 0.0743712875909937, 0.00488907888151213, 0.0281499274441436, },
{ 0.122797086548901, 0.176765506311046, 0.0483888932901547, 0.0289405110651511, 0.158627029309332, 0.218021545941912, 0.0552507371628477, 0.0292062098270775, 0.0592182201192532, 0.0632914809836549, 0.0100741286268213, 0.0294186508138481, },
{ 0.123929993914574, 0.181715507716812, 0.0440393933166809, 0.02989758037742, 0.160812060941345, 0.219562093486682, 0.0536985550164757, 0.0293225759902351, 0.0365246199403402, 0.0616615346777364, 0.0293289011855917, 0.029507183436108, },
{ 0.126592821923472, 0.184563805087167, 0.0445199089651986, 0.029879086382407, 0.163397065350368, 0.222936365484867, 0.0507011692797402, 0.0300780983481196, 0.0318812305235447, 0.0573365227489051, 0.0303326391107827, 0.0277812867954277, },
{ 0.129173738355706, 0.187151495719679, 0.042365117049858, 0.0288693876381379, 0.164815186284375, 0.22570073927649, 0.0497677494213335, 0.0305430732772068, 0.0296145846118244, 0.0548945099542528, 0.0286243228615564, 0.0284800955495804, },
{ 0.131271072500775, 0.189494599915866, 0.040436955776774, 0.029226866521478, 0.166473287273878, 0.229970423200928, 0.0470250609195078, 0.0308648008096439, 0.0307953142031873, 0.0537167710923719, 0.0259813670914931, 0.0247434806940962, },
{ 0.133329377187461, 0.190588704552522, 0.0398301261008977, 0.0293579826260095, 0.167303030257505, 0.23140548842627, 0.0453786206872376, 0.0310221929767894, 0.029004808970736, 0.0528283187932453, 0.0249747983492355, 0.0249765510720905, },
{ 0.13497460529933, 0.191378912992568, 0.0393529734840398, 0.0314039906739319, 0.168897648833584, 0.234518667550986, 0.0426016942675115, 0.0314733277406086, 0.0245196110469769, 0.0547049678728563, 0.0286869316265557, 0.0174866686110517, },
{ 0.135938749325299, 0.19233771463358, 0.0374975020730189, 0.0312441748805916, 0.168981547411059, 0.234904937524617, 0.0420056958524108, 0.0314501453139353, 0.0242989537535593, 0.0527138428108677, 0.0290411364288409, 0.0195855999922197, },
{ 0.138150267773364, 0.192277354171763, 0.0366368859961939, 0.0313568753380904, 0.169845721655819, 0.236375257121003, 0.0396426319543264, 0.0321656508161833, 0.0251029345388016, 0.0615328603799935, 0.0262515519140369, 0.0106620083404253, },
{ 0.14042536309209, 0.194981082923142, 0.0345602391441077, 0.0314849069821446, 0.170719638075471, 0.237217901395748, 0.0390870987627302, 0.0325800210570665, 0.0204995910841026, 0.0478199812715872, 0.0300511678521598, 0.0205730083596511, },
{ 0.141851250587086, 0.195932838909738, 0.0344707107730035, 0.0312726202253155, 0.171498510698955, 0.238584925173997, 0.0377627134176719, 0.0328728002253026, 0.0225533845422634, 0.0446239160933778, 0.0256150918144747, 0.0229612375388157, },
{ 0.142918506416288, 0.196604692524843, 0.0348906490740071, 0.0310182303245887, 0.172482964004674, 0.239772095091358, 0.0371682504885892, 0.0316680281675577, 0.0224180255824294, 0.045733917917007, 0.0257599760100096, 0.0195646643986475, },
{ 0.143435797186454, 0.197049822127657, 0.0335288332113457, 0.0318547643263392, 0.172654761256876, 0.240239789669097, 0.0363748512850296, 0.032526815140489, 0.0222697607525354, 0.0454758086444353, 0.0250818531841588, 0.0195071432155834, },
{ 0.144937539380533, 0.197238019349326, 0.0321242067680703, 0.0322651808637013, 0.172968040313539, 0.240082927127509, 0.0363667691213171, 0.0330427111087082, 0.0222605676253747, 0.0437265264235478, 0.0255236884482592, 0.0194638234701153, },
{ 0.145489932323533, 0.19705809667552, 0.0316494805506817, 0.0335141911703837, 0.173159622912725, 0.240369355597057, 0.0353209142081315, 0.0337977534821391, 0.0221620847031592, 0.0429058518476989, 0.0242917368404115, 0.0202809796885591, },
{ 0.14581223569464, 0.197473696201274, 0.0321359367230397, 0.0337771596542727, 0.173489644703309, 0.240898342336563, 0.0340839548342559, 0.0341490907431068, 0.0220460309913625, 0.0432902338954747, 0.0247785076141353, 0.0180651666085661, },
{ 0.146226398925767, 0.19806172219128, 0.031357040283848, 0.0343842221440263, 0.174031715581623, 0.240979737468608, 0.0341322344725207, 0.0339146221110417, 0.0209956754684762, 0.0419599136876119, 0.0245893154289221, 0.0193674022362755, },
};
        public static double[] T13RotationDurations = new double[21] { 61.5198074285714, 58.1225972759539, 54.4097891699605, 51.6098027452214, 48.8373598832528, 46.2587476034782, 44.0500928041617, 42.0905801200409, 40.3362170999437, 38.8293571055385, 37.2335990083442, 36.1426977235947, 35.0947972979375, 34.0089692686057, 33.0277880902731, 32.3272459286057, 31.8631483144875, 31.483032785217, 31.0462158483165, 30.688075682752, 30.3557560521742, };
        public static double[] T13RotationDurationsGoSF = new double[21] { 60.1414570931675, 56.7573303460515, 53.3225928458497, 50.7960198319681, 48.1587538003221, 45.809888066473, 43.6015011341511, 41.681563313717, 39.9686951055898, 38.4949577715691, 37.0579490004392, 35.9496553615994, 35.0249891360087, 33.7909458224386, 32.8079653803997, 32.0883251324825, 31.602466416627, 31.2011335744628, 30.7786363595946, 30.3951073816424, 30.0100077635611, };
        public static double[] T13NGUptimes = new double[21] { 0.478484504841632, 0.494935856198384, 0.538643881758736, 0.56386721537541, 0.583940236627409, 0.639436417612952, 0.65531969353168, 0.699280752360139, 0.719101487380681, 0.745655991393502, 0.77890353397102, 0.79718446859521, 0.798452974522305, 0.823143670403607, 0.835675757362079, 0.818515073404494, 0.82954638360147, 0.813788567036321, 0.830743130146576, 0.805573553604249, 0.82884580996271, };
        public static double[] T13NGUptimesGoSF = new double[21] { 0.489061967257684, 0.508542654580359, 0.547411689318722, 0.567909904176911, 0.586081261755178, 0.625948589991106, 0.644296297199306, 0.683217034312783, 0.701190927615695, 0.722342468881836, 0.732725284896542, 0.754818887394574, 0.730859522055097, 0.781098945928917, 0.790567131265862, 0.779715844834266, 0.788931184122212, 0.785303771841539, 0.792216495107801, 0.787455223588635, 0.783880384924926, };
        public static double[] T13PercentMoonfiresExtended = new double[21] { 0.717530714482236, 0.88455160010304, 0.911606239249631, 0.905135178190221, 0.80975329893361, 0.659007141382826, 0.734029106295134, 0.821937906776707, 0.860107883040978, 0.925558617130736, 0.912618077915591, 0.91763468868276, 0.946301194358635, 0.921205356725347, 0.981874131407081, 0.984896549707723, 0.99186774269013, 0.987433953216475, 0.992517543859713, 0.985000935672633, 0.994604140350924, };

        #endregion

        public static string[] CastDistributionSpells = new string[12] { "Starfire", "Wrath", "Starsurge", "Shooting Stars", "Starfire (Eclipse)", "Wrath (Eclipse)", "Starsurge (Eclipse)", "Shooting Stars (Eclipse)", "Moonfire", "Insect Swarm", "Moonfire (Eclipse)", "Insect Swarm (Eclipse)" };

        #endregion

        // A list of all the damage spells
        private Spell[] _spellData = null;
        private Spell[] SpellData
        {
            get
            {
                if (_spellData == null)
                {
                    _spellData = new Spell[] {
                        new Spell()
                        {
                            Name = "SF",
                            BaseDamage = (1214f + 1514f) / 2.0f,
                            SpellDamageModifier = 1.231f,
                            BaseCastTime = 3.2f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Arcane,
                            BaseEnergy = 20,
                            AllDamageModifier = 1.1f
                        },
                        new Spell()
                        {
                            Name = "MF",
                            BaseDamage = (197.0f + 239.0f) / 2.0f,
                            SpellDamageModifier = 0.18f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = new DotEffect()
                                {
                                    BaseDuration = 12.0f,
                                    BaseTickLength = 2.0f,
                                    TickDamage = 93.0f,
                                    SpellDamageModifierPerTick = 0.18f,
                                    AllDamageModifier = 1.1f
                                },
                            School = SpellSchool.Arcane,
                            AllDamageModifier = 1.1f
                        },
                        new Spell()
                        {
                            Name = "W",
                            BaseDamage = (831f + 937f) / 2.0f,
                            SpellDamageModifier = 3.075f/3.5f,
                            BaseCastTime = 2.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = null,
                            School = SpellSchool.Nature,
                            BaseEnergy = 40/3f,
                            AllDamageModifier = 1.1f
                        },
                        new Spell()
                        {
                            Name = "IS",
                            BaseDamage = 0.0f,
                            SpellDamageModifier = 0.0f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.08f),
                            DotEffect = new DotEffect()
                            {
                                BaseDuration = 12.0f,
                                BaseTickLength = 2.0f,
                                TickDamage = 136.0f,
                                SpellDamageModifierPerTick = 0.13f,
                                AllDamageModifier = 1.1f
                            },
                            School = SpellSchool.Nature
                        },
                        new Spell()
                        {
                            Name = "SS",
                            BaseDamage = (1018 + 1404) / 2f,
                            SpellDamageModifier = 1.228f,
                            BaseCastTime = 2.0f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Spellstorm,
                            BaseEnergy = 15,
                            AllDamageModifier = 1.1f
                        }
                    };
                }
                return _spellData;
            }
        }
        public Spell Starfire
        {
            get
            {
                return SpellData[0];
            }
        }
        public Spell Moonfire
        {
            get
            {
                return SpellData[1];
            }
        }
        public Spell Wrath
        {
            get
            {
                return SpellData[2];
            }
        }
        public Spell InsectSwarm
        {
            get
            {
                return SpellData[3];
            }
        }
        public Spell Starsurge
        {
            get
            {
                return SpellData[4];
            }
        }
        private void ResetSpellList()
        {
            // Since the property rebuilding the array is based on this variable being null, this effectively forces a refresh
            _spellData = null;
        }

        // The spell rotations themselves.
        private SpellRotation[] rotations = null;
        public SpellRotation[] Rotations
        {
            get
            {
                if (rotations == null)
                {
                    rotations = new SpellRotation[4]
                    {
                        new SpellRotation() { RotationData = new RotationData() { Name = "None" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Unused" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Lunar Only", StarfallCastMode = StarfallMode.LunarOnly } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall On CD", StarfallCastMode = StarfallMode.OnCooldown } },
                    };
                    //RecreateRotations();
                }
                return rotations;
            }
        }

        // Results data from the calculations, which will be sent to the UI.
        RotationData[] cachedResults = new RotationData[3];

        public void Solve(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            CalculationOptionsMoonkin calcOpts = character.CalculationOptions as CalculationOptionsMoonkin;
            DruidTalents talents = character.DruidTalents;
            procEffects = new List<ProcEffect>();
            UpdateSpells(character, ref calcs);

            float trinketDPS = 0.0f;
            float baseSpellPower = calcs.SpellPower;
            float baseHit = 1 - Math.Max(0, calcs.SpellHitCap - calcs.SpellHit);
            float baseCrit = calcs.SpellCrit;
            float baseHaste = calcs.SpellHaste;
            float baseMastery = calcs.Mastery;
            float sub35PercentTime = (float)(character.BossOptions.Under20Perc + character.BossOptions.Under35Perc);

            BuildProcList(calcs);

            float maxDamageDone = 0.0f, maxBurstDamageDone = 0.0f;
            SpellRotation maxBurstRotation = Rotations[0];
            SpellRotation maxRotation = Rotations[0];

            float manaPool = GetEffectiveManaPool(character, calcOpts, calcs);

            float manaGained = manaPool - calcs.BasicStats.Mana;

            float oldArcaneMultiplier = calcs.BasicStats.BonusArcaneDamageMultiplier;
            float oldNatureMultiplier = calcs.BasicStats.BonusNatureDamageMultiplier;

            int rotationIndex = 1;
            foreach (SpellRotation rot in Rotations)
            {
                if (rot.RotationData.Name == "None") continue;
                rot.Solver = this;

                // Reset variables modified in the pre-loop to base values
                float currentSpellPower = baseSpellPower;
                float currentCrit = baseCrit;
                float currentHaste = baseHaste;
                float currentMastery = baseMastery;
                float currentTrinketDPS = trinketDPS;
                calcs.BasicStats.BonusArcaneDamageMultiplier = oldArcaneMultiplier;
                calcs.BasicStats.BonusNatureDamageMultiplier = oldNatureMultiplier;
                float accumulatedDamage = 0.0f;
                float totalUpTime = 0.0f;
                float[] spellDetails = new float[NUM_SPELL_DETAILS];
                List<ProcEffect> activatedEffects = new List<ProcEffect>();
                List<ProcEffect> alwaysUpEffects = new List<ProcEffect>();

                float baselineDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);

                // Calculate spell power/spell damage modifying trinkets in a separate pre-loop
                // Add spell crit effects here as well, since they no longer affect timing
                // Add Intellect procs here, since they are a combination of spell power and spell crit
                foreach (ProcEffect proc in procEffects)
                {
                    bool handled = false;
                    if (proc.Effect.Stats.SpellPower > 0 || proc.Effect.Stats.CritRating > 0 || proc.Effect.Stats.MasteryRating > 0 || proc.Effect.Stats.Intellect > 0 || proc.Effect.Stats.HighestStat > 0)
                    {
                        handled = true;
                        float procIntellect = (float)Math.Floor((1 + calcs.BasicStats.BonusIntellectMultiplier) * (proc.Effect.Stats.Intellect + proc.Effect.Stats.HighestStat));
                        float procSpellPower = (float)Math.Floor((1 + calcs.BasicStats.BonusSpellPowerMultiplier) * (proc.Effect.Stats.SpellPower + procIntellect));
                        float procSpellCrit = StatConversion.GetSpellCritFromRating(proc.Effect.Stats.CritRating) + StatConversion.GetSpellCritFromIntellect(procIntellect);
                        float procMastery = StatConversion.GetMasteryFromRating(proc.Effect.Stats.MasteryRating);

                        float triggerInterval = 0.0f, triggerChance = 1.0f;
                        switch (proc.Effect.Trigger)
                        {
                            case Trigger.DamageDone:
                            case Trigger.DamageOrHealingDone:
                                triggerInterval = ((rot.RotationData.Duration / rot.RotationData.CastCount) + (rot.RotationData.Duration / (rot.RotationData.MoonfireTicks + rot.RotationData.InsectSwarmTicks))) / 2.0f;
                                break;
                            case Trigger.Use:
                                break;
                            case Trigger.SpellHit:
                            case Trigger.DamageSpellHit:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                triggerChance = baseHit;
                                break;
                            case Trigger.SpellCrit:
                            case Trigger.DamageSpellCrit:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts);
                                triggerChance = baseCrit;
                                break;
                            case Trigger.SpellCast:
                            case Trigger.DamageSpellCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                break;
                            case Trigger.MoonfireCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireCasts;
                                break;
                            case Trigger.DoTTick:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.InsectSwarmTicks + rot.RotationData.MoonfireTicks);
                                break;
                            case Trigger.MoonfireTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireTicks;
                                break;
                            case Trigger.InsectSwarmTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.InsectSwarmTicks;
                                break;
                            default:
                                triggerChance = 0.0f;
                                break;
                        }
                        if (triggerChance > 0)
                        {
                            float durationMultiplier = proc.Effect.LimitedToExecutePhase ? sub35PercentTime : 1f;
                            currentSpellPower += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                            proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellPower * durationMultiplier;
                            currentCrit += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellCrit * durationMultiplier;
                            currentMastery += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procMastery * durationMultiplier;
                        }
                    }
                    // 2T10 (both if statements, which is why it isn't else-if)
                    if (proc.Effect.Stats.BonusArcaneDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusArcaneDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusArcaneDamageMultiplier;
                    }
                    if (proc.Effect.Stats.BonusNatureDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusNatureDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusNatureDamageMultiplier;
                    }
                    // Variable Pulse Lightning Capacitor
                    // This might catch some other effects, I probably need a better way to differentiate
                    if (proc.Effect.Trigger == Trigger.DamageSpellCrit && proc.Effect.Stats.NatureDamage > 0)
                    {
                        float procInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts + rot.RotationData.DotTicks);
                        currentTrinketDPS += proc.Effect.GetAverageProcsPerSecond(procInterval, currentCrit, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.NatureDamage;
                    }
                    // Nested special effects
                    if (proc.Effect.Stats._rawSpecialEffectDataSize > 0)
                    {
                        handled = true;
                        SpecialEffect childEffect = proc.Effect.Stats._rawSpecialEffectData[0];
                        // Heart of Ignacious
                        if (childEffect.Stats.SpellPower > 0)
                        {
                            float averageStack = childEffect.GetAverageStackSize(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit, 3.0f, proc.Effect.Duration);
                            currentSpellPower += (float)Math.Floor((1 + calcs.BasicStats.BonusSpellPowerMultiplier) * childEffect.Stats.SpellPower) * averageStack * proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit);
                        }
                        // 4T11
                        if (childEffect.Stats.SpellCrit != 0)
                        {
                            float maxStack = proc.Effect.Stats.SpellCrit;
                            float numNegativeStacks = childEffect.GetAverageStackSize(rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts), Math.Min(1.0f, baseCrit + maxStack), 3.0f, proc.Effect.Duration);
                            float averageNegativeValue = childEffect.Stats.SpellCrit * numNegativeStacks;
                            float averageCrit = maxStack + averageNegativeValue;
                            currentCrit += averageCrit * proc.Effect.GetAverageUptime(rot.RotationData.Duration / 2f, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f);
                        }
                    }
                    if (!handled)
                    {
                        if (proc.CalculateDPS != null)
                        {
                            accumulatedDamage += proc.CalculateDPS(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) * rot.RotationData.Duration;
                        }
                        if (proc.Activate != null)
                        {
                            float upTime = proc.UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            // Procs with 100% uptime should be activated and not put into the combination loop
                            if (upTime == 1)
                            {
                                alwaysUpEffects.Add(proc);
                                proc.Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                            }
                            // Procs with uptime 0 < x < 100 should be activated
                            else if (upTime > 0)
                                activatedEffects.Add(proc);
                        }
                        if (proc.CalculateMP5 != null)
                        {
                            manaGained += proc.CalculateMP5(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) / 5.0f * character.BossOptions.BerserkTimer * 60.0f;
                        }
                    }
                }
                // Calculate stat-boosting trinkets, taking into effect interactions with other stat-boosting procs
                int sign = 1;
                float[] cachedDamages = new float[1 << activatedEffects.Count];
                float[] cachedUptimes = new float[1 << activatedEffects.Count];
                float[,] cachedDetails = new float[1 << activatedEffects.Count, NUM_SPELL_DETAILS];
                List<int> calculatedPairs = new List<int>();
                // Iterate over the entire set of trinket combinations (each trinket by itself, 2 at a time, ...)
                for (int i = 1; i <= activatedEffects.Count; ++i)
                {
                    // Create a new combination generator for this "level" of trinket interaction
                    CombinationGenerator gen = new CombinationGenerator(activatedEffects.Count, i);
                    // Iterate over all combinations
                    while (gen.HasNext())
                    {
                        float tempUpTime = 1.0f;
                        int[] vals = gen.GetNext();
                        int pairs = 0;
                        int lengthCounter = 0;
                        // Activate the trinkets, calculate the damage and uptime, then deactivate them
                        foreach (int idx in vals)
                        {
                            pairs |= 1 << idx;
                            ++lengthCounter;
                            activatedEffects[idx].Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        currentCrit = (float)Math.Min(1.0f, currentCrit);
                        float tempDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency) / rot.RotationData.Duration;
                        spellDetails[0] = rot.RotationData.StarfireAvgHit;
                        spellDetails[1] = rot.RotationData.WrathAvgHit;
                        spellDetails[2] = rot.RotationData.MoonfireAvgHit;
                        spellDetails[3] = rot.RotationData.InsectSwarmAvgHit;
                        spellDetails[4] = rot.RotationData.StarSurgeAvgHit;
                        spellDetails[5] = rot.RotationData.StarfireAvgCast;
                        spellDetails[6] = rot.RotationData.WrathAvgCast;
                        spellDetails[7] = rot.RotationData.MoonfireAvgCast;
                        spellDetails[8] = rot.RotationData.InsectSwarmAvgCast;
                        spellDetails[9] = rot.RotationData.StarSurgeAvgCast;
                        spellDetails[10] = rot.RotationData.AverageInstantCast;
                        spellDetails[11] = rot.RotationData.StarfireAvgEnergy;
                        spellDetails[12] = rot.RotationData.WrathAvgEnergy;
                        spellDetails[13] = rot.RotationData.StarSurgeAvgEnergy;
                        spellDetails[14] = rot.RotationData.TreantDamage;
                        spellDetails[15] = rot.RotationData.StarfallDamage;
                        spellDetails[16] = rot.RotationData.MushroomDamage;
                        foreach (int idx in vals)
                        {
                            tempUpTime *= activatedEffects[idx].UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            activatedEffects[idx].Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        if (tempUpTime == 0) continue;
                        // Adjust previous probability tables by the current factor
                        // At the end of the algorithm, this ensures that the probability table will contain the individual
                        // probabilities of each effect or set of effects.
                        // These adjustments only need to be made for higher levels of the table, and if the current probability is > 0.
                        if (lengthCounter > 1)
                        {
                            foreach (int subset in calculatedPairs)
                            {
                                // Truly a subset?
                                if ((pairs & subset) != subset)
                                {
                                    continue;
                                }

                                // Calculate the "layer" of the current subset by getting the set bit count.
                                int subsetLength = 0;
                                for (int j = subset; j > 0; ++subsetLength)
                                {
                                    j &= --j;
                                }

                                // Set the sign of the operation: Evenly separated layers are added, oddly separated layers are subtracted
                                int newSign = ((lengthCounter - subsetLength) % 2 == 0) ? 1 : -1;

                                // Adjust by current uptime * sign of operation.
                                cachedUptimes[subset] += newSign * tempUpTime;
                            }
                        }
                        // Cache the results to be calculated later
                        cachedUptimes[pairs] = tempUpTime;
                        cachedDamages[pairs] = tempDPS;
                        for (int idx = 0; idx < NUM_SPELL_DETAILS; ++idx)
                        {
                            cachedDetails[pairs, idx] = spellDetails[idx];
                        }
                        calculatedPairs.Add(pairs);
                        totalUpTime += sign * tempUpTime;
                    }
                    sign = -sign;
                }
                float accumulatedDPS = 0.0f;
                Array.Clear(spellDetails, 0, spellDetails.Length);
                // Apply the above-calculated probabilities to the previously stored damage calculations and add to the result.
                for (int idx = 0; idx < cachedUptimes.Length; ++idx)
                {
                    if (cachedUptimes[idx] == 0) continue;
                    accumulatedDPS += cachedUptimes[idx] * cachedDamages[idx];
                    for (int i = 0; i < NUM_SPELL_DETAILS; ++i)
                    {
                        spellDetails[i] += cachedUptimes[idx] * cachedDetails[idx,i];
                    }
                }
                float damageDone = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);
                accumulatedDPS += (1 - totalUpTime) * damageDone / rot.RotationData.Duration;
                spellDetails[0] += (1 - totalUpTime) * rot.RotationData.StarfireAvgHit;
                spellDetails[1] += (1 - totalUpTime) * rot.RotationData.WrathAvgHit;
                spellDetails[2] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgHit;
                spellDetails[3] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgHit;
                spellDetails[4] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgHit;
                spellDetails[5] += (1 - totalUpTime) * rot.RotationData.StarfireAvgCast;
                spellDetails[6] += (1 - totalUpTime) * rot.RotationData.WrathAvgCast;
                spellDetails[7] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgCast;
                spellDetails[8] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgCast;
                spellDetails[9] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgCast;
                spellDetails[10] += (1 - totalUpTime) * rot.RotationData.AverageInstantCast;
                spellDetails[11] += (1 - totalUpTime) * rot.RotationData.StarfireAvgEnergy;
                spellDetails[12] += (1 - totalUpTime) * rot.RotationData.WrathAvgEnergy;
                spellDetails[13] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgEnergy;
                spellDetails[14] += (1 - totalUpTime) * rot.RotationData.TreantDamage;
                spellDetails[15] += (1 - totalUpTime) * rot.RotationData.StarfallDamage;
                spellDetails[16] += (1 - totalUpTime) * rot.RotationData.MushroomDamage;

                float burstDPS = accumulatedDPS + accumulatedDamage / rot.RotationData.Duration;
                float sustainedDPS = burstDPS;

                // Mana calcs:
                // Main rotation - all spells
                // Movement rotation - Lunar Shower MF, IS, Shooting Stars procs, and Starfall only
                rot.RotationData.ManaGained += manaGained / (character.BossOptions.BerserkTimer * 60.0f) * rot.RotationData.Duration;
                float timeToOOM = manaPool / ((rot.RotationData.ManaUsed - rot.RotationData.ManaGained) / rot.RotationData.Duration);
                if (timeToOOM <= 0) timeToOOM = character.BossOptions.BerserkTimer * 60.0f;   // Happens when ManaUsed is less than 0
                if (timeToOOM < character.BossOptions.BerserkTimer * 60.0f)
                {
                    rot.RotationData.TimeToOOM = new TimeSpan(0, (int)(timeToOOM / 60), (int)(timeToOOM % 60));
                    sustainedDPS = burstDPS * timeToOOM / (character.BossOptions.BerserkTimer * 60.0f);
                }
                
                burstDPS += currentTrinketDPS;
                sustainedDPS += currentTrinketDPS;

                rot.RotationData.SustainedDPS = sustainedDPS;
                rot.RotationData.BurstDPS = burstDPS;
                rot.RotationData.StarfireAvgHit = spellDetails[0];
                rot.RotationData.WrathAvgHit = spellDetails[1];
                rot.RotationData.MoonfireAvgHit = spellDetails[2];
                rot.RotationData.InsectSwarmAvgHit = spellDetails[3];
                rot.RotationData.StarSurgeAvgHit = spellDetails[4];
                rot.RotationData.StarfireAvgCast = spellDetails[5];
                rot.RotationData.WrathAvgCast = spellDetails[6];
                rot.RotationData.MoonfireAvgCast = spellDetails[7];
                rot.RotationData.InsectSwarmAvgCast = spellDetails[8];
                rot.RotationData.StarSurgeAvgCast = spellDetails[9];
                rot.RotationData.AverageInstantCast = spellDetails[10];
                rot.RotationData.StarfireAvgEnergy = spellDetails[11];
                rot.RotationData.WrathAvgEnergy = spellDetails[12];
                rot.RotationData.StarSurgeAvgEnergy = spellDetails[13];
                rot.RotationData.TreantDamage = spellDetails[14];
                rot.RotationData.StarfallDamage = spellDetails[15];
                rot.RotationData.MushroomDamage = spellDetails[16];

                // Update the sustained DPS rotation if any one of the following three cases is true:
                // 1) No user rotation is selected and sustained DPS is maximum
                // 2) A user rotation is selected, Eclipse is not present, and the user rotation matches the current rotation
                // 3) A user rotation is selected, Eclipse is present, and the user rotation's dot spells matches this rotation's
                if ((calcOpts.UserRotation == "None" && sustainedDPS > maxDamageDone) || rot.RotationData.Name == calcOpts.UserRotation)
                {
                    maxDamageDone = sustainedDPS;
                    maxRotation = rot;
                }
                if (burstDPS > maxBurstDamageDone)
                {
                    maxBurstDamageDone = burstDPS;
                    maxBurstRotation = rot;
                }
                cachedResults[rotationIndex - 1] = rot.RotationData;

                // Deactivate always-up procs
                foreach (ProcEffect proc in alwaysUpEffects)
                {
                    proc.Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                }

                ++rotationIndex;
            }
            // Present the findings to the user.
            calcs.SelectedRotation = maxRotation.RotationData;
            calcs.BurstRotation = maxBurstRotation.RotationData;
            calcs.SubPoints = new float[] { maxBurstDamageDone, maxDamageDone };
            calcs.OverallPoints = calcs.SubPoints[0] + calcs.SubPoints[1];
            calcs.Rotations = cachedResults;
        }

        // Create proc effect calculations for proc-based trinkets.
        private void BuildProcList(CharacterCalculationsMoonkin calcs)
        {
            // Implement a new handler for each special effect in the calculations stats
            foreach (SpecialEffect effect in calcs.BasicStats.SpecialEffects())
            {
                procEffects.Add(new ProcEffect(effect));
            }
        }

        // Non-rotation-specific mana calculations
        private float GetEffectiveManaPool(Character character, CalculationOptionsMoonkin calcOpts, CharacterCalculationsMoonkin calcs)
        {
            float fightLength = character.BossOptions.BerserkTimer * 60.0f;

            float innervateCooldown = 180;

            // Mana/5 calculations
            float totalManaRegen = calcs.ManaRegen * fightLength;

            // Mana pot calculations
            float manaRestoredByPots = 0.0f;
            foreach (Buff b in character.ActiveBuffs)
            {
                if (b.Stats.ManaRestore > 0)
                {
                    manaRestoredByPots = b.Stats.ManaRestore;
                    break;
                }
            }

            // Innervate calculations
            float innervateDelay = calcOpts.InnervateDelay * 60.0f;
            int numInnervates = (calcOpts.Innervate && fightLength - innervateDelay > 0) ? ((int)(fightLength - innervateDelay) / (int)innervateCooldown + 1) : 0;
            float totalInnervateMana = numInnervates * 0.2f * calcs.BasicStats.Mana;
            totalInnervateMana *= 1 + 0.15f * character.DruidTalents.Dreamstate;

            // Replenishment calculations
            float replenishmentPerTick = calcs.BasicStats.Mana * calcs.BasicStats.ManaRestoreFromMaxManaPerSecond;
            float replenishmentMana = calcOpts.ReplenishmentUptime * replenishmentPerTick * character.BossOptions.BerserkTimer * 60;

            return calcs.BasicStats.Mana + totalInnervateMana + totalManaRegen + manaRestoredByPots + replenishmentMana;
        }

        /*private void RecreateRotations()
        {
            rotations[0] = new SpellRotation() { RotationData = new RotationData() { Name = "None" } };
            for (int mfMode = 0; mfMode < 2; ++mfMode)
            {
                for (int isMode = 0; isMode < 2; ++isMode)
                {
                    for (int sfMode = 0; sfMode < 3; ++sfMode)
                    {
                        for (int wmMode = 0; wmMode < 3; ++wmMode)
                        {
                            int index = 1 + (wmMode + 3 * sfMode + 9 * isMode + 18 * mfMode);
                            DotMode mfModeEnum = (DotMode)mfMode;
                            DotMode isModeEnum = (DotMode)isMode;
                            StarfallMode sfModeEnum = (StarfallMode)sfMode;
                            MushroomMode wmModeEnum = (MushroomMode)wmMode;
                            string name = String.Format("MF {0} IS {1} SF {2} WM {3}",
                                mfModeEnum.ToString(),
                                isModeEnum.ToString(),
                                sfModeEnum.ToString(),
                                wmModeEnum.ToString());
                            rotations[index] = new SpellRotation()
                            {
                                RotationData = new RotationData()
                                {
                                    Name = name,
                                    MoonfireRefreshMode = mfModeEnum,
                                    InsectSwarmRefreshMode = isModeEnum,
                                    StarfallCastMode = sfModeEnum,
                                    WildMushroomCastMode = wmModeEnum
                                }
                            };
                        }
                    }
                }
            }
        }*/

        // Add talented effects to the spells
        private void UpdateSpells(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            DruidTalents talents = character.DruidTalents;
            StatsMoonkin stats = calcs.BasicStats;

            switch (talents.StarlightWrath)
            {
                case 1:
                    Starfire.BaseCastTime -= 0.15f;
                    Wrath.BaseCastTime -= 0.15f;
                    break;
                case 2:
                    Starfire.BaseCastTime -= 0.25f;
                    Wrath.BaseCastTime -= 0.25f;
                    break;
                case 3:
                    Starfire.BaseCastTime -= 0.5f;
                    Wrath.BaseCastTime -= 0.5f;
                    break;
                default:
                    break;
            }

            float moonfireDotGlyph = talents.GlyphOfMoonfire ? 0.2f : 0.0f;
            float insectSwarmGlyph = talents.GlyphOfInsectSwarm ? 0.3f : 0.0f;
            // Add spell-specific damage
            // Moonfire, Insect Swarm: glyphs
            Moonfire.DotEffect.AllDamageModifier += moonfireDotGlyph;
            InsectSwarm.DotEffect.AllDamageModifier += insectSwarmGlyph;
            // Moonfire: Direct damage +(0.03 * Blessing of the Grove)
            Moonfire.AllDamageModifier += 0.03f * talents.BlessingOfTheGrove;
            // Moonfire, Insect Swarm: +2/4/6 seconds for Genesis
            Moonfire.DotEffect.BaseDuration += 2f * talents.Genesis;
            InsectSwarm.DotEffect.BaseDuration += 2f * talents.Genesis;
            // Wrath: 10% for glyph
            Wrath.AllDamageModifier += (talents.GlyphOfWrath ? 0.1f : 0f);

            // Add spell-specific critical strike damage
            // Burning Shadowspirit Diamond
            float baseCritMultiplier = 1.5f * (1 + stats.BonusCritDamageMultiplier);
            float moonfuryMultiplier = baseCritMultiplier + (baseCritMultiplier - 1);
            Starfire.CriticalDamageModifier = Wrath.CriticalDamageModifier = Moonfire.CriticalDamageModifier = InsectSwarm.CriticalDamageModifier = moonfuryMultiplier;
            Starsurge.CriticalDamageModifier = moonfuryMultiplier;

            // Reduce spell-specific mana costs
            // Shard of Woe (Mana cost -405)
            Starfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Moonfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Wrath.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            InsectSwarm.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            Starsurge.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            // All spells: Mana cost -(0.03 * Moonglow)
            Starfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Moonfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Wrath.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            InsectSwarm.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Starsurge.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);

            // Add set bonuses
            Moonfire.CriticalChanceModifier += stats.BonusCritChanceMoonfire;
            InsectSwarm.CriticalChanceModifier += stats.BonusCritChanceInsectSwarm;
            Starfire.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Wrath.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Starsurge.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;

            // PTR changes go here
            if (((CalculationOptionsMoonkin)character.CalculationOptions).PTRMode)
            {
                MoonkinSolver.DRAGONWRATH_PROC_RATE = 0.0675f;
            }
            else
            {
                MoonkinSolver.DRAGONWRATH_PROC_RATE = 0.11f;
            }

            // Dragonwrath, Tarecgosa's Rest: X% chance on damaging spell cast to proc a duplicate version of the spell.
            // If it duplicates a DoT tick, it fires Wrath of Tarecgosa for an equivalent amount of damage.
            // Wrath, Starfire, and Starsurge will duplicate the Eclipse energy gained.
            if (calcs.BasicStats.DragonwrathProc > 0)
            {
                Starfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Wrath.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Starsurge.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                InsectSwarm.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
            }
        }
    }
}
