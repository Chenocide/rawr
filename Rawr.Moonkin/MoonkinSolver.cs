using System;
using System.Collections.Generic;

namespace Rawr.Moonkin
{
    // The interface public class to the rest of Rawr.  Provides a single Solve method that runs all the calculations.
    public class MoonkinSolver
    {
        private const int NUM_SPELL_DETAILS = 17;
        // A list of all currently active proc effects.
        public List<ProcEffect> procEffects;
        public static float BaseMana = 18635f;
        public static float OOC_PROC_CHANCE = 0.0583f;
        public static float EUPHORIA_PERCENT = 0.08f;
        public static float DRAGONWRATH_PROC_RATE = 0.11f;
        public static float ECLIPSE_BASE = 0.25f;

        #region Cast Distributions

        #region Base

        public static double[,] CastDistribution = new double[21, 12] {
{ 0.113524615322554, 0.166498816984213, 0.0337186684977541, 0.0350093746766219, 0.144259698712451, 0.202423735383309, 0.0379757714157428, 0.0416654827739221, 0.0520576055900785, 0.0817733134790135, 0.0604043125266376, 0.0306886046377025, },
{ 0.115456805610813, 0.167377871816375, 0.0335597005292143, 0.0357207752957263, 0.146506494967352, 0.206329487439614, 0.0349704560701249, 0.0403671390199019, 0.0482837220283589, 0.0799599429481912, 0.0605588315433567, 0.030908772730973, },
{ 0.119916129682745, 0.175585234784814, 0.0293834183121502, 0.0346410621716347, 0.14999820350249, 0.210716020594984, 0.0349285017733092, 0.0423166175703155, 0.0421998056617054, 0.0697564946550638, 0.0590576001420737, 0.0315009111487153, },
{ 0.123128660434898, 0.17470686700569, 0.0288906471788062, 0.0352064952466532, 0.151452166341295, 0.214766348451534, 0.0318709220816916, 0.0412063282532892, 0.0384264453872059, 0.0728816295371501, 0.0601085456866012, 0.0273549443951858, },
{ 0.128107233523546, 0.179784470587827, 0.0274017323143612, 0.0343847441598475, 0.15462515558487, 0.219334581819533, 0.0304877669701906, 0.0425128201643485, 0.0385007582435583, 0.0618496574132856, 0.0531799891941799, 0.0298310900244526, },
{ 0.129507521568864, 0.182197340323168, 0.0250677903420644, 0.0349250683410118, 0.155829534678281, 0.221711226474809, 0.0292050589738299, 0.0423325906054585, 0.0358607721432993, 0.0619203476522921, 0.0530206553317582, 0.0284220935651634, },
{ 0.133210166920988, 0.186483142328755, 0.0243274499472429, 0.0347356412761395, 0.15893042046364, 0.226424275663666, 0.0274618897391083, 0.042051550622752, 0.0346829772616468, 0.0552341779878782, 0.0485047542572073, 0.0279535535309759, },
{ 0.134522135413724, 0.187405046049218, 0.0227912084025746, 0.0350971473562999, 0.159295020387802, 0.227549386025943, 0.0262792516668087, 0.0428204343095822, 0.0329147105283066, 0.0551764968505236, 0.0487293005871639, 0.0274198624220542, },
{ 0.137287216895977, 0.19091142229921, 0.0220423623682131, 0.0350274199750902, 0.161832278313858, 0.232816544100768, 0.0250693212710784, 0.0416881611560966, 0.0333370275058708, 0.052509042495161, 0.0433256093039833, 0.0241535943146931, },
{ 0.138544063651242, 0.190697871140561, 0.0212478929011456, 0.0356600199829593, 0.161755925928196, 0.232646148376538, 0.0235233757715813, 0.0429542905129981, 0.0343513200399659, 0.052362096126616, 0.0419580848233715, 0.024298910744825, },
{ 0.14066282619737, 0.19361417325024, 0.0194018849842624, 0.0374738866006517, 0.164126885633043, 0.237763080333807, 0.0224472124699244, 0.042039676610921, 0.0414735001130731, 0.0544550108068229, 0.0297420496631904, 0.0167998133366946, },
{ 0.140920374281795, 0.194491910518289, 0.0187052165129835, 0.0368814522150019, 0.163872794789914, 0.237580867230481, 0.0215601202617966, 0.0428424402783508, 0.0390991900450589, 0.0512417454819635, 0.0324054782390377, 0.0203984101453287, },
{ 0.142757498045705, 0.19577464932197, 0.0167247098097495, 0.0363438241065843, 0.164465305343602, 0.237166648048948, 0.0226878123207196, 0.0439092953798971, 0.027360350416024, 0.0530005141659336, 0.0420527296801182, 0.0177566633607484, },
{ 0.144423523245681, 0.199295334697938, 0.0143707860842642, 0.0357233486746792, 0.165264199501451, 0.239462830968602, 0.0219468740049166, 0.0449517669703667, 0.0240104789397008, 0.0444728506676644, 0.0432701889863502, 0.0228078172583866, },
{ 0.145448356635756, 0.20006939764949, 0.0144670029406668, 0.0353444486726315, 0.165558551497668, 0.239527116151706, 0.0210952452918285, 0.0465820539339872, 0.0218728269967507, 0.0399501904654488, 0.0434527694997969, 0.0266320402642691, },
{ 0.146336310055874, 0.199972768297247, 0.0150771878826499, 0.0367671128576252, 0.167729821944859, 0.242598169604474, 0.0191541567963143, 0.0436620579359737, 0.0261176020233955, 0.0436979389662623, 0.0382336052890954, 0.0206532683462286, },
{ 0.146904455971811, 0.200583975399695, 0.0136167649403733, 0.036987515800705, 0.167349412248379, 0.241438783633323, 0.0200932109951142, 0.0455218773629595, 0.0246093315505688, 0.0427175437246867, 0.0383535753197778, 0.0218235530526064, },
{ 0.14767691033702, 0.20127484056248, 0.0128281568648928, 0.0377329300865451, 0.168354068322628, 0.242492639999904, 0.0195283603604756, 0.0452738195867047, 0.0263702772125123, 0.0420622831201004, 0.0360488597271628, 0.0203568538195747, },
{ 0.147791409645051, 0.200588889470745, 0.0132017934315729, 0.0381968665315783, 0.167923942255533, 0.242206703542131, 0.0188406454658729, 0.0468569176274288, 0.0242161631901208, 0.0414561158119311, 0.0376291237553331, 0.0210914292727016, },
{ 0.148362436207881, 0.201514153725231, 0.0130364512212598, 0.0388953553029626, 0.169055295511781, 0.243939078056153, 0.0178518154612111, 0.0466016027414253, 0.0260123330845377, 0.0412859396157596, 0.0343595728015103, 0.0190859662702884, },
{ 0.14807766232888, 0.196602092159691, 0.0115419482450105, 0.0456670770554215, 0.168393145089925, 0.241177112741098, 0.0163602235632155, 0.0511051494518053, 0.0248862755153185, 0.0417314498879041, 0.0350767865221948, 0.0193810774395351, },
};
        public static double[,] CastDistributionGoSF = new double[21, 12] {
{ 0.118120308894401, 0.172405029628895, 0.0352762252496194, 0.035973162300168, 0.149692536841794, 0.210715525061889, 0.0373942463329629, 0.0418893270494112, 0.0435563888647527, 0.0822568933187464, 0.041000469280622, 0.0317198871767392, },
{ 0.121678146962344, 0.175953840038787, 0.0337088270879651, 0.0360736078412531, 0.152769029845857, 0.215535569989037, 0.0351249000843005, 0.0416879310570753, 0.0493401414325837, 0.0816019707962244, 0.0243589015606505, 0.0321671333039228, },
{ 0.125092442249625, 0.180495972551498, 0.0323812697162306, 0.0367192913815783, 0.156531497923554, 0.221245172095903, 0.0331445844337582, 0.040942036946728, 0.0569903394364622, 0.0736325680071599, 0.0140745067314355, 0.0287503185260663, },
{ 0.12749596467131, 0.181550143775287, 0.0289385358453816, 0.0365972442817354, 0.157480806162705, 0.222522949560824, 0.0323997366207136, 0.0410533767448599, 0.0633520678097957, 0.0731847562297705, 0.0062905975924121, 0.0291338207052049, },
{ 0.1311831627236, 0.183247834807879, 0.029343236034694, 0.0365967832108003, 0.159628216482059, 0.227336476576582, 0.0295107940994102, 0.0408727702898829, 0.0617658695767693, 0.0630675529876476, 0.0080085946037718, 0.0294387086069042, },
{ 0.133478044764874, 0.184623939409594, 0.0274722112692703, 0.0367222919629667, 0.160326489713081, 0.228566937352991, 0.0273713901437562, 0.0416202852693271, 0.0517075492651023, 0.0616289367521851, 0.0171007347284328, 0.0293811893684197, },
{ 0.136406463911483, 0.187559748417485, 0.0252360037180693, 0.036324608073329, 0.16167202968192, 0.230500721773032, 0.0272491929829677, 0.0427656258394475, 0.0355893363872688, 0.0571770588754595, 0.031589550205949, 0.0279296601335881, },
{ 0.13824986605836, 0.190811030944459, 0.0230766256648753, 0.0358519031837359, 0.162719861985887, 0.232617258041853, 0.0264664908799114, 0.0435114654986947, 0.027656304875826, 0.0547645840116858, 0.0357980166802977, 0.0284765921744134, },
{ 0.140490573013863, 0.193366009887905, 0.0216745734935184, 0.0362251334667376, 0.164413158558734, 0.235848778501425, 0.0256055030515605, 0.043408479416019, 0.0290276726448773, 0.0540752010432515, 0.0312854277056212, 0.0245794892164872, },
{ 0.141827226648335, 0.195020892157257, 0.0213022732177523, 0.0365128240009863, 0.165563438062112, 0.237851502512335, 0.024028043929421, 0.0434369067853936, 0.0276155582991091, 0.0527072779828497, 0.0292351412361845, 0.0248989151682638, },
{ 0.143217541914955, 0.198048004011537, 0.0195112381410452, 0.0374610516003934, 0.167137912163437, 0.240846762686474, 0.0232553082275812, 0.0436183699921783, 0.0257153050784503, 0.0547727822990004, 0.028962817230165, 0.0174529066547834, },
{ 0.14378898850243, 0.198771143249372, 0.0181365024231182, 0.0374705693849748, 0.167017776873781, 0.240781980785423, 0.0228897894092088, 0.0439230234766922, 0.0258622018475154, 0.0534094313567666, 0.0289279114360865, 0.0190206812546323, },
{ 0.144707268338714, 0.199013349954083, 0.0173686225781613, 0.0384001290530878, 0.167723330594981, 0.242005526908104, 0.0219614679469748, 0.0438993536294985, 0.0240981122454269, 0.0576150036974029, 0.0289345270895852, 0.0142733079639813, },
{ 0.146323039933545, 0.202350235581447, 0.0149031986482029, 0.037008780875856, 0.167922960771532, 0.242787499955488, 0.0224515383555387, 0.0457678591218304, 0.0205885980586531, 0.047280850659286, 0.0316158147488025, 0.0209996232898183, },
{ 0.14736687504512, 0.203029254398232, 0.0149698974477134, 0.0370969052751983, 0.168689606308675, 0.244212169929956, 0.0209588506950584, 0.0460045762277376, 0.0198118757994673, 0.044555430239329, 0.0303354488191768, 0.0229691098143355, },
{ 0.148420921478539, 0.203372037175955, 0.0148865122131915, 0.0373763416622679, 0.169843159739042, 0.245764971738561, 0.0202875413400777, 0.0449040744759885, 0.02008363917796, 0.0451012557250547, 0.0297991842879529, 0.0201603609854099, },
{ 0.149034638081172, 0.203805209068086, 0.0140259329442197, 0.0381514246270015, 0.170323492488389, 0.246005934924823, 0.0200704187558692, 0.0454321674707552, 0.0214361845719902, 0.0447964707185601, 0.0268727182810306, 0.0200454080681036, },
{ 0.149394905391593, 0.204040600432588, 0.0133428675492439, 0.0386823035106263, 0.170635331345597, 0.246211968772672, 0.019631273593307, 0.0462087451966944, 0.0209447287487528, 0.0436130569424422, 0.0275894514456978, 0.0197047670707862, },
{ 0.149669167757205, 0.203484796034272, 0.0133963381828086, 0.0394673628268549, 0.170748556747256, 0.246374148786597, 0.0187954936160642, 0.046715820507969, 0.0214999891503816, 0.0424701721682344, 0.026582883276966, 0.0207952709453911, },
{ 0.150017839501604, 0.20400194122739, 0.0129742652619249, 0.0398806382478914, 0.171027623673803, 0.2469568263949, 0.0182788521256158, 0.0474559905327957, 0.0219211675038696, 0.0427733727639281, 0.0262372408344784, 0.0184742419317988, },
{ 0.150157604982984, 0.200230962369928, 0.011667480662547, 0.045683449580287, 0.170952429924339, 0.244391835588734, 0.0163944570595341, 0.0518128581109378, 0.0213368914533561, 0.0416615018008926, 0.0260653342160203, 0.0196451942504388, },
};
        public static double[] BaseRotationDurations = new double[21] { 61.7069480621118, 58.4249696864829, 54.4788846555615, 51.7429715038856, 48.8214456481481, 46.3089008463768, 43.9849551527312, 42.1705660459666, 40.3363296555619, 38.954694507292, 37.2995387826086, 36.2367786125795, 35.1132271119007, 34.0104274909631, 33.004268021135, 32.3333119025324, 31.7981964038858, 31.4304324492194, 30.9810178363303, 30.6027763760684, 30.244733805797, };
        public static double[] BaseRotationDurationsGoSF = new double[21] { 60.1302840248448, 56.6386250428866, 53.0524841897233, 50.4966665637472, 47.9125851368762, 45.6854534430917, 43.6439325841693, 41.6811943024444, 39.9757191970637, 38.4418761060379, 37.0046737663592, 35.9286893052109, 34.905299915691, 33.7238694071146, 32.7610776762881, 32.048397285646, 31.523007686999, 31.0998291746406, 30.7123472899642, 30.2791936493071, 29.9517383859212, };
        public static double[] BaseNGUptimes = new double[21] { 0.47784000409006, 0.486978361603604, 0.537123025730525, 0.565286214295357, 0.581835744534278, 0.63860863498767, 0.655497407714513, 0.694464997045064, 0.717643505878058, 0.741743974950593, 0.774650475707167, 0.793287281903988, 0.804657371080742, 0.826162582992974, 0.849614706885256, 0.814191669876508, 0.845298594649417, 0.807970713953495, 0.845822145901186, 0.801016905580764, 0.837449035779287, };
        public static double[] BaseNGUptimesGoSF = new double[21] { 0.490584953313919, 0.50338549665927, 0.549461956844569, 0.573328152330195, 0.587935348992782, 0.617301679312749, 0.622375985395268, 0.670242102253731, 0.689447887017865, 0.718769102304157, 0.730577814808364, 0.749063680336999, 0.744862351167574, 0.787861416900391, 0.797541141713563, 0.782520769812233, 0.792186532614419, 0.788568851641712, 0.795379313329092, 0.797868976814279, 0.788853755470957, };
        public static double[] BasePercentMoonfiresExtended = new double[21] { 0.614571222012233, 0.820043128507421, 0.897760451496008, 0.906691914344411, 0.843581403508754, 0.709901753501374, 0.581074330827035, 0.645385665241552, 0.751818302914178, 0.852600132782924, 0.927275766770217, 0.931202888889285, 0.920784896162246, 0.920026058479721, 0.92292904929012, 0.931801520468022, 0.978216269006015, 0.96990765914806, 0.981462444444591, 0.976198125313455, 0.987183909774537, };

        #endregion

        #region 4T12

        public static double[,] T12CastDistribution = new double[21, 12] {
{ 0.101159045884209, 0.153284666179567, 0.0306142860678889, 0.0315042660919261, 0.155789591414095, 0.218257608329949, 0.0405500127886499, 0.045119640340994, 0.0468051752320063, 0.0787723996182657, 0.0650552662193542, 0.0330880418330948, },
{ 0.103370663345334, 0.154686893212375, 0.030126570848471, 0.0321772475017947, 0.157816969819951, 0.221845928859563, 0.0380045744966729, 0.0437527665975444, 0.0426613714593591, 0.0768429808765114, 0.0654132365855109, 0.0333007963969133, },
{ 0.108459268094151, 0.159991620729182, 0.0270290125736302, 0.0313030271093193, 0.161594498350616, 0.227491175621144, 0.0370109981187364, 0.0456608359821266, 0.0380553119836767, 0.0667085413015464, 0.0626744697268706, 0.0340212404090009, },
{ 0.110044894241622, 0.162135833148375, 0.0258464455767572, 0.0315875951075925, 0.163076036260886, 0.23047543780302, 0.0342944112297909, 0.0449857941281178, 0.035515517540531, 0.0671288570301738, 0.0624121511045939, 0.0324970268285404, },
{ 0.113524420508521, 0.167206027998215, 0.0250264637159905, 0.0311462439444877, 0.166559822687961, 0.236107173422467, 0.0323859181007117, 0.0457596797853641, 0.0340129628873376, 0.0597952179925652, 0.0571291620308034, 0.0313469069255758, },
{ 0.115123318628528, 0.170060804683629, 0.022670853676825, 0.0314388716118292, 0.167797264450432, 0.238794631766037, 0.0311597626110422, 0.0455103826016054, 0.0315643581182314, 0.0595854105898794, 0.056452046288202, 0.029842294973759, },
{ 0.118301686901049, 0.173148277800317, 0.0224270327565208, 0.0314852646652893, 0.171219319476375, 0.244387424085331, 0.0288535250962052, 0.0451625711873519, 0.0300681332122183, 0.053131458922004, 0.0524393158035622, 0.0293759900937764, },
{ 0.119493770374996, 0.174355799845724, 0.0203690065153112, 0.0318165056285642, 0.171541257300362, 0.24555910370069, 0.0280627405349857, 0.0460123993522711, 0.0309456446272512, 0.0543053711602296, 0.0501151338662322, 0.0274232670933816, },
{ 0.121510029994728, 0.176975662082047, 0.020764813865805, 0.032237440292376, 0.174559912413229, 0.251434139838541, 0.0260074915438301, 0.0442492383170462, 0.0367510486832201, 0.054509867049465, 0.0393795871429788, 0.021620768776734, },
{ 0.122544104311988, 0.176599549732773, 0.0193835849905433, 0.0338498671559057, 0.174795791723911, 0.251751611220681, 0.024844401494172, 0.0445121592258873, 0.045887477769479, 0.0554426347779467, 0.0298374110385484, 0.0205514065581642, },
{ 0.12497315851297, 0.182706824943358, 0.0148818290234943, 0.0317555925467444, 0.176279244856815, 0.253340162122007, 0.0264587190868592, 0.0475686932166689, 0.0216485865937138, 0.044638356177303, 0.0493292187312922, 0.0264196141887752, },
{ 0.125020929160777, 0.18292850666603, 0.0144306209782474, 0.0321117571336599, 0.176219401680152, 0.253858069327796, 0.0252558225519618, 0.0477620713003159, 0.0216063655893918, 0.0460404178745392, 0.0495110076347994, 0.0252550301023313, },
{ 0.126628246966189, 0.184495658894392, 0.0131092880870419, 0.0315787071340194, 0.177070223454379, 0.254129944233899, 0.0253308342580414, 0.0491552880303186, 0.0200163478344105, 0.0414435771490157, 0.0484415936058652, 0.028600290352429, },
{ 0.127254975620203, 0.185330927643001, 0.0125377405171681, 0.0327755625609814, 0.178402492674784, 0.258042843459585, 0.0237715653828694, 0.0477961261491581, 0.025192510017415, 0.0440393894023447, 0.04185137297871, 0.0230044935937803, },
{ 0.127551699501585, 0.185758478356511, 0.0130513678097754, 0.0329805395059042, 0.17873831564399, 0.258942512250254, 0.0222872424467631, 0.0492160422863168, 0.0231226695790999, 0.0430966342990078, 0.0418467918991657, 0.0234077064216279, },
{ 0.12870598506801, 0.186460637318076, 0.0128099313561469, 0.0335252893078305, 0.180964026125405, 0.261106644029167, 0.0210880585809362, 0.047039509159056, 0.0252450961150298, 0.0428561305328173, 0.0389048634126569, 0.0212938289948694, },
{ 0.128667192041671, 0.186309022744354, 0.0125124719762687, 0.0341869975500097, 0.180633008051228, 0.260877758494426, 0.0210922494222846, 0.0484010911387974, 0.0238777326333056, 0.0436332227586678, 0.0389787223123129, 0.0208305308766739, },
{ 0.129204106482509, 0.187178361428625, 0.0118819924405044, 0.0343715572595165, 0.181632292731133, 0.261602402847578, 0.0203680101471251, 0.0486608992509742, 0.0246602593277007, 0.0404608774043474, 0.0378899293783167, 0.0220893113016701, },
{ 0.129382992758654, 0.186441490699564, 0.0118300920483518, 0.0351450671810421, 0.181349407163418, 0.261300667759192, 0.019952555380706, 0.0502192589608064, 0.024666859275978, 0.0411567697046061, 0.0369237880340561, 0.0216310510336264, },
{ 0.129939089340381, 0.187649721237316, 0.0114227526790623, 0.0352411317877486, 0.182411338788795, 0.263169618696224, 0.0192512496747545, 0.0502022770822112, 0.0240321723474229, 0.0401248186068428, 0.036324238009331, 0.0202315917499111, },
{ 0.129633263888553, 0.183512294626327, 0.0107454115690814, 0.0403575036615606, 0.181666964747509, 0.260938712967483, 0.0176215082246144, 0.0544741612246772, 0.0224265391847408, 0.0398363294486149, 0.0372492133082623, 0.0215380971485748, },
};
        public static double[,] T12CastDistributionGoSF = new double[21, 12] {
{ 0.106686618098579, 0.160901051305245, 0.031682420066783, 0.032579505165359, 0.163444355283902, 0.228936777033371, 0.040540744698715, 0.0447540578513961, 0.0504303872556264, 0.0789372372105898, 0.0266449555633776, 0.0344618904670556, },
{ 0.108446575148697, 0.16223250824785, 0.0307082472954401, 0.0329402632378168, 0.165229504491074, 0.231818673493303, 0.0379134152548132, 0.0438482964150454, 0.0627295980984528, 0.0785880748359791, 0.0109376755138352, 0.0346071679676937, },
{ 0.111724249725764, 0.164320012086855, 0.0307410595828461, 0.0338112467559856, 0.168112105583718, 0.237502616457953, 0.0342816583543306, 0.0439782121841168, 0.064588503952622, 0.0679125465650825, 0.00922677175515934, 0.0338010169955666, },
{ 0.113699210315001, 0.165815033290458, 0.0278225150779642, 0.0333425168718119, 0.168873198645269, 0.238737921516968, 0.0333450257497115, 0.0442365351267211, 0.0563232112131789, 0.0678272004074418, 0.0166829403986262, 0.0332946913868497, },
{ 0.11710125832274, 0.169135720281716, 0.025831162047772, 0.0330183182227839, 0.170758426207748, 0.242145645546555, 0.0323336827510996, 0.0453674612298629, 0.0418834883570814, 0.0611887357031261, 0.0299004181027381, 0.0313356832267775, },
{ 0.119480862791336, 0.173033175553124, 0.0230359297912345, 0.0323071411281676, 0.172080626257655, 0.244430937731063, 0.0312402513993759, 0.0463789247713299, 0.0284722061418503, 0.0573275606036657, 0.039647221649721, 0.0325651621814774, },
{ 0.121278200814074, 0.17607452348785, 0.0224997903754492, 0.0325763860567981, 0.174653063063171, 0.249073831560727, 0.0295398531817552, 0.0462763304714101, 0.028333531994952, 0.0556178117216733, 0.0350283621020605, 0.0290483151700803, },
{ 0.122759252261144, 0.17860407800542, 0.0211381167487572, 0.0328068536173257, 0.176232514234963, 0.252064089624063, 0.0281726840712447, 0.0461911474020959, 0.0285541699287627, 0.0538927502539253, 0.030632078615585, 0.0289522652367126, },
{ 0.124316735587394, 0.180893117707737, 0.019508739283381, 0.0328116468078238, 0.177721297580083, 0.254399922481176, 0.0273373742327527, 0.0464265082738244, 0.0296018829955192, 0.0509041102527297, 0.029098974680068, 0.0269796901175117, },
{ 0.124865055242634, 0.181452414821388, 0.0189040553731191, 0.0339939191685687, 0.178309907108627, 0.255575772322255, 0.0259703770256219, 0.0461265716087711, 0.0257084190838212, 0.0584787156703315, 0.0318964039050744, 0.0187183886697882, },
{ 0.127316455998238, 0.18608489153685, 0.015331168174552, 0.0327514338800516, 0.179552581470576, 0.257658721200344, 0.0270235584086118, 0.0483904763747, 0.0178574055414829, 0.047000524590969, 0.0359684772834968, 0.0250643055401277, },
{ 0.127405055315681, 0.18641970882066, 0.0146999669462878, 0.0329701267996663, 0.179383891255477, 0.258158485113897, 0.0259931072576245, 0.0486182406916677, 0.0182386856174617, 0.0475679465920262, 0.0358949249351002, 0.0246498606544497, },
{ 0.128549754062366, 0.187373973351307, 0.0140303445339687, 0.0333198831147608, 0.180655096823318, 0.260201098285766, 0.0249022295977758, 0.048694069338735, 0.0203875366815342, 0.045824271400701, 0.030754789607344, 0.0253069532024225, },
{ 0.129081954139657, 0.188352972670709, 0.0132500115686632, 0.033891209589146, 0.181392637832513, 0.262115093278023, 0.024012328086422, 0.0489253901234322, 0.0204216096573038, 0.0458613161635632, 0.030559218364896, 0.0221362585256723, },
{ 0.129635887733656, 0.189002046031427, 0.0134416345993331, 0.033912328837486, 0.182381657627888, 0.264049344456667, 0.0223958043514551, 0.0489703496659147, 0.0205986782123335, 0.0447721328807523, 0.0282367318286299, 0.0226034037744571, },
{ 0.130753548633332, 0.189523673117712, 0.013123910861281, 0.0342321317911739, 0.18367192449905, 0.265303414202788, 0.0218579631325841, 0.0480444896757465, 0.020393621296724, 0.0437056082433026, 0.028168710486318, 0.0212210040599884, },
{ 0.130907495702579, 0.18982553688345, 0.0127358309398212, 0.0346395611715066, 0.18400439456055, 0.265537164630267, 0.0212897183522313, 0.0486078984523987, 0.0204548374243857, 0.0428832335228685, 0.0277599181969506, 0.0213544101629918, },
{ 0.131021746595034, 0.189996325679382, 0.0120474692861868, 0.0349285770795798, 0.18413178780778, 0.265441322200808, 0.0208535026756068, 0.0496767331904929, 0.0206560232350823, 0.0412236547949272, 0.0277429557849956, 0.0222799016701235, },
{ 0.131359332224548, 0.189740000989626, 0.0116796075425665, 0.0355893778786254, 0.184499425915884, 0.265608978534202, 0.0203361093355065, 0.0503157210183454, 0.0208521286554314, 0.0406200108454941, 0.0267295988076015, 0.0226697082521688, },
{ 0.131507116808701, 0.190099125241866, 0.011653946754647, 0.0360164769672825, 0.1847786957296, 0.266259571856985, 0.0195038541829453, 0.0511538582052396, 0.0201059705088728, 0.0407334150102983, 0.0278903621803369, 0.0202976065532259, },
{ 0.131643017705194, 0.186448966091443, 0.0107939765849567, 0.0412366976099334, 0.184711995469712, 0.264222255049464, 0.017282191921456, 0.0556548467047683, 0.0200987628257411, 0.0400638902603536, 0.026561891374014, 0.0212815084029644, },
};
        public static double[] T12RotationDurations = new double[21] { 56.9558290124226, 53.9208524194023, 50.3560171299963, 47.7392412350346, 45.0491049999999, 42.6766288392094, 40.5427643149894, 38.856576046943, 37.1732989789201, 35.8612446396035, 34.4183155250833, 33.4165247544042, 32.2890557590778, 31.5150418155756, 30.5616676838387, 29.9452675672286, 29.4452959250058, 29.1237225313915, 28.7004418974065, 28.3498252504643, 28.0130111028984, };
        public static double[] T12RotationDurationsGoSF = new double[21] { 55.1773351459624, 52.2993157625949, 49.2182280720247, 46.8644003663091, 44.4605216119162, 42.1420923737549, 40.0648717202796, 38.3032578026642, 36.7422545548655, 35.5825543151503, 34.1042326644372, 33.1403582115503, 32.0558333468705, 31.1949665951052, 30.2797468284011, 29.603759988879, 29.1293217962961, 28.7852579338033, 28.3800151975591, 28.0312085183948, 27.6976523047099, };
        public static double[] T12NGUptimes = new double[21] { 0.516705970687632, 0.527779816134579, 0.575087310286229, 0.610944280683879, 0.629558092279953, 0.691296247199942, 0.711488581391825, 0.750686318686447, 0.77327221606357, 0.799617962600473, 0.815943259058715, 0.834775918746971, 0.86868256825708, 0.824494294548199, 0.85823166081956, 0.811553135153531, 0.853402148208909, 0.809089263203954, 0.852645510217009, 0.80244538007677, 0.854137492959948, };
        public static double[] T12NGUptimesGoSF = new double[21] { 0.531926661274858, 0.54558649082819, 0.578504284608748, 0.596755367491459, 0.609299728333214, 0.663290948770662, 0.686403789278243, 0.72666169987225, 0.75382575897381, 0.744790876103418, 0.777583063491688, 0.789296878541984, 0.80550798994584, 0.796873644698091, 0.808672756076381, 0.795311970898216, 0.813410374613535, 0.804550908829502, 0.81441113364113, 0.806382387886583, 0.800298677300409, };
        public static double[] T12PercentMoonfiresExtended = new double[21] { 0.840376874563675, 0.905982685758106, 0.863127917784665, 0.741967561452619, 0.590596270676661, 0.614945411740169, 0.757490459187219, 0.884635512211833, 0.912806301833305, 0.900985278294025, 0.906162704506545, 0.912030725146393, 0.965967581699562, 0.983115321637554, 0.9859650643276, 0.993559766081925, 0.996507438596522, 0.994256842105312, 0.996862701754415, 0.994725578947415, 0.99734663157897, };

        #endregion

        #region 4T13

        public static double[,] T13CastDistribution = new double[21, 12] {
{ 0.105960012183296, 0.158394920826083, 0.0476879745971285, 0.0346318929270368, 0.13687670014739, 0.189448670865469, 0.0603445982138168, 0.0420596771426671, 0.0511276550306858, 0.081667816144267, 0.0611701215178706, 0.0306299604042894, },
{ 0.106490497749029, 0.15829971710782, 0.0492035547188694, 0.0354119666896086, 0.139629924840863, 0.196148144861502, 0.0552670643390875, 0.040718902152266, 0.0474331676687709, 0.0795883616815349, 0.0609766726196041, 0.0308320255710445, },
{ 0.111877840651074, 0.167859802640152, 0.0435396832291515, 0.0340277125132778, 0.143536919085621, 0.200979454516018, 0.0541663145674313, 0.04264552228492, 0.040803812938561, 0.06924542830404, 0.0598795623176159, 0.0314379469521369, },
{ 0.113607440085726, 0.167195636820763, 0.0431386577287201, 0.0346028299903244, 0.145086872565445, 0.204056738074466, 0.053456429889097, 0.0414153820588419, 0.0373526502578095, 0.0728231435224782, 0.0605337841630522, 0.0267304348432767, },
{ 0.119354535400062, 0.172227662673946, 0.0406811397561574, 0.0336139281707742, 0.14890547566707, 0.209512203866757, 0.0502707818656281, 0.043000255295657, 0.0371186638116174, 0.0614109167187553, 0.0540983448403567, 0.0298060919332188, },
{ 0.119484990311092, 0.175736375085252, 0.039314234576232, 0.0341048134208523, 0.150752342839409, 0.211541961814514, 0.0482011828767939, 0.0426336510044349, 0.0343959497836685, 0.0615121914254062, 0.0539658849383482, 0.0283564219239971, },
{ 0.121910882600432, 0.180783435176394, 0.0386844319656761, 0.033993596570151, 0.155007273495615, 0.215858524023188, 0.0457224061263645, 0.0423864479445954, 0.0330398604505596, 0.0549311758385438, 0.0497866405982324, 0.0278953252102482, },
{ 0.123005731187438, 0.181042559537639, 0.037564954274018, 0.0343981127896523, 0.155686778049569, 0.217953122379141, 0.0438186751903037, 0.0430512248293293, 0.0321773124092235, 0.0549815895317494, 0.0490478492127511, 0.0272720906091851, },
{ 0.125744212912221, 0.185226229304461, 0.0351155636885133, 0.034396663931802, 0.158168630500876, 0.223522807751788, 0.0427096945486546, 0.042291912353176, 0.032683413076681, 0.052547102118028, 0.0437287294275733, 0.0238650403862263, },
{ 0.126469786815999, 0.185207129512305, 0.0355166965827266, 0.0352456802960896, 0.159030964038411, 0.223835748001285, 0.0388980463122601, 0.0432773175985855, 0.0336113958805036, 0.052234540280376, 0.0424617027594052, 0.0242109919220529, },
{ 0.128608298540183, 0.18587767782241, 0.0368542405920442, 0.0372747265288316, 0.162136040948313, 0.230554797543212, 0.0349156336096077, 0.0418682046366426, 0.0439560237285219, 0.0556992583341348, 0.0269846130908144, 0.0152704846252855, },
{ 0.129928886343129, 0.187783098976221, 0.0334209327539081, 0.0363984276375094, 0.161802043925939, 0.229487892447845, 0.0359003244141299, 0.0429625381651162, 0.0393561709347688, 0.051222447246521, 0.0317615724714649, 0.0199756646834485, },
{ 0.132127287094104, 0.188421726020828, 0.0315056355568709, 0.0358106609888904, 0.162474502000929, 0.230961625610085, 0.0348320205468251, 0.0443572135736989, 0.0250115548822507, 0.0527614307617245, 0.0440804377704457, 0.0176559051933472, },
{ 0.134402413251007, 0.191432891100395, 0.0303452706482115, 0.0355308904225584, 0.163404304114222, 0.232416466385514, 0.0334840272821825, 0.0449711113998429, 0.0242137953531099, 0.044674478391149, 0.0427925173449237, 0.0223318343068845, },
{ 0.135460250102055, 0.192211556377539, 0.030699053132752, 0.034820529453639, 0.163680471984419, 0.232254321206546, 0.0325068969965352, 0.0468855621456945, 0.0216679026494977, 0.0397105623713034, 0.0434415495137199, 0.0266613440663003, },
{ 0.137099853793111, 0.192171920402555, 0.030007743452845, 0.0364026280491486, 0.165659912800846, 0.235066764312919, 0.0315484543280652, 0.0437641055524494, 0.0259639286342387, 0.0440910630054572, 0.0381753800197917, 0.0200482456485732, },
{ 0.137751125348778, 0.192697008367672, 0.0287467260922911, 0.0365091616447677, 0.165313463139999, 0.234019877455637, 0.0321056077403089, 0.045705735423584, 0.024448109131223, 0.0429088160924101, 0.0383751403781468, 0.0214192291851826, },
{ 0.139594417142516, 0.193018244762341, 0.0277495473627664, 0.0373324247428424, 0.166269373868407, 0.235287200811763, 0.0309395953124689, 0.0454750203935457, 0.0258144485784206, 0.0420828276397207, 0.0363526392232546, 0.0200842601619546, },
{ 0.139797519177184, 0.193054830183311, 0.0270989454165262, 0.037842943562226, 0.165900872535765, 0.23439398506413, 0.0308808622097806, 0.0469638321937943, 0.0236680922096513, 0.0415261765703604, 0.0380984072317706, 0.0207735336455004, },
{ 0.140447876262798, 0.193466706879127, 0.0278278880069666, 0.0387778274885454, 0.16688833452506, 0.236420904620571, 0.0291751718683215, 0.0465522475702753, 0.0263305064772686, 0.0421853341695395, 0.0338910149118988, 0.0180361872196279, },
{ 0.13928702471169, 0.190108174157066, 0.025854849913136, 0.0456451548036883, 0.165925661857326, 0.233647639328781, 0.0274699898265549, 0.0511529159655563, 0.0248538901635348, 0.0422018731253727, 0.0349516674470114, 0.0189011587002816, },
};
        public static double[,] T13CastDistributionGoSF = new double[21, 12] {
{ 0.110240654068727, 0.164219297312975, 0.0488448633631972, 0.0353164348220427, 0.142299474832689, 0.195706914546216, 0.0625711066123635, 0.0423128191886776, 0.0415273465272489, 0.0818493613875816, 0.04350187725073, 0.031609850087552, },
{ 0.112396304475862, 0.167143852660271, 0.0481389918612081, 0.0356366671199804, 0.145277927015105, 0.204934535804117, 0.0570630680103369, 0.0420075353502866, 0.047562438800487, 0.0809906232995347, 0.0268030813615477, 0.0320449742412639, },
{ 0.115137551305554, 0.172553557495371, 0.046511156988219, 0.0359753713743177, 0.150674455541392, 0.21008405831466, 0.0542484281320516, 0.0415185104985527, 0.0556218019252055, 0.0733019074055385, 0.0159228075744912, 0.0284503934446468, },
{ 0.115254963091366, 0.17273714873986, 0.047057066761055, 0.0359480537539514, 0.152748889343624, 0.212561813962786, 0.0514285849728173, 0.0412235826539295, 0.0632619442471437, 0.073183939549322, 0.00621793752513445, 0.0283760753990107, },
{ 0.11924646667877, 0.175665010957355, 0.045162680482221, 0.0360841292453207, 0.155262163151105, 0.217341012159058, 0.0480725481783683, 0.0414282273684782, 0.0622348875291153, 0.0627765978204457, 0.00739280426442364, 0.0293334721653383, },
{ 0.121612341726743, 0.177476161275756, 0.0426918299109002, 0.0359832811197773, 0.156526020975617, 0.218952993743158, 0.045438093112906, 0.0420282521314435, 0.0521546950324204, 0.0613673274917404, 0.0163908982664397, 0.0293781052130975, },
{ 0.124384629868078, 0.180635080925599, 0.0418108314819536, 0.0357377325457707, 0.158686907552326, 0.220087578739356, 0.0439677095900507, 0.04313151446334, 0.0357272498681938, 0.0564439774127865, 0.0312620324003437, 0.0281247551522024, },
{ 0.126732031287814, 0.183626120838516, 0.0391950409519939, 0.0351849138021768, 0.15976674250543, 0.222668581473666, 0.0427783990785114, 0.0438779695340817, 0.0266842594364155, 0.054241230017241, 0.0366164604128491, 0.0286282506613043, },
{ 0.128320188520046, 0.187310572818467, 0.0368019112732256, 0.0355209123876623, 0.161704651513695, 0.227209744846368, 0.0409208115547144, 0.0437354514637881, 0.028195534316975, 0.0540225019433293, 0.0319530729979043, 0.0243046463638253, },
{ 0.129757698848946, 0.189072386964488, 0.0365926347703322, 0.0358433987021876, 0.162940039195408, 0.22901404219833, 0.0390033665806839, 0.0437418861818751, 0.0270934273465187, 0.0524928538621027, 0.0296207291302386, 0.0248275362188885, },
{ 0.130974663667732, 0.190529158445108, 0.0361949257865661, 0.0373865644935663, 0.16490533697139, 0.233249151368451, 0.0366355959108221, 0.0435799133155784, 0.026616544974867, 0.0565045388096534, 0.0279499020823111, 0.0154737041739542, },
{ 0.131921822034314, 0.192030269415405, 0.0337647065484023, 0.0370576885948853, 0.164795837077284, 0.23346423536809, 0.0361513993007338, 0.0440766935183562, 0.0266509595008615, 0.0536410264823878, 0.0279945645750186, 0.0184507975842607, },
{ 0.133666423061363, 0.191794797502099, 0.0322106518204594, 0.0378412330486586, 0.165738551996016, 0.235295744660833, 0.0346419438456334, 0.0441757644575894, 0.0242279021139703, 0.0572087049051045, 0.0288142338953259, 0.0143840486929482, },
{ 0.136162165191381, 0.194251681834722, 0.0312227562028865, 0.0366328734674499, 0.166186342220976, 0.235922503138432, 0.0336513230676958, 0.0457339218773345, 0.0211885951367782, 0.0472188348708986, 0.0310257000200391, 0.0208033029714072, },
{ 0.137508469664865, 0.195090341296524, 0.0308188078805317, 0.0366060800613586, 0.166842433532655, 0.237010792695998, 0.0324016791750196, 0.0461967030516647, 0.0196239845827862, 0.0442899108382625, 0.0305948532445414, 0.0230159439757926, },
{ 0.13852226066826, 0.195316211367012, 0.030781007485387, 0.0369236507011723, 0.167970620976495, 0.238348094448471, 0.0320057859656335, 0.0451385680044137, 0.0194832296114512, 0.045062328428759, 0.0304726493098, 0.0199755930331452, },
{ 0.139709540468831, 0.195779373665447, 0.0297405429676407, 0.0377136078015042, 0.168337731562294, 0.238785776291864, 0.0312436394370979, 0.0458197435501687, 0.0211462789087741, 0.0450708164092165, 0.0270527121112578, 0.0196002368259038, },
{ 0.141316426648812, 0.195822343403207, 0.0282557989601009, 0.0382932852914226, 0.16868082296794, 0.238649220802099, 0.0310346344482374, 0.0464030818821177, 0.0207249348373067, 0.0435711759028491, 0.0277277173049957, 0.0195205575509119, },
{ 0.141748371621594, 0.19575046741426, 0.0279752987211223, 0.0392148449961436, 0.16875996914864, 0.238433869463211, 0.0300608950932608, 0.0470456995868987, 0.0210888632242902, 0.0424259708688858, 0.0268615807687804, 0.0206341690929135, },
{ 0.141989622465868, 0.195833942940378, 0.0282287415465166, 0.0397491315553987, 0.168863551164349, 0.23945670141989, 0.0290239074373335, 0.0476655482118535, 0.0218740601017333, 0.0430714689705567, 0.0261538791498884, 0.0180894450362346, },
{ 0.141511103238219, 0.193335104734068, 0.0261876995901176, 0.0457083388689606, 0.168509021842355, 0.237028081622209, 0.0272790792652623, 0.0518959400479262, 0.0213802164061231, 0.0421240078925744, 0.02606025714834, 0.0189811493438436, },
};
        public static double[] T13RotationDurations = new double[21] { 61.515328447205, 58.1942288524102, 54.3293547261433, 51.6436392732621, 48.7378748047504, 46.2805373341063, 43.9488298134524, 42.1308800269358, 40.267852361378, 38.894398802417, 37.2469446157225, 36.1546321834921, 35.0566567906913, 33.9773112594167, 32.9812130569688, 32.3409833878916, 31.8351610251102, 31.4941656585011, 31.0515452099813, 30.6980792444656, 30.3682457138717, };
        public static double[] T13RotationDurationsGoSF = new double[21] { 60.0254419378886, 56.4845939544514, 52.9933864822134, 50.3977324595676, 47.8171452334946, 45.6507673182608, 43.6219678260871, 41.66248679959, 39.917693466968, 38.3901596410888, 36.9853423768116, 35.8647562664078, 34.857836659002, 33.7049642461403, 32.7615367167875, 32.0589240543307, 31.5663777873331, 31.1714803625987, 30.7840966289638, 30.3830660916281, 30.0692437776399, };
        public static double[] T13NGUptimes = new double[21] { 0.477456033769048, 0.495054278383843, 0.537529192800576, 0.563372996671954, 0.584374037439009, 0.637332057622112, 0.655019780197891, 0.696594314390039, 0.718767275090717, 0.741910542333968, 0.773379031407359, 0.796081694050174, 0.805727328131006, 0.825985990514264, 0.850778309710196, 0.81479491603662, 0.844479622594116, 0.8074875104728, 0.845927692402725, 0.80078943954875, 0.837064798295184, };
        public static double[] T13NGUptimesGoSF = new double[21] { 0.48911149258765, 0.509681310374067, 0.549167121937443, 0.573433623609078, 0.589711256726252, 0.619198193840495, 0.622424656788965, 0.669869534179429, 0.689634243663873, 0.71896393409224, 0.725139124497645, 0.751559402874157, 0.74636033430887, 0.78768708803863, 0.797452809663328, 0.782183142342108, 0.790208888444136, 0.785889065793166, 0.794085151067905, 0.797255335159403, 0.788360958623814, };
        public static double[] T13PercentMoonfiresExtended = new double[21] { 0.589144522886975, 0.792902839746323, 0.877834110766834, 0.904797450636141, 0.842255614035059, 0.704747104525991, 0.57856645614032, 0.638496252985429, 0.749199916457845, 0.852430412108694, 0.927527261782257, 0.929241649123193, 0.915801367340167, 0.909865754386118, 0.910004257310124, 0.91327808354233, 0.978643081036071, 0.963198085213239, 0.982278315789611, 0.971084997493931, 0.98092832247299, };

        #endregion

        public static string[] CastDistributionSpells = new string[12] { "Starfire", "Wrath", "Starsurge", "Shooting Stars", "Starfire (Eclipse)", "Wrath (Eclipse)", "Starsurge (Eclipse)", "Shooting Stars (Eclipse)", "Moonfire", "Insect Swarm", "Moonfire (Eclipse)", "Insect Swarm (Eclipse)" };

        #endregion

        // A list of all the damage spells
        private Spell[] _spellData = null;
        private Spell[] SpellData
        {
            get
            {
                if (_spellData == null)
                {
                    _spellData = new Spell[] {
                        new Spell()
                        {
                            Name = "SF",
                            BaseDamage = (1214f + 1514f) / 2.0f,
                            SpellDamageModifier = 1.231f,
                            BaseCastTime = 3.2f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Arcane,
                            BaseEnergy = 20
                        },
                        new Spell()
                        {
                            Name = "MF",
                            BaseDamage = (197.0f + 239.0f) / 2.0f,
                            SpellDamageModifier = 0.18f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = new DotEffect()
                                {
                                    BaseDuration = 12.0f,
                                    BaseTickLength = 2.0f,
                                    TickDamage = 93.0f,
                                    SpellDamageModifierPerTick = 0.18f
                                },
                            School = SpellSchool.Arcane
                        },
                        new Spell()
                        {
                            Name = "W",
                            BaseDamage = (831f + 937f) / 2.0f,
                            SpellDamageModifier = 3.075f/3.5f,
                            BaseCastTime = 2.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = null,
                            School = SpellSchool.Nature,
                            BaseEnergy = 40/3f
                        },
                        new Spell()
                        {
                            Name = "IS",
                            BaseDamage = 0.0f,
                            SpellDamageModifier = 0.0f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.08f),
                            DotEffect = new DotEffect()
                            {
                                BaseDuration = 12.0f,
                                BaseTickLength = 2.0f,
                                TickDamage = 136.0f,
                                SpellDamageModifierPerTick = 0.13f
                            },
                            School = SpellSchool.Nature
                        },
                        new Spell()
                        {
                            Name = "SS",
                            BaseDamage = (1018 + 1404) / 2f,
                            SpellDamageModifier = 1.228f,
                            BaseCastTime = 2.0f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Spellstorm,
                            BaseEnergy = 15
                        }
                    };
                }
                return _spellData;
            }
        }
        public Spell Starfire
        {
            get
            {
                return SpellData[0];
            }
        }
        public Spell Moonfire
        {
            get
            {
                return SpellData[1];
            }
        }
        public Spell Wrath
        {
            get
            {
                return SpellData[2];
            }
        }
        public Spell InsectSwarm
        {
            get
            {
                return SpellData[3];
            }
        }
        public Spell Starsurge
        {
            get
            {
                return SpellData[4];
            }
        }
        private void ResetSpellList()
        {
            // Since the property rebuilding the array is based on this variable being null, this effectively forces a refresh
            _spellData = null;
        }

        // The spell rotations themselves.
        private SpellRotation[] rotations = null;
        public SpellRotation[] Rotations
        {
            get
            {
                if (rotations == null)
                {
                    rotations = new SpellRotation[3]
                    {
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Unused" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Lunar Only", StarfallCastMode = StarfallMode.LunarOnly } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall On CD", StarfallCastMode = StarfallMode.OnCooldown } },
                    };
                    //RecreateRotations();
                }
                return rotations;
            }
        }

        // Results data from the calculations, which will be sent to the UI.
        RotationData[] cachedResults = new RotationData[3];

        public void Solve(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            CalculationOptionsMoonkin calcOpts = character.CalculationOptions as CalculationOptionsMoonkin;
            DruidTalents talents = character.DruidTalents;
            procEffects = new List<ProcEffect>();
            UpdateSpells(character, ref calcs);

            float trinketDPS = 0.0f;
            float baseSpellPower = calcs.SpellPower;
            float baseHit = 1 - Math.Max(0, calcs.SpellHitCap - calcs.SpellHit);
            float baseCrit = calcs.SpellCrit;
            float baseHaste = calcs.SpellHaste;
            float baseMastery = calcs.Mastery;
            float sub35PercentTime = (float)(character.BossOptions.Under20Perc + character.BossOptions.Under35Perc);

            BuildProcList(calcs);

            float maxDamageDone = 0.0f, maxBurstDamageDone = 0.0f;
            SpellRotation maxBurstRotation = Rotations[0];
            SpellRotation maxRotation = Rotations[0];

            float manaPool = GetEffectiveManaPool(character, calcOpts, calcs);

            float manaGained = manaPool - calcs.BasicStats.Mana;

            float oldArcaneMultiplier = calcs.BasicStats.BonusArcaneDamageMultiplier;
            float oldNatureMultiplier = calcs.BasicStats.BonusNatureDamageMultiplier;

            int rotationIndex = 1;
            foreach (SpellRotation rot in Rotations)
            {
                if (rot.RotationData.Name == "None") continue;
                rot.Solver = this;

                // Reset variables modified in the pre-loop to base values
                float currentSpellPower = baseSpellPower;
                float currentCrit = baseCrit + StatConversion.NPC_LEVEL_SPELL_CRIT_MOD[character.BossOptions.Level - character.Level];
                float currentHaste = baseHaste;
                float currentMastery = baseMastery;
                float currentTrinketDPS = trinketDPS;
                calcs.BasicStats.BonusArcaneDamageMultiplier = oldArcaneMultiplier;
                calcs.BasicStats.BonusNatureDamageMultiplier = oldNatureMultiplier;
                float accumulatedDamage = 0.0f;
                float totalUpTime = 0.0f;
                float[] spellDetails = new float[NUM_SPELL_DETAILS];
                List<ProcEffect> activatedEffects = new List<ProcEffect>();
                List<ProcEffect> alwaysUpEffects = new List<ProcEffect>();

                float baselineDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);

                // Calculate spell power/spell damage modifying trinkets in a separate pre-loop
                // Add spell crit effects here as well, since they no longer affect timing
                foreach (ProcEffect proc in procEffects)
                {
                    bool handled = false;
                    if (proc.Effect.Stats.SpellPower > 0 || proc.Effect.Stats.CritRating > 0 || proc.Effect.Stats.MasteryRating > 0)
                    {
                        handled = true;
                        float procSpellPower = proc.Effect.Stats.SpellPower;
                        float procSpellCrit = StatConversion.GetSpellCritFromRating(proc.Effect.Stats.CritRating);
                        float procMastery = StatConversion.GetMasteryFromRating(proc.Effect.Stats.MasteryRating);

                        float triggerInterval = 0.0f, triggerChance = 1.0f;
                        switch (proc.Effect.Trigger)
                        {
                            case Trigger.DamageDone:
                            case Trigger.DamageOrHealingDone:
                                triggerInterval = ((rot.RotationData.Duration / rot.RotationData.CastCount) + (rot.RotationData.Duration / (rot.RotationData.MoonfireTicks + rot.RotationData.InsectSwarmTicks))) / 2.0f;
                                break;
                            case Trigger.Use:
                                break;
                            case Trigger.SpellHit:
                            case Trigger.DamageSpellHit:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                triggerChance = baseHit;
                                break;
                            case Trigger.SpellCrit:
                            case Trigger.DamageSpellCrit:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts);
                                triggerChance = baseCrit;
                                break;
                            case Trigger.SpellCast:
                            case Trigger.DamageSpellCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                break;
                            case Trigger.MoonfireCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireCasts;
                                break;
                            case Trigger.DoTTick:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.InsectSwarmTicks + rot.RotationData.MoonfireTicks);
                                break;
                            case Trigger.MoonfireTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireTicks;
                                break;
                            case Trigger.InsectSwarmTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.InsectSwarmTicks;
                                break;
                            default:
                                triggerChance = 0.0f;
                                break;
                        }
                        if (triggerChance > 0)
                        {
                            float durationMultiplier = proc.Effect.LimitedToExecutePhase ? sub35PercentTime : 1f;
                            currentSpellPower += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                            proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellPower * durationMultiplier;
                            currentCrit += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellCrit * durationMultiplier;
                            currentMastery += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procMastery * durationMultiplier;
                        }
                    }
                    // 2T10 (both if statements, which is why it isn't else-if)
                    if (proc.Effect.Stats.BonusArcaneDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusArcaneDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusArcaneDamageMultiplier;
                    }
                    if (proc.Effect.Stats.BonusNatureDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusNatureDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusNatureDamageMultiplier;
                    }
                    // Variable Pulse Lightning Capacitor
                    // This might catch some other effects, I probably need a better way to differentiate
                    if (proc.Effect.Trigger == Trigger.DamageSpellCrit && proc.Effect.Stats.NatureDamage > 0)
                    {
                        float procInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts + rot.RotationData.DotTicks);
                        currentTrinketDPS += proc.Effect.GetAverageProcsPerSecond(procInterval, currentCrit, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.NatureDamage;
                    }
                    // Nested special effects
                    if (proc.Effect.Stats._rawSpecialEffectDataSize > 0)
                    {
                        handled = true;
                        SpecialEffect childEffect = proc.Effect.Stats._rawSpecialEffectData[0];
                        // Heart of Ignacious
                        if (childEffect.Stats.SpellPower > 0)
                        {
                            float averageStack = childEffect.GetAverageStackSize(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit, 3.0f, proc.Effect.Duration);
                            currentSpellPower += childEffect.Stats.SpellPower * averageStack * proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit);
                        }
                        // 4T11
                        if (childEffect.Stats.SpellCrit != 0)
                        {
                            float maxStack = proc.Effect.Stats.SpellCrit;
                            float numNegativeStacks = childEffect.GetAverageStackSize(rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts), Math.Min(1.0f, baseCrit + maxStack), 3.0f, proc.Effect.Duration);
                            float averageNegativeValue = childEffect.Stats.SpellCrit * numNegativeStacks;
                            float averageCrit = maxStack + averageNegativeValue;
                            currentCrit += averageCrit * proc.Effect.GetAverageUptime(rot.RotationData.Duration / 2f, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f);
                        }
                    }
                    if (!handled)
                    {
                        if (proc.CalculateDPS != null)
                        {
                            accumulatedDamage += proc.CalculateDPS(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) * rot.RotationData.Duration;
                        }
                        if (proc.Activate != null)
                        {
                            float upTime = proc.UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            // Procs with 100% uptime should be activated and not put into the combination loop
                            if (upTime == 1)
                            {
                                alwaysUpEffects.Add(proc);
                                proc.Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                            }
                            // Procs with uptime 0 < x < 100 should be activated
                            else if (upTime > 0)
                                activatedEffects.Add(proc);
                        }
                        if (proc.CalculateMP5 != null)
                        {
                            manaGained += proc.CalculateMP5(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) / 5.0f * character.BossOptions.BerserkTimer * 60.0f;
                        }
                    }
                }
                // Calculate stat-boosting trinkets, taking into effect interactions with other stat-boosting procs
                int sign = 1;
                float[] cachedDamages = new float[1 << activatedEffects.Count];
                float[] cachedUptimes = new float[1 << activatedEffects.Count];
                float[,] cachedDetails = new float[1 << activatedEffects.Count, NUM_SPELL_DETAILS];
                List<int> calculatedPairs = new List<int>();
                // Iterate over the entire set of trinket combinations (each trinket by itself, 2 at a time, ...)
                for (int i = 1; i <= activatedEffects.Count; ++i)
                {
                    // Create a new combination generator for this "level" of trinket interaction
                    CombinationGenerator gen = new CombinationGenerator(activatedEffects.Count, i);
                    // Iterate over all combinations
                    while (gen.HasNext())
                    {
                        float tempUpTime = 1.0f;
                        int[] vals = gen.GetNext();
                        int pairs = 0;
                        int lengthCounter = 0;
                        // Activate the trinkets, calculate the damage and uptime, then deactivate them
                        foreach (int idx in vals)
                        {
                            pairs |= 1 << idx;
                            ++lengthCounter;
                            activatedEffects[idx].Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        currentCrit = (float)Math.Min(1.0f, currentCrit);
                        float tempDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency) / rot.RotationData.Duration;
                        spellDetails[0] = rot.RotationData.StarfireAvgHit;
                        spellDetails[1] = rot.RotationData.WrathAvgHit;
                        spellDetails[2] = rot.RotationData.MoonfireAvgHit;
                        spellDetails[3] = rot.RotationData.InsectSwarmAvgHit;
                        spellDetails[4] = rot.RotationData.StarSurgeAvgHit;
                        spellDetails[5] = rot.RotationData.StarfireAvgCast;
                        spellDetails[6] = rot.RotationData.WrathAvgCast;
                        spellDetails[7] = rot.RotationData.MoonfireAvgCast;
                        spellDetails[8] = rot.RotationData.InsectSwarmAvgCast;
                        spellDetails[9] = rot.RotationData.StarSurgeAvgCast;
                        spellDetails[10] = rot.RotationData.AverageInstantCast;
                        spellDetails[11] = rot.RotationData.StarfireAvgEnergy;
                        spellDetails[12] = rot.RotationData.WrathAvgEnergy;
                        spellDetails[13] = rot.RotationData.StarSurgeAvgEnergy;
                        spellDetails[14] = rot.RotationData.TreantDamage;
                        spellDetails[15] = rot.RotationData.StarfallDamage;
                        spellDetails[16] = rot.RotationData.MushroomDamage;
                        foreach (int idx in vals)
                        {
                            tempUpTime *= activatedEffects[idx].UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            activatedEffects[idx].Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        if (tempUpTime == 0) continue;
                        // Adjust previous probability tables by the current factor
                        // At the end of the algorithm, this ensures that the probability table will contain the individual
                        // probabilities of each effect or set of effects.
                        // These adjustments only need to be made for higher levels of the table, and if the current probability is > 0.
                        if (lengthCounter > 1)
                        {
                            foreach (int subset in calculatedPairs)
                            {
                                // Truly a subset?
                                if ((pairs & subset) != subset)
                                {
                                    continue;
                                }

                                // Calculate the "layer" of the current subset by getting the set bit count.
                                int subsetLength = 0;
                                for (int j = subset; j > 0; ++subsetLength)
                                {
                                    j &= --j;
                                }

                                // Set the sign of the operation: Evenly separated layers are added, oddly separated layers are subtracted
                                int newSign = ((lengthCounter - subsetLength) % 2 == 0) ? 1 : -1;

                                // Adjust by current uptime * sign of operation.
                                cachedUptimes[subset] += newSign * tempUpTime;
                            }
                        }
                        // Cache the results to be calculated later
                        cachedUptimes[pairs] = tempUpTime;
                        cachedDamages[pairs] = tempDPS;
                        for (int idx = 0; idx < NUM_SPELL_DETAILS; ++idx)
                        {
                            cachedDetails[pairs, idx] = spellDetails[idx];
                        }
                        calculatedPairs.Add(pairs);
                        totalUpTime += sign * tempUpTime;
                    }
                    sign = -sign;
                }
                float accumulatedDPS = 0.0f;
                Array.Clear(spellDetails, 0, spellDetails.Length);
                // Apply the above-calculated probabilities to the previously stored damage calculations and add to the result.
                for (int idx = 0; idx < cachedUptimes.Length; ++idx)
                {
                    if (cachedUptimes[idx] == 0) continue;
                    accumulatedDPS += cachedUptimes[idx] * cachedDamages[idx];
                    for (int i = 0; i < NUM_SPELL_DETAILS; ++i)
                    {
                        spellDetails[i] += cachedUptimes[idx] * cachedDetails[idx,i];
                    }
                }
                float damageDone = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);
                accumulatedDPS += (1 - totalUpTime) * damageDone / rot.RotationData.Duration;
                spellDetails[0] += (1 - totalUpTime) * rot.RotationData.StarfireAvgHit;
                spellDetails[1] += (1 - totalUpTime) * rot.RotationData.WrathAvgHit;
                spellDetails[2] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgHit;
                spellDetails[3] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgHit;
                spellDetails[4] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgHit;
                spellDetails[5] += (1 - totalUpTime) * rot.RotationData.StarfireAvgCast;
                spellDetails[6] += (1 - totalUpTime) * rot.RotationData.WrathAvgCast;
                spellDetails[7] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgCast;
                spellDetails[8] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgCast;
                spellDetails[9] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgCast;
                spellDetails[10] += (1 - totalUpTime) * rot.RotationData.AverageInstantCast;
                spellDetails[11] += (1 - totalUpTime) * rot.RotationData.StarfireAvgEnergy;
                spellDetails[12] += (1 - totalUpTime) * rot.RotationData.WrathAvgEnergy;
                spellDetails[13] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgEnergy;
                spellDetails[14] += (1 - totalUpTime) * rot.RotationData.TreantDamage;
                spellDetails[15] += (1 - totalUpTime) * rot.RotationData.StarfallDamage;
                spellDetails[16] += (1 - totalUpTime) * rot.RotationData.MushroomDamage;

                float burstDPS = accumulatedDPS + accumulatedDamage / rot.RotationData.Duration;
                float sustainedDPS = burstDPS;

                // Mana calcs:
                // Main rotation - all spells
                // Movement rotation - Lunar Shower MF, IS, Shooting Stars procs, and Starfall only
                rot.RotationData.ManaGained += manaGained / (character.BossOptions.BerserkTimer * 60.0f) * rot.RotationData.Duration;
                float timeToOOM = manaPool / ((rot.RotationData.ManaUsed - rot.RotationData.ManaGained) / rot.RotationData.Duration);
                if (timeToOOM <= 0) timeToOOM = character.BossOptions.BerserkTimer * 60.0f;   // Happens when ManaUsed is less than 0
                if (timeToOOM < character.BossOptions.BerserkTimer * 60.0f)
                {
                    rot.RotationData.TimeToOOM = new TimeSpan(0, (int)(timeToOOM / 60), (int)(timeToOOM % 60));
                    sustainedDPS = burstDPS * timeToOOM / (character.BossOptions.BerserkTimer * 60.0f);
                }
                
                burstDPS += currentTrinketDPS;
                sustainedDPS += currentTrinketDPS;

                rot.RotationData.SustainedDPS = sustainedDPS;
                rot.RotationData.BurstDPS = burstDPS;
                rot.RotationData.StarfireAvgHit = spellDetails[0];
                rot.RotationData.WrathAvgHit = spellDetails[1];
                rot.RotationData.MoonfireAvgHit = spellDetails[2];
                rot.RotationData.InsectSwarmAvgHit = spellDetails[3];
                rot.RotationData.StarSurgeAvgHit = spellDetails[4];
                rot.RotationData.StarfireAvgCast = spellDetails[5];
                rot.RotationData.WrathAvgCast = spellDetails[6];
                rot.RotationData.MoonfireAvgCast = spellDetails[7];
                rot.RotationData.InsectSwarmAvgCast = spellDetails[8];
                rot.RotationData.StarSurgeAvgCast = spellDetails[9];
                rot.RotationData.AverageInstantCast = spellDetails[10];
                rot.RotationData.StarfireAvgEnergy = spellDetails[11];
                rot.RotationData.WrathAvgEnergy = spellDetails[12];
                rot.RotationData.StarSurgeAvgEnergy = spellDetails[13];
                rot.RotationData.TreantDamage = spellDetails[14];
                rot.RotationData.StarfallDamage = spellDetails[15];
                rot.RotationData.MushroomDamage = spellDetails[16];

                // Update the sustained DPS rotation if any one of the following three cases is true:
                // 1) No user rotation is selected and sustained DPS is maximum
                // 2) A user rotation is selected, Eclipse is not present, and the user rotation matches the current rotation
                // 3) A user rotation is selected, Eclipse is present, and the user rotation's dot spells matches this rotation's
                if ((calcOpts.UserRotation == "None" && sustainedDPS > maxDamageDone) || rot.RotationData.Name == calcOpts.UserRotation)
                {
                    maxDamageDone = sustainedDPS;
                    maxRotation = rot;
                }
                if (burstDPS > maxBurstDamageDone)
                {
                    maxBurstDamageDone = burstDPS;
                    maxBurstRotation = rot;
                }
                cachedResults[rotationIndex - 1] = rot.RotationData;

                // Deactivate always-up procs
                foreach (ProcEffect proc in alwaysUpEffects)
                {
                    proc.Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                }

                ++rotationIndex;
            }
            // Present the findings to the user.
            calcs.SelectedRotation = maxRotation.RotationData;
            calcs.BurstRotation = maxBurstRotation.RotationData;
            calcs.SubPoints = new float[] { maxBurstDamageDone, maxDamageDone };
            calcs.OverallPoints = calcs.SubPoints[0] + calcs.SubPoints[1];
            calcs.Rotations = cachedResults;
        }

        // Create proc effect calculations for proc-based trinkets.
        private void BuildProcList(CharacterCalculationsMoonkin calcs)
        {
            // Implement a new handler for each special effect in the calculations stats
            foreach (SpecialEffect effect in calcs.BasicStats.SpecialEffects())
            {
                procEffects.Add(new ProcEffect(effect));
            }
        }

        // Non-rotation-specific mana calculations
        private float GetEffectiveManaPool(Character character, CalculationOptionsMoonkin calcOpts, CharacterCalculationsMoonkin calcs)
        {
            float fightLength = character.BossOptions.BerserkTimer * 60.0f;

            float innervateCooldown = 180;

            // Mana/5 calculations
            float totalManaRegen = calcs.ManaRegen * fightLength;

            // Mana pot calculations
            float manaRestoredByPots = 0.0f;
            foreach (Buff b in character.ActiveBuffs)
            {
                if (b.Stats.ManaRestore > 0)
                {
                    manaRestoredByPots = b.Stats.ManaRestore;
                    break;
                }
            }

            // Innervate calculations
            float innervateDelay = calcOpts.InnervateDelay * 60.0f;
            int numInnervates = (calcOpts.Innervate && fightLength - innervateDelay > 0) ? ((int)(fightLength - innervateDelay) / (int)innervateCooldown + 1) : 0;
            float totalInnervateMana = numInnervates * 0.2f * calcs.BasicStats.Mana;
            totalInnervateMana *= 1 + 0.15f * character.DruidTalents.Dreamstate;

            // Replenishment calculations
            float replenishmentPerTick = calcs.BasicStats.Mana * calcs.BasicStats.ManaRestoreFromMaxManaPerSecond;
            float replenishmentMana = calcOpts.ReplenishmentUptime * replenishmentPerTick * character.BossOptions.BerserkTimer * 60;

            return calcs.BasicStats.Mana + totalInnervateMana + totalManaRegen + manaRestoredByPots + replenishmentMana;
        }

        /*private void RecreateRotations()
        {
            rotations[0] = new SpellRotation() { RotationData = new RotationData() { Name = "None" } };
            for (int mfMode = 0; mfMode < 2; ++mfMode)
            {
                for (int isMode = 0; isMode < 2; ++isMode)
                {
                    for (int sfMode = 0; sfMode < 3; ++sfMode)
                    {
                        for (int wmMode = 0; wmMode < 3; ++wmMode)
                        {
                            int index = 1 + (wmMode + 3 * sfMode + 9 * isMode + 18 * mfMode);
                            DotMode mfModeEnum = (DotMode)mfMode;
                            DotMode isModeEnum = (DotMode)isMode;
                            StarfallMode sfModeEnum = (StarfallMode)sfMode;
                            MushroomMode wmModeEnum = (MushroomMode)wmMode;
                            string name = String.Format("MF {0} IS {1} SF {2} WM {3}",
                                mfModeEnum.ToString(),
                                isModeEnum.ToString(),
                                sfModeEnum.ToString(),
                                wmModeEnum.ToString());
                            rotations[index] = new SpellRotation()
                            {
                                RotationData = new RotationData()
                                {
                                    Name = name,
                                    MoonfireRefreshMode = mfModeEnum,
                                    InsectSwarmRefreshMode = isModeEnum,
                                    StarfallCastMode = sfModeEnum,
                                    WildMushroomCastMode = wmModeEnum
                                }
                            };
                        }
                    }
                }
            }
        }*/

        // Add talented effects to the spells
        private void UpdateSpells(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            DruidTalents talents = character.DruidTalents;
            StatsMoonkin stats = calcs.BasicStats;

            switch (talents.StarlightWrath)
            {
                case 1:
                    Starfire.BaseCastTime -= 0.15f;
                    Wrath.BaseCastTime -= 0.15f;
                    break;
                case 2:
                    Starfire.BaseCastTime -= 0.25f;
                    Wrath.BaseCastTime -= 0.25f;
                    break;
                case 3:
                    Starfire.BaseCastTime -= 0.5f;
                    Wrath.BaseCastTime -= 0.5f;
                    break;
                default:
                    break;
            }

            float moonfireDotGlyph = talents.GlyphOfMoonfire ? 0.2f : 0.0f;
            float insectSwarmGlyph = talents.GlyphOfInsectSwarm ? 0.3f : 0.0f;
            // Add spell-specific damage
            // Moonfire, Insect Swarm: glyphs
            Moonfire.DotEffect.AllDamageModifier *= 1 + moonfireDotGlyph;
            InsectSwarm.DotEffect.AllDamageModifier *= 1 + insectSwarmGlyph;
            // Moonfire: Direct damage +(0.03 * Blessing of the Grove)
            Moonfire.AllDamageModifier *= 1 + 0.03f * talents.BlessingOfTheGrove;
            // Moonfire, Insect Swarm: +2/4/6 seconds for Genesis
            Moonfire.DotEffect.BaseDuration += 2f * talents.Genesis;
            InsectSwarm.DotEffect.BaseDuration += 2f * talents.Genesis;
            // Wrath: 10% for glyph
            Wrath.AllDamageModifier *= 1 + (talents.GlyphOfWrath ? 0.1f : 0f);

            // Add spell-specific critical strike damage
            // Burning Shadowspirit Diamond
            float baseCritMultiplier = 1.5f * (1 + stats.BonusCritDamageMultiplier);
            float moonfuryMultiplier = baseCritMultiplier + (baseCritMultiplier - 1);
            Starfire.CriticalDamageModifier = Wrath.CriticalDamageModifier = Moonfire.CriticalDamageModifier = InsectSwarm.CriticalDamageModifier = moonfuryMultiplier;
            Starsurge.CriticalDamageModifier = moonfuryMultiplier;

            // Reduce spell-specific mana costs
            // Shard of Woe (Mana cost -405)
            Starfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Moonfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Wrath.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            InsectSwarm.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            Starsurge.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            // All spells: Mana cost -(0.03 * Moonglow)
            Starfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Moonfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Wrath.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            InsectSwarm.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Starsurge.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);

            // Add set bonuses
            Moonfire.CriticalChanceModifier += stats.BonusCritChanceMoonfire;
            InsectSwarm.CriticalChanceModifier += stats.BonusCritChanceInsectSwarm;
            Starfire.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Wrath.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Starsurge.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;

            // Dragonwrath, Tarecgosa's Rest: X% chance on damaging spell cast to proc a duplicate version of the spell.
            // If it duplicates a DoT tick, it fires Wrath of Tarecgosa for an equivalent amount of damage.
            // Wrath, Starfire, and Starsurge will duplicate the Eclipse energy gained.
            if (calcs.BasicStats.DragonwrathProc > 0)
            {
                Starfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Wrath.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Starsurge.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                InsectSwarm.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
            }

            // PTR changes go here
            if (((CalculationOptionsMoonkin)character.CalculationOptions).PTRMode)
            {
            }
        }
    }
}
