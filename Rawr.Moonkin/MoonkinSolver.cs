using System;
using System.Collections.Generic;

namespace Rawr.Moonkin
{
    // The interface public class to the rest of Rawr.  Provides a single Solve method that runs all the calculations.
    public class MoonkinSolver
    {
        private const int NUM_SPELL_DETAILS = 17;
        // A list of all currently active proc effects.
        public List<ProcEffect> procEffects;
        public static float BaseMana = 18635f;
        public static float OOC_PROC_CHANCE = 0.0583f;
        public static float EUPHORIA_PERCENT = 0.08f;
        public static float DRAGONWRATH_PROC_RATE = 0.11f;
        public static float ECLIPSE_BASE = 0.25f;

        #region Cast Distributions

        #region No GoSF

        public static double[,] CastDistribution = new double[21, 12] {
{ 0.105974239206266, 0.163377704768351, 0.0252173766414402, 0.0475397056658842, 0.133840204438339, 0.21219137215457, 0.0288060767707665, 0.0604323769152978, 0.0497043436399167, 0.0783681753609157, 0.061364397729086, 0.0331840267091665, },
{ 0.105560631406665, 0.168126914122989, 0.0230892630335933, 0.0505519631940545, 0.143378629799257, 0.204922757250654, 0.0260506439686876, 0.0612117609550918, 0.0458187766896487, 0.0783857677108027, 0.0612024403502885, 0.0317004515182683, },
{ 0.112689014913511, 0.172082375074126, 0.0220369312597868, 0.046843956308647, 0.140339690178576, 0.218685669896273, 0.0265203424540412, 0.0609690367119678, 0.0397756554512904, 0.0668585834638666, 0.0598268405453601, 0.0333719037425528, },
{ 0.113866060608129, 0.174815716498246, 0.0190031926166687, 0.050318778474358, 0.14823468482902, 0.212714427177588, 0.0241904278587025, 0.061012197380764, 0.0372259364591086, 0.0711633021477761, 0.0603600540164144, 0.0270952219332245, },
{ 0.121272775382108, 0.175403207889136, 0.0194443958051965, 0.0474759553693004, 0.145781421714481, 0.225708174794897, 0.0230490001210391, 0.0609949319261734, 0.0364608844576474, 0.0592633140876545, 0.0539615145471198, 0.0311844239052465, },
{ 0.119399093871397, 0.181556033934, 0.0174416981391238, 0.0492564720374308, 0.152349236037855, 0.219242721137839, 0.0214309135860252, 0.0619494945320648, 0.0345597062690928, 0.0611787260963714, 0.0531554879964387, 0.028480416362362, },
{ 0.125296559194344, 0.182004166246046, 0.0163209932201297, 0.0473960222014086, 0.150364775403804, 0.230962603387307, 0.0214118669852552, 0.06009788740591, 0.0338610303480355, 0.0538704765863868, 0.0491333637090602, 0.0292802553123126, },
{ 0.124062413269113, 0.186789327548925, 0.0155522419204641, 0.049901814707173, 0.155632356710041, 0.225145057616504, 0.0187042384846506, 0.0621650513159779, 0.0318618741572832, 0.0544298275695465, 0.0483251089825292, 0.027430687717792, },
{ 0.130926625243596, 0.184591987184312, 0.0145220064021223, 0.0491979801621023, 0.154831403919158, 0.235631254345007, 0.0185620703391782, 0.0596012634235653, 0.0335453974373962, 0.0519710244568938, 0.0422629016448103, 0.0243560854418586, },
{ 0.127411083939983, 0.1913088594391, 0.0136697231454698, 0.0511210239142477, 0.156094498567366, 0.231845872612449, 0.0167092064944866, 0.0615418561622147, 0.0333025681155723, 0.0509404865506744, 0.0417373312580222, 0.024317489800414, },
{ 0.135253501803583, 0.186815351515912, 0.0122388448015738, 0.0534702994707538, 0.159327472028854, 0.236527166310022, 0.0165175084435375, 0.0591604292917099, 0.0440386856303814, 0.0551889726929465, 0.0262461263837582, 0.0152156416269678, },
{ 0.13117659006015, 0.192121681294313, 0.0119791765418432, 0.0531793311040111, 0.155737778177969, 0.238934101899064, 0.015215079294001, 0.0600482089585524, 0.041850845392434, 0.0511956926636094, 0.0289483867410882, 0.0196131278729643, },
{ 0.134115600697599, 0.191954953820109, 0.0103868982736914, 0.0526562768804472, 0.16075602177402, 0.231562136812852, 0.0148325380637452, 0.0651490834328133, 0.0219645993425672, 0.0496898219515932, 0.0470497145087106, 0.0198823544418516, },
{ 0.136178887159955, 0.190708774955102, 0.0090565625055341, 0.0524876967121531, 0.157844613026022, 0.238946307456609, 0.0145639841824242, 0.0654750989508078, 0.0237766960287298, 0.043678953595469, 0.0435903367776415, 0.0236920886495529, },
{ 0.134546268099713, 0.196907784428871, 0.00884382342177906, 0.052460133998801, 0.159710298304906, 0.235759279214058, 0.013642515870858, 0.066804929674671, 0.0218720511906283, 0.0386326990013898, 0.0437658382998385, 0.0270543784944864, },
{ 0.13831786582655, 0.198659908669226, 0.0102012974605738, 0.0468398301076572, 0.16478176320679, 0.238684268736572, 0.0143473552511434, 0.0585990381597712, 0.0254841733995821, 0.0435124868492108, 0.0392978011509291, 0.0212742111819947, },
{ 0.140235942673006, 0.195432629773621, 0.00904795820467561, 0.0488469235142087, 0.161679822540766, 0.239812719335991, 0.0136752279757137, 0.0636383861638715, 0.0244454675499157, 0.0421012139055079, 0.0393535607200083, 0.0217301476427142, },
{ 0.139749777124537, 0.195286077448776, 0.00843130985524181, 0.0502397582277253, 0.161255366051371, 0.244379455526416, 0.0133769686038826, 0.062268962341115, 0.0263226188498033, 0.0419552033054203, 0.0359480673033317, 0.0207864353623789, },
{ 0.137484890510056, 0.198187969407275, 0.00788931163842912, 0.0526922890225821, 0.159579270720952, 0.241318189097889, 0.0124808371760394, 0.0658785240888254, 0.0246055584110747, 0.0404982183568228, 0.0374764080988945, 0.0219085334711588, },
{ 0.137589620335435, 0.199214109437057, 0.00767807837228865, 0.0542650909848273, 0.164637590325726, 0.240572878444229, 0.011986430859074, 0.0646785700666153, 0.0249648675291273, 0.0399176672604285, 0.034673501089011, 0.0198215952961813, },
{ 0.138627415619282, 0.195526436608086, 0.0072608563757704, 0.0566941719200047, 0.16537512647526, 0.237301438910298, 0.0112449301050145, 0.0670557498593742, 0.0246519530380649, 0.0418130843538439, 0.0349351422389609, 0.0195136944960398, },
};
        public static double[,] T12CastDistribution = new double[21, 12] {
{ 0.0971985137194765, 0.150999105471187, 0.0231133535825933, 0.0433207365786724, 0.15239482257531, 0.215819576621116, 0.0308008296982769, 0.0644134256045865, 0.0448046735966608, 0.0770781016591242, 0.0659033346916372, 0.0341535262013596, },
{ 0.0968699165852116, 0.15361720072948, 0.020566079534176, 0.0459041134905118, 0.146020533735358, 0.227802932335631, 0.0285176305436153, 0.0654489943476865, 0.0406669376332733, 0.0736718270071623, 0.0656084892154984, 0.0353053448423961, },
{ 0.104558299313875, 0.15721987008501, 0.0201230135251706, 0.0430204288725765, 0.157101168544157, 0.225364244946982, 0.0279924290063998, 0.0648825902838809, 0.0365732836419021, 0.065174618727335, 0.0629656538186079, 0.0350243992341029, },
{ 0.102697183045092, 0.163145687305051, 0.0163740114735661, 0.0454263683383106, 0.152429253373924, 0.232925943327349, 0.0264317197092612, 0.0660299056742201, 0.0344482715069033, 0.0638825970213262, 0.0623621311678522, 0.0338469280571443, },
{ 0.110187745017469, 0.16269386343528, 0.0179495099663503, 0.043362647173484, 0.161281855390831, 0.23545879915147, 0.0244948631399209, 0.0645717676523845, 0.0322375671978213, 0.0579364382174158, 0.0577566124328238, 0.0320683312247491, },
{ 0.106303393746554, 0.169956470205506, 0.0158254923446965, 0.0447121277029395, 0.160155492581765, 0.239008155372264, 0.0227087994992687, 0.0660127893145609, 0.030724648638551, 0.0581161843422467, 0.0557114865024957, 0.0307649597491526, },
{ 0.113188963200203, 0.167908145100846, 0.0148671385967359, 0.0430311971069729, 0.164307580336608, 0.245087913005444, 0.0225363069615162, 0.0641398959936241, 0.0300597078024006, 0.0524193386279407, 0.0523190097836991, 0.0301348034840094, },
{ 0.110855086881271, 0.173208866514408, 0.0142431996922015, 0.0454940859104728, 0.165490053019107, 0.24403814029596, 0.0197189799121632, 0.0662001896719786, 0.0304152993362226, 0.0535797541846754, 0.0490885621865233, 0.0276677823950172, },
{ 0.116931567628311, 0.170099936340756, 0.0135388221911611, 0.0461039623914088, 0.168514718730692, 0.252115108102882, 0.0194974455998824, 0.062011547821671, 0.0413022551855722, 0.0561121616652927, 0.0340431969631399, 0.0197292773792309, },
{ 0.113226628128054, 0.175840188991249, 0.0131000432352985, 0.0482978040145537, 0.168634000385314, 0.251558555035042, 0.0176176747390741, 0.062398057588402, 0.0469050582292488, 0.0554900641349218, 0.027666813630943, 0.0192651118878987, },
{ 0.120749935697027, 0.175581191822073, 0.00939224290725736, 0.0454153168499894, 0.170792370096469, 0.251690231671981, 0.0189481019472758, 0.06745162647624, 0.0215733879301298, 0.0443444730483639, 0.0483372860724283, 0.0257238354807652, },
{ 0.117160554893846, 0.179884921730611, 0.00952820292383939, 0.0456803086103571, 0.167911777114046, 0.253866515737119, 0.0174404450633124, 0.0676078267124192, 0.0213661426118196, 0.0443801501787831, 0.0490895617754716, 0.0260835926483759, },
{ 0.120789704670743, 0.177403549031165, 0.00884221908680682, 0.0469781064068231, 0.17268769317473, 0.248176292682576, 0.0160038995582138, 0.0716188559491091, 0.0196262314669605, 0.0412087390149937, 0.0490061911212064, 0.0276585178366715, },
{ 0.12047160738679, 0.177028040908539, 0.00759218738052256, 0.0478061326676284, 0.170374072496702, 0.256533702942211, 0.0159892893718391, 0.0695804093165624, 0.0247556615121396, 0.0432713615919311, 0.0425505476137695, 0.0240469868113657, },
{ 0.11891525522587, 0.180711146964987, 0.00798742674630575, 0.0489505171331825, 0.173580162764036, 0.25325550723033, 0.0143211963332577, 0.0711418986079762, 0.0228077511189544, 0.0424279864401684, 0.0427460365278779, 0.0231551149070535, },
{ 0.122976306285918, 0.182998120108951, 0.00914838710305409, 0.0430137309086958, 0.176855463981682, 0.257421145712596, 0.0152335021496894, 0.062891319219575, 0.0249446265098342, 0.0427449788673148, 0.0397790690717066, 0.0219933500809822, },
{ 0.122644771087421, 0.180723481508222, 0.00822195910877239, 0.0450982708057841, 0.17349802413035, 0.260992248620673, 0.0142476178064676, 0.0671971005672845, 0.023698958005792, 0.0426487335005228, 0.0399719707184258, 0.0210568641402853, },
{ 0.122124762134101, 0.18285076161189, 0.00774173175049526, 0.0456050043723659, 0.173199956237113, 0.262121816444246, 0.0138937394474752, 0.0671066702235737, 0.0247876350703727, 0.0405860978943302, 0.0376848660633726, 0.0222969587506647, },
{ 0.120707688284503, 0.183649356802561, 0.00720775354830182, 0.0483482880033186, 0.174375645042758, 0.257945453692329, 0.013008774540149, 0.0701682688576168, 0.0244163875696648, 0.0406563934184888, 0.0377781438514925, 0.0217378463888166, },
{ 0.122578717836885, 0.182996417150957, 0.00690726859204999, 0.0494879038578236, 0.17903736172776, 0.257390986857086, 0.0127819816992868, 0.0691437791218314, 0.0233889827549492, 0.0392992518245308, 0.0363357349662589, 0.0206516136105817, },
{ 0.124060526315434, 0.179379557591839, 0.00659075601140731, 0.0515187421633584, 0.177170305638467, 0.256334591863877, 0.0118419782037319, 0.0725358641802038, 0.0222700078148784, 0.0397229650600255, 0.0370206102801066, 0.0215540948766712, },
};
        public static double[,] T13CastDistribution = new double[21, 12] {
{ 0.0993856360950837, 0.156315010580563, 0.0371933130610818, 0.0473162719628863, 0.127596696187739, 0.200486485111417, 0.0485052712636053, 0.0606924264064494, 0.0492055988732566, 0.0783457649368339, 0.0618933341848878, 0.0330641913361964, },
{ 0.098060815670472, 0.159531981863051, 0.0369481848379016, 0.0502811525758299, 0.137387234295814, 0.195645323360802, 0.0442873869098942, 0.0614785899702056, 0.0449859090869777, 0.0783263767641785, 0.0615190082253904, 0.031548036439483, },
{ 0.105686681648841, 0.166810705879431, 0.0334205815046271, 0.0461004471582579, 0.135688305821487, 0.209847247344637, 0.0428493465284575, 0.0611350482580652, 0.0386433061517243, 0.0662322358009487, 0.0603109490328833, 0.0332751448706405, },
{ 0.105872102614201, 0.167207001937426, 0.0319843825029296, 0.0495972165867346, 0.142646116398195, 0.203759046737862, 0.042623946677254, 0.0615405384605005, 0.0363626913523381, 0.0712407104720705, 0.0608116886364213, 0.0263545576240664, },
{ 0.113487527735537, 0.16863603981113, 0.0314193548771706, 0.0467513492811146, 0.141188050974237, 0.217078385189716, 0.0396708862077401, 0.0616348415802526, 0.0354628380360671, 0.0589419769709276, 0.0545871622126402, 0.0311415871234666, },
{ 0.111146868565069, 0.17566736140859, 0.0298090191626138, 0.0487355481315655, 0.148183228863463, 0.210546918945981, 0.0373673449956107, 0.0621286113275824, 0.0335794158274274, 0.0609416306951774, 0.0535199513633905, 0.0283741007135294, },
{ 0.116969059778472, 0.176189262724346, 0.0293315760552561, 0.0468934709025514, 0.1473881339057, 0.22191055577006, 0.0353831509000174, 0.060359599588274, 0.0330255245019775, 0.0536054272127577, 0.0496933443156096, 0.0292508943449778, },
{ 0.11525097873908, 0.180996202851156, 0.0279838017928455, 0.0494019924251081, 0.152817361356435, 0.216047347392862, 0.0335235926241655, 0.0625366816712728, 0.0312214285469202, 0.0542508146724412, 0.0486298286148116, 0.0273399693129016, },
{ 0.121338812693846, 0.179368083226283, 0.0267887239016488, 0.0485054553180838, 0.151957914585345, 0.227788590172386, 0.0321950397445961, 0.0600753487719637, 0.0329110378750067, 0.0519159758766658, 0.0428074240458927, 0.0243475937882823, },
{ 0.118549040986996, 0.186053053078551, 0.0256131722494923, 0.0504971622569184, 0.153751512434515, 0.224256242227183, 0.0297591254409379, 0.0616151418401051, 0.0329289869337441, 0.0510770210618956, 0.0418491074358603, 0.0240504340538027, },
{ 0.124384366039897, 0.179260272082699, 0.0288687236133119, 0.0534836874496823, 0.157239088293319, 0.232752499874729, 0.0250174159674113, 0.058866215075507, 0.0457160612275895, 0.0560606616344645, 0.0242848977571417, 0.0140661109842477, },
{ 0.122828568683445, 0.185589805165726, 0.0253234433677773, 0.0530159909950127, 0.153817836226156, 0.232339942309317, 0.02585070043746, 0.0601170157287264, 0.0416609818742045, 0.0513010031876963, 0.0288936328684007, 0.0192610791560769, },
{ 0.126286187465991, 0.186392881807286, 0.0216691886981519, 0.0520254806416113, 0.158494977616849, 0.225458161319778, 0.0259008407267959, 0.0655866339885726, 0.0209757080127161, 0.0493965710055377, 0.0478145026033344, 0.0199988661133756, },
{ 0.129242311011747, 0.184938819631203, 0.0197553173684097, 0.0521619897013143, 0.15584664571599, 0.233039221921099, 0.0250230727094513, 0.0656302221207986, 0.023650946020126, 0.0436234076453989, 0.0435283708212768, 0.0235596753331856, },
{ 0.12714137639148, 0.191169990351958, 0.0208937550742313, 0.051928346939206, 0.157657945898228, 0.229580691552419, 0.0235798282151187, 0.0671319217706287, 0.0217396899734589, 0.0383563882955091, 0.0436951829264256, 0.0271248826113378, },
{ 0.130736707503104, 0.192053062652873, 0.0230157036077171, 0.0465152387149814, 0.162864539227517, 0.232539081609691, 0.0244867423703417, 0.0586157413459379, 0.0254543526221948, 0.0438786267998703, 0.0391263386515106, 0.0207138648942624, },
{ 0.132905468763019, 0.189038340026802, 0.0214773955363139, 0.048751344919223, 0.159703302166315, 0.233384727699158, 0.0236133335425211, 0.0638256612275998, 0.0243020163521585, 0.0423159816328589, 0.0393347199214582, 0.0213477082125727, },
{ 0.133746193272997, 0.188548566463628, 0.020018020459749, 0.0499501731645336, 0.159434236971917, 0.238183474386973, 0.0229698243556234, 0.0625104457146561, 0.0257255611116451, 0.0417911381833855, 0.0363676575799565, 0.0207547083349353, },
{ 0.132171413719353, 0.19148046417812, 0.0187501193876186, 0.0524767152221828, 0.157334191929705, 0.235206422707369, 0.0222991336273129, 0.066012139591847, 0.0243827284723641, 0.0404419507789767, 0.0375921454772151, 0.0218525749079364, },
{ 0.1318456346782, 0.193182420332215, 0.0190586573688014, 0.0543624947075861, 0.161706623383915, 0.234904333549681, 0.0211309402118755, 0.0646181351206128, 0.0252321817886339, 0.0404882037826821, 0.0343041728634117, 0.0191662022123853, },
{ 0.131871121827358, 0.190425986864907, 0.0185570735636079, 0.0565126875522197, 0.162981587485636, 0.23153228314794, 0.0204122587211464, 0.0670353399689772, 0.0243619843404236, 0.0423174365679666, 0.0350898620501278, 0.0189023779096905, },
};
        public static double[] BaseRotationDurations = new double[21] { 60.9976003975153, 57.6792065808934, 53.8805456888762, 51.1305094013862, 48.3009489472625, 45.8077388846379, 43.5439601694537, 41.7591588329673, 40.0384022450592, 38.6370312852665, 37.0840597294685, 36.0431693756969, 34.8877058291525, 33.8786189648996, 32.9288655203621, 32.2892464238617, 31.7608317545256, 31.4094234681886, 30.9789302783045, 30.6033127873865, 30.2609378438922, };
        public static double[] T12RotationDurations = new double[21] { 56.3495187826086, 53.2716954336325, 49.7906561813792, 47.1639439697541, 44.557376399356, 42.231350678261, 40.1008942961387, 38.4856674035036, 36.8979685949556, 35.6213917064544, 34.2035518290599, 33.2515997558684, 32.1387338545147, 31.3920861706407, 30.4917006635003, 29.924353342325, 29.4286793209111, 29.1165378672711, 28.7113214546145, 28.367499803233, 28.0474805913044, };
        public static double[] T13RotationDurations = new double[21] { 60.8549319503105, 57.4949041200828, 53.7917845087519, 51.0404921193027, 48.2450292129629, 45.7747697143959, 43.5295820706053, 41.6930668107156, 39.9697682834558, 38.5900639403025, 37.0341756021083, 35.9993864663575, 34.8447722749441, 33.8644031607041, 32.9226868783904, 32.3035843934204, 31.7975702638424, 31.4676349140633, 31.049589013839, 30.6885505745075, 30.3663187706002, };
        public static double[] BaseNGUptimes = new double[21] { 0.481829022121995, 0.492393290170517, 0.543419488861318, 0.571712440986756, 0.588557366156962, 0.641409445757209, 0.660687688592129, 0.700198167194936, 0.719151431511487, 0.747898538610172, 0.77320295031552, 0.795481589330809, 0.8164552352904, 0.827368825184134, 0.850776590806107, 0.814333948633938, 0.845117118027699, 0.807743859963806, 0.845741830667246, 0.800584228080099, 0.837073150722909, };
        public static double[] T12NGUptimes = new double[21] { 0.520594113352004, 0.533294573762451, 0.582693297277524, 0.61774403815005, 0.637913726468728, 0.693816711767236, 0.718919088422161, 0.755409162205057, 0.773291104120854, 0.799487369159897, 0.814980316951815, 0.835195701400896, 0.871049081144979, 0.825698544456163, 0.858671974111436, 0.812564810064966, 0.853525235076708, 0.809440148680013, 0.852844760652303, 0.801196162596698, 0.853255166254438, };
        public static double[] T13NGUptimes = new double[21] { 0.481797337692333, 0.498994807934347, 0.543105018899457, 0.569576014906306, 0.589659782178179, 0.640471151881351, 0.659703878211339, 0.703069141978661, 0.719693182866845, 0.747623796260195, 0.772534804916467, 0.79685464762015, 0.81683262353537, 0.827163791937559, 0.851676035008318, 0.814649664805383, 0.844506013120442, 0.807458294855614, 0.845840829700471, 0.80040498884249, 0.836889875066775, };

        #endregion

        #region With GoSF

        public static double[,] CastDistributionGoSF = new double[21, 12] {
{ 0.108095318239152, 0.175477134028053, 0.0255784821956878, 0.0507358918223168, 0.139591541315568, 0.215879824124193, 0.0284875303734228, 0.0602738031334977, 0.0430049326341919, 0.0793649070643925, 0.0401271453448841, 0.0333834897246406, },
{ 0.118017425120212, 0.172112220837275, 0.023830775715674, 0.0513351272747736, 0.149006341781167, 0.214381436237546, 0.0272410650834414, 0.0595790050162215, 0.0515771516548809, 0.0795579521243336, 0.0205120460333801, 0.0328494531210943, },
{ 0.114515780064762, 0.182751400212354, 0.0243643905292665, 0.0510252961015267, 0.14702300912193, 0.225978644794937, 0.0249892921868058, 0.0583474564463745, 0.0572539222504541, 0.0713638314315272, 0.0126178849738423, 0.0297690918862192, },
{ 0.122607041337059, 0.177520097182668, 0.0211620426034476, 0.0513402631655049, 0.153872445922867, 0.220635290948311, 0.0242305276745896, 0.0580370049173319, 0.0621811984323982, 0.0722095106765121, 0.00652801004310232, 0.029676567096208, },
{ 0.121279378426237, 0.18381005962795, 0.0200946967102293, 0.0519348982040875, 0.14924386388605, 0.231983509161601, 0.0227706967609299, 0.058617293539051, 0.0596232436049134, 0.0603451201154169, 0.00971249408070044, 0.0305847458828334, },
{ 0.126125809954876, 0.182076948501516, 0.0190292717523093, 0.0516882744219647, 0.157315893630291, 0.224265935418532, 0.020682402711464, 0.0599503509864539, 0.0486578515675718, 0.0611098272983451, 0.0195431655034331, 0.0295542682532439, },
{ 0.127787061060173, 0.186110435990409, 0.0165225485872753, 0.0501230309643925, 0.151883987019435, 0.234157779411901, 0.0205697190115018, 0.0620467643782369, 0.0317483720534422, 0.0548614460480285, 0.0351838969755137, 0.0290049584996914, },
{ 0.129929041043548, 0.188558351112507, 0.0154945586936985, 0.0506240623371533, 0.159179441556807, 0.228302840717223, 0.0190443795913855, 0.0634027820327741, 0.0270623504646433, 0.053988180150884, 0.0357861236095868, 0.0286278886897901, },
{ 0.132493578806211, 0.188627754361584, 0.0137367048240023, 0.051150516398023, 0.155591459765892, 0.238609889620421, 0.018684752373296, 0.0629053460868096, 0.0282271488157291, 0.0525721326882649, 0.0317532681127097, 0.0256474481470581, },
{ 0.132047575966718, 0.193795995219758, 0.0136930925896586, 0.0518197666661917, 0.1622944948696, 0.234069862637175, 0.017103098913733, 0.0628827538578439, 0.0276605601275117, 0.0512460788397468, 0.0285454934938528, 0.0248412268182097, },
{ 0.136023459436529, 0.19117645901406, 0.0126956247954668, 0.0539400803037538, 0.160581741883756, 0.241782962900844, 0.0162985669994965, 0.062450520508917, 0.025489141256836, 0.0548303686809451, 0.028489688319489, 0.0162413858999067, },
{ 0.132697964601686, 0.197934275960328, 0.0114755873968548, 0.0544445955158586, 0.1595102820882, 0.240176609799394, 0.0156362319457473, 0.06240002245793, 0.0259666415042019, 0.0538504094538312, 0.0282261641496376, 0.0176812151263302, },
{ 0.137097410207921, 0.194040858060261, 0.0108182344865838, 0.0539877748052803, 0.163971858611261, 0.237890890429914, 0.0150148966211342, 0.0637657250300395, 0.0228930631527643, 0.0521661670429282, 0.0296320210086078, 0.0187211005433052, },
{ 0.137159581750094, 0.196066746942322, 0.00913346466144623, 0.0541914941893666, 0.159416537830517, 0.242879218813413, 0.0147203723486383, 0.0665844918411138, 0.0202422810065429, 0.0456306219171365, 0.0317738217116355, 0.022201366987774, },
{ 0.136932756272581, 0.19931221125271, 0.00924727962489454, 0.0537622130588166, 0.165390865815311, 0.239472306187588, 0.0139393112983301, 0.0656172402542758, 0.0195258883084565, 0.0438975856464734, 0.0303961230281287, 0.0225062192524352, },
{ 0.142126882723278, 0.199996514944561, 0.0100490863787266, 0.0487501307086903, 0.165815601315316, 0.24304703721161, 0.0145442060116741, 0.0605045112214753, 0.0197979712276901, 0.0446415560309851, 0.030156435663382, 0.0205700665626114, },
{ 0.141056045216811, 0.19827310393594, 0.00889789256702846, 0.0509707634946144, 0.163224158452297, 0.247589695641755, 0.0138103041003077, 0.0634453415027301, 0.0212933380844352, 0.0437997804843777, 0.0271687329922563, 0.0204708435274471, },
{ 0.139638377194088, 0.200297287996394, 0.00849230296597286, 0.0529644345930946, 0.162199198159769, 0.247331171293776, 0.012998766891873, 0.0638005587589582, 0.0210638790222477, 0.043379424313662, 0.0277243485631865, 0.0201102502469781, },
{ 0.138339255958891, 0.201987382303003, 0.00811029427856922, 0.0543557780704466, 0.164476191513961, 0.243958404796437, 0.012411781581759, 0.0653648858207035, 0.0214862207054204, 0.0421332323096348, 0.0267343494621579, 0.0206422231990161, },
{ 0.139624612538986, 0.199517030611171, 0.00756376001392311, 0.0563564131153399, 0.167286145464002, 0.24139320480164, 0.0116867115914602, 0.0666855216983086, 0.021907768001688, 0.0427089387258438, 0.0259664070419098, 0.019303486395729, },
{ 0.142717517051233, 0.196941147097074, 0.00731507334520004, 0.0574584590297004, 0.16725667680196, 0.24042840725941, 0.0112951642654729, 0.067619708674865, 0.0212168833376455, 0.0415853839657131, 0.0261588713661127, 0.0200067078056131, },
};
        public static double[,] T12CastDistributionGoSF = new double[21, 12] {
{ 0.102999260436397, 0.153975774363682, 0.0229155710255949, 0.0460213802343802, 0.155216634010106, 0.234866700470319, 0.0314086423016801, 0.0640203023282777, 0.0509489600656096, 0.0757789832876816, 0.0250333801773005, 0.0368144112989714, },
{ 0.0994249705627755, 0.164141484918266, 0.0210161727279199, 0.0469286552038305, 0.159084959749556, 0.233025687620598, 0.0297837055312025, 0.0629527024381614, 0.060449221144498, 0.0758549805257369, 0.0116582070631898, 0.0356792525142656, },
{ 0.107160828436781, 0.157816443411063, 0.0226918501343201, 0.0469842017815786, 0.159900476908278, 0.242744944380964, 0.0259451899566112, 0.0628883928275853, 0.0619895765490079, 0.0656471410053782, 0.0108403621126159, 0.0353905924958171, },
{ 0.104648793343617, 0.166249896497195, 0.0196968197541698, 0.0472310628943382, 0.162190019286881, 0.239096228345449, 0.0246470903514072, 0.0637498885836076, 0.0536097058384752, 0.0658243063053902, 0.0189884947378448, 0.0340676940616249, },
{ 0.112390495737612, 0.162975219593786, 0.0180215291529288, 0.046254942654993, 0.162680744572283, 0.244389567984185, 0.0240254095420542, 0.0663131297043221, 0.0361003430470175, 0.0588549481261904, 0.035800127856699, 0.0321935420279292, },
{ 0.110705621689803, 0.172205670218546, 0.0155481391856569, 0.0451732749625796, 0.167189511887281, 0.241563840855058, 0.0231334471163373, 0.0674775160121187, 0.0274904136148889, 0.0569088270300132, 0.0398610580041562, 0.0327426794235612, },
{ 0.114999375960645, 0.172411244746007, 0.0148066164543601, 0.0450003294146831, 0.165333479657231, 0.252507751512412, 0.0222556064394538, 0.0666427024608896, 0.0279150748262333, 0.0534100491305997, 0.0348598457064325, 0.0298579236910536, },
{ 0.114897389519515, 0.17660302602184, 0.0142877087179746, 0.0459118666408026, 0.172541859503396, 0.247857130292174, 0.0203911823212523, 0.0666783509176663, 0.0284219527493181, 0.0531909479126354, 0.0302451675221821, 0.0289734178812438, },
{ 0.118080173324132, 0.175384331060084, 0.0124215772322456, 0.0463328399981971, 0.168738322338092, 0.256645224262605, 0.0199012452137895, 0.0670320415312436, 0.0288145532202897, 0.0503558026712376, 0.0289853656934676, 0.0273085234546169, },
{ 0.115734809213167, 0.179785451449246, 0.0121520671293737, 0.0486115008981464, 0.173414937157531, 0.25307274602475, 0.0184752189818792, 0.0657850304313109, 0.0252777434521233, 0.0581374144850362, 0.0319596030421314, 0.0175934777353044, },
{ 0.121485110480313, 0.178259977088384, 0.0100991846757249, 0.0472485555764685, 0.172191482603195, 0.258821596222057, 0.0183096687651163, 0.0694134547993337, 0.017896903267521, 0.0461519689089252, 0.035620803115932, 0.0245012944970287, },
{ 0.118499340085066, 0.183517106774109, 0.00947308661984255, 0.0475704718670438, 0.173143205100277, 0.255822118660732, 0.01740042945926, 0.0696020139015608, 0.0178957424158798, 0.0462195848973734, 0.0359099645630988, 0.0249469356557553, },
{ 0.123414652516453, 0.179685612037598, 0.00924508892873734, 0.0482281887728292, 0.175563667735833, 0.256398301476153, 0.0164187022089566, 0.0694284074165667, 0.0203633513714964, 0.0455022341927383, 0.0304576395191073, 0.0252941538235308, },
{ 0.121102761802124, 0.18260391059601, 0.00802999775591289, 0.049796729627223, 0.172788353147191, 0.260587960771302, 0.0155666550653885, 0.071465625547245, 0.0201621465325417, 0.0447350886162153, 0.0301658801704677, 0.0229948903683791, },
{ 0.122777833218647, 0.183190777255223, 0.00844269794604592, 0.0493875995551496, 0.178960092117255, 0.257905451522027, 0.014770321431278, 0.069703486146923, 0.0204467832791271, 0.0444604897369296, 0.0280799458944793, 0.0218745218969161, },
{ 0.125252560534792, 0.184483538778816, 0.00906540977803553, 0.044438595565376, 0.177690566786494, 0.265305984595882, 0.0154126428018716, 0.0647045902041398, 0.0201526270602141, 0.0429433864144148, 0.0284605843168302, 0.0220895131631337, },
{ 0.123302666880031, 0.18660113737108, 0.00815896894147771, 0.0463830118162577, 0.175783503723429, 0.26620542504475, 0.0144270900049646, 0.0677199433261137, 0.0200382953838423, 0.0418564807728155, 0.0273332869033014, 0.0221901898319368, },
{ 0.122080452177893, 0.187421102864843, 0.00773054717356905, 0.048062227538783, 0.176738459118815, 0.263643311095871, 0.0136458296321903, 0.068737799172196, 0.0207898013257727, 0.0414317975849001, 0.027762225696778, 0.0219564466183884, },
{ 0.123345906559318, 0.185979881435278, 0.00720595047798385, 0.0488717757867985, 0.18025313479413, 0.259899073216088, 0.0132137339188081, 0.0705341002464959, 0.0207254380402095, 0.0406361945068819, 0.0272764000216056, 0.0220584109964019, },
{ 0.125446390999245, 0.183211223490276, 0.00689612192869956, 0.0510366022834474, 0.179847414738723, 0.259918880854107, 0.0123569197396575, 0.0717067928619532, 0.0197373838814972, 0.0405059846845894, 0.028043485490118, 0.0212927990476868, },
{ 0.126006043490973, 0.180982447642231, 0.00668418664725022, 0.0520630701349177, 0.178375845816174, 0.262430626482584, 0.0118578453468868, 0.0728350264045437, 0.0197950532610328, 0.0395529035630834, 0.0274859328156501, 0.021931018394673, },
};
        public static double[,] T13CastDistributionGoSF = new double[21, 12] {
{ 0.100509912344745, 0.167833284042424, 0.0380085620120542, 0.0503248585677731, 0.133442040354718, 0.202301557088035, 0.0504254674395186, 0.0608994710292922, 0.0411269129202572, 0.07907135368551, 0.0428302463740184, 0.0332263341416535, },
{ 0.109134110782607, 0.164200395639976, 0.0371138874497509, 0.0504664959211444, 0.14216524934433, 0.205632790408315, 0.046358508404778, 0.0602793990487148, 0.0490665698374605, 0.0790012224559198, 0.0238396163164263, 0.032741754390578, },
{ 0.10701663679223, 0.175510445132102, 0.0354839564226603, 0.050659817141141, 0.142249946056918, 0.216297797144675, 0.0430568082266058, 0.059178131648174, 0.0566525468811919, 0.0708901269929151, 0.0134744054762041, 0.0295293820851822, },
{ 0.112798252665982, 0.168952248171832, 0.0366630179673323, 0.0507699251518099, 0.14952455763728, 0.21219702585123, 0.0407990456898684, 0.0584562801181281, 0.0621127652139468, 0.0718495389326686, 0.00650969572798009, 0.029367646871942, },
{ 0.111001737797342, 0.177176518378494, 0.0351391812613138, 0.0513854395378891, 0.146450271270161, 0.222878658857131, 0.0373657532165411, 0.0588590900174426, 0.0603736796435832, 0.0601307278801625, 0.00882204266681553, 0.030416899473124, },
{ 0.116510637852471, 0.174989123576769, 0.0325714318384257, 0.0510709741783244, 0.154320385016335, 0.216802433850847, 0.0349266214849867, 0.0604355528519168, 0.0491182367876771, 0.0606946465280798, 0.0189587723544711, 0.0296011836796954, },
{ 0.117981745619705, 0.180121833463967, 0.0312749851564936, 0.0495380684518449, 0.149151304252361, 0.225081594739084, 0.0339953012627816, 0.0625258159074291, 0.0312718544595631, 0.0543796463562363, 0.0355300078322083, 0.029147842498325, },
{ 0.120404398329745, 0.181693358414106, 0.0302392819886159, 0.0500710829976102, 0.156706245241883, 0.219806794602138, 0.0325050926710006, 0.0634891446951132, 0.0262422346307003, 0.0538235932543275, 0.0363981102900428, 0.0286206628847164, },
{ 0.122515152589059, 0.183312388118342, 0.0271632280052904, 0.0507131317751502, 0.152735551756029, 0.231413369575787, 0.031220141232123, 0.0632465659924706, 0.0274850221153634, 0.052468772725795, 0.0323041156922496, 0.0254225604223407, },
{ 0.123137388818147, 0.188156147876667, 0.0261447422278146, 0.0511927374300684, 0.159709350716154, 0.22667207390272, 0.029765205650607, 0.0632537312472694, 0.0273774369500711, 0.051240891253315, 0.0287214180102249, 0.0246288759169416, },
{ 0.125916211459968, 0.184431486877143, 0.0268955047499369, 0.0539600237572325, 0.158244668954051, 0.236496882606594, 0.0269236527672934, 0.0625078618650493, 0.026453185414717, 0.0559412255146341, 0.0273712065343922, 0.0148580894989886, },
{ 0.123177961106839, 0.191543882725987, 0.0253075725775273, 0.0542210100743083, 0.157710057083117, 0.23404588229731, 0.026157271429636, 0.0624241657907066, 0.0268313938789531, 0.0541094055831272, 0.02733694993858, 0.0171344475139086, },
{ 0.12860019314716, 0.188300082164362, 0.0227875662625907, 0.0534075284953104, 0.161696013518833, 0.232312374129583, 0.0257690430405839, 0.0639015761696714, 0.0229917514331165, 0.0517259871308887, 0.0295204940363973, 0.0189873904715024, },
{ 0.129712507109522, 0.190095062370621, 0.0207569612546221, 0.0539742826524167, 0.157331966999706, 0.236958532388425, 0.0248191251981872, 0.0666943358058581, 0.0204974293911729, 0.0455346813164048, 0.0315340204630187, 0.0220910950500451, },
{ 0.129322039314472, 0.193412259843716, 0.0212588816166629, 0.0533488739482518, 0.163234515155666, 0.233500009080135, 0.0236546791035192, 0.0660473884257407, 0.0193123750468493, 0.0435915175291893, 0.0306918041856451, 0.0226256567501531, },
{ 0.134547014741755, 0.193162225845724, 0.0230081160643317, 0.0484565794175776, 0.164010530720022, 0.236485815970594, 0.0246534269720863, 0.0606650077455765, 0.0193006720346605, 0.0446848131514209, 0.0306885837993549, 0.0203372135368968, },
{ 0.133936204120487, 0.191388937401349, 0.0217351367989652, 0.0506571430016856, 0.161499752867378, 0.241623248159374, 0.0231079650534754, 0.06346876916736, 0.0210896822489699, 0.0440435576737682, 0.0273736840646263, 0.0200759194425612, },
{ 0.133484589988925, 0.193195375481364, 0.0202635642757134, 0.0527473360319221, 0.160152698159229, 0.241335073584005, 0.0226404701082998, 0.0640923510041379, 0.0208342939178682, 0.0431767376097557, 0.0278941508326053, 0.0201833590061751, },
{ 0.1329340450182, 0.195843960342777, 0.0193825654308458, 0.0540009492343814, 0.16179591831375, 0.237939163069641, 0.0219372127512903, 0.065360632195386, 0.0212703974561804, 0.0419189212677643, 0.0268835064412258, 0.020732728478558, },
{ 0.133338006387762, 0.193763465574564, 0.0190611901978035, 0.055999381953546, 0.164774565018402, 0.235565961700269, 0.0207715077521193, 0.0669804139636782, 0.0218822040586838, 0.0429774328631055, 0.0259455808985943, 0.0189402896314713, },
{ 0.136126098908142, 0.191630258989361, 0.0186067437510003, 0.0574345556085084, 0.165293002110325, 0.233997826177636, 0.0202876833830146, 0.0678341303071285, 0.0212400164365192, 0.0420738603274447, 0.0260601763458711, 0.0194156476550488, },
};
        public static double[] BaseRotationDurationsGoSF = new double[21] { 59.4381891987577, 55.9948215971608, 52.5234400351338, 49.9786713841629, 47.4209395169078, 45.2362641221254, 43.160764706868, 41.2575344494217, 39.6221171101071, 38.1149329925945, 36.7878999297322, 35.7643705962528, 34.65033537068, 33.588651432722, 32.6904294055815, 32.0012345644665, 31.4848813537187, 31.0811510301603, 30.703781269696, 30.2879424466741, 29.9662731652171, };
        public static double[] T12RotationDurationsGoSF = new double[21] { 54.6428761366455, 51.807817830688, 48.7292392314448, 46.3980486452424, 43.9370275974233, 41.6544893849803, 39.6006274184657, 37.9200404860198, 36.4477885316859, 35.3555392034754, 33.8772203745819, 32.9478631629241, 31.9046033468705, 31.076316623415, 30.2147610956035, 29.5713838911566, 29.110276836669, 28.7817457549941, 28.3974910339436, 28.0525391114827, 27.7418847547102, };
        public static double[] T13RotationDurationsGoSF = new double[21] { 59.3654361211178, 55.8731132357291, 52.4477949978043, 49.9098090128123, 47.3594554428338, 45.168978645024, 43.1206050167225, 41.2087455218855, 39.5524006764536, 38.0551248112311, 36.7505084751869, 35.7027592696086, 34.6123650522572, 33.5807042870176, 32.7022135673532, 32.0159704345095, 31.5283652025267, 31.1391577773873, 30.770671712324, 30.3809902886872, 30.0708698766044, };
        public static double[] BaseNGUptimesGoSF = new double[21] { 0.494436092137412, 0.507979773479778, 0.554893421075959, 0.579818808226997, 0.592521574328489, 0.619246129114434, 0.630712740654811, 0.675739463595719, 0.693642826490761, 0.72735204394629, 0.727076055175487, 0.743248134911594, 0.763555431767317, 0.790564053544558, 0.797716353575057, 0.78207453189418, 0.791154029617023, 0.789106381720306, 0.795403467755908, 0.796836024445143, 0.78867778286599, };
        public static double[] T12NGUptimesGoSF = new double[21] { 0.535663897856085, 0.548327445578796, 0.584202079851637, 0.601112983513358, 0.619049253183755, 0.669271180325301, 0.696418419111378, 0.733478917588595, 0.754865046387749, 0.740506134100809, 0.777320714625879, 0.790615606904681, 0.807291720703165, 0.797811075025335, 0.808826072572362, 0.796059091287887, 0.812880735975577, 0.803474524325764, 0.813382757446168, 0.806299056973932, 0.79971384245773, };
        public static double[] T13NGUptimesGoSF = new double[21] { 0.492748181627757, 0.512958125176528, 0.554898515788131, 0.578621932566045, 0.594321119274699, 0.621584483686484, 0.630359403432806, 0.677303442931869, 0.693907583293219, 0.727995991233216, 0.724280654917099, 0.746326451665582, 0.76561512974882, 0.790198166719776, 0.797671312078789, 0.782058662052739, 0.789480055773493, 0.787426923760221, 0.794376962826391, 0.796062028016269, 0.788365603098858, };
        public static double[] BasePercentMoonfiresExtended = new double[21] { 0.604848722358816, 0.845107742957936, 0.879664263207238, 0.888856842105432, 0.7891649373433, 0.669498210526375, 0.563349094554647, 0.661289192071141, 0.735750957393591, 0.865271862990826, 0.912986970760539, 0.915925784461428, 0.908758140351044, 0.889863187969972, 0.917741558897409, 0.921179127819726, 0.951859388471379, 0.937914761905036, 0.964894190476413, 0.970841523809701, 0.981087619047766, };
        public static double[] T12PercentMoonfiresExtended = new double[21] { 0.825933634085117, 0.888698811932032, 0.828908437761032, 0.703973263157962, 0.553520355889773, 0.641689490392698, 0.754303956558088, 0.887981871345186, 0.899670330827261, 0.887942045112891, 0.885467099415313, 0.899000832080305, 0.960262255639346, 0.967700270676846, 0.984549684210641, 0.977063578947532, 0.98486663157904, 0.974704666666863, 0.982292000000154, 0.989521333333422, 0.971576000000244, };
        public static double[] T13PercentMoonfiresExtended = new double[21] { 0.578383326538038, 0.816426098495388, 0.867849536685004, 0.88560612561723, 0.786622065162852, 0.660331809523865, 0.557793789473765, 0.658995502696179, 0.734010907268281, 0.864185620718468, 0.91221411695936, 0.914460496240859, 0.902664160401137, 0.881337969924849, 0.906830691729447, 0.905950451127947, 0.950080190476399, 0.930436466165686, 0.961184380952616, 0.965399428571617, 0.978561142857299, };

        #endregion

        public static string[] CastDistributionSpells = new string[12] { "Starfire", "Wrath", "Starsurge", "Shooting Stars", "Starfire (Eclipse)", "Wrath (Eclipse)", "Starsurge (Eclipse)", "Shooting Stars (Eclipse)", "Moonfire", "Insect Swarm", "Moonfire (Eclipse)", "Insect Swarm (Eclipse)" };

        #endregion

        // A list of all the damage spells
        private Spell[] _spellData = null;
        private Spell[] SpellData
        {
            get
            {
                if (_spellData == null)
                {
                    _spellData = new Spell[] {
                        new Spell()
                        {
                            Name = "SF",
                            BaseDamage = (1214f + 1514f) / 2.0f,
                            SpellDamageModifier = 1.231f,
                            BaseCastTime = 3.2f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Arcane,
                            BaseEnergy = 20
                        },
                        new Spell()
                        {
                            Name = "MF",
                            BaseDamage = (197.0f + 239.0f) / 2.0f,
                            SpellDamageModifier = 0.18f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = new DotEffect()
                                {
                                    BaseDuration = 12.0f,
                                    BaseTickLength = 2.0f,
                                    TickDamage = 93.0f,
                                    SpellDamageModifierPerTick = 0.18f
                                },
                            School = SpellSchool.Arcane
                        },
                        new Spell()
                        {
                            Name = "W",
                            BaseDamage = (831f + 937f) / 2.0f,
                            SpellDamageModifier = 3.075f/3.5f,
                            BaseCastTime = 2.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = null,
                            School = SpellSchool.Nature,
                            BaseEnergy = 40/3f
                        },
                        new Spell()
                        {
                            Name = "IS",
                            BaseDamage = 0.0f,
                            SpellDamageModifier = 0.0f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.08f),
                            DotEffect = new DotEffect()
                            {
                                BaseDuration = 12.0f,
                                BaseTickLength = 2.0f,
                                TickDamage = 136.0f,
                                SpellDamageModifierPerTick = 0.13f
                            },
                            School = SpellSchool.Nature
                        },
                        new Spell()
                        {
                            Name = "SS",
                            BaseDamage = (1018 + 1404) / 2f,
                            SpellDamageModifier = 1.228f,
                            BaseCastTime = 2.0f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Spellstorm,
                            BaseEnergy = 15
                        }
                    };
                }
                return _spellData;
            }
        }
        public Spell Starfire
        {
            get
            {
                return SpellData[0];
            }
        }
        public Spell Moonfire
        {
            get
            {
                return SpellData[1];
            }
        }
        public Spell Wrath
        {
            get
            {
                return SpellData[2];
            }
        }
        public Spell InsectSwarm
        {
            get
            {
                return SpellData[3];
            }
        }
        public Spell Starsurge
        {
            get
            {
                return SpellData[4];
            }
        }
        private void ResetSpellList()
        {
            // Since the property rebuilding the array is based on this variable being null, this effectively forces a refresh
            _spellData = null;
        }

        // The spell rotations themselves.
        private SpellRotation[] rotations = null;
        public SpellRotation[] Rotations
        {
            get
            {
                if (rotations == null)
                {
                    rotations = new SpellRotation[3]
                    {
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Unused" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Lunar Only", StarfallCastMode = StarfallMode.LunarOnly } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall On CD", StarfallCastMode = StarfallMode.OnCooldown } },
                    };
                    //RecreateRotations();
                }
                return rotations;
            }
        }

        // Results data from the calculations, which will be sent to the UI.
        RotationData[] cachedResults = new RotationData[3];

        public void Solve(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            CalculationOptionsMoonkin calcOpts = character.CalculationOptions as CalculationOptionsMoonkin;
            DruidTalents talents = character.DruidTalents;
            procEffects = new List<ProcEffect>();
            UpdateSpells(character, ref calcs);

            float trinketDPS = 0.0f;
            float baseSpellPower = calcs.SpellPower;
            float baseHit = 1 - Math.Max(0, calcs.SpellHitCap - calcs.SpellHit);
            float baseCrit = calcs.SpellCrit;
            float baseHaste = calcs.SpellHaste;
            float baseMastery = calcs.Mastery;
            float sub35PercentTime = (float)(character.BossOptions.Under20Perc + character.BossOptions.Under35Perc);

            BuildProcList(calcs);

            float maxDamageDone = 0.0f, maxBurstDamageDone = 0.0f;
            SpellRotation maxBurstRotation = Rotations[0];
            SpellRotation maxRotation = Rotations[0];

            float manaPool = GetEffectiveManaPool(character, calcOpts, calcs);

            float manaGained = manaPool - calcs.BasicStats.Mana;

            float oldArcaneMultiplier = calcs.BasicStats.BonusArcaneDamageMultiplier;
            float oldNatureMultiplier = calcs.BasicStats.BonusNatureDamageMultiplier;

            int rotationIndex = 1;
            foreach (SpellRotation rot in Rotations)
            {
                if (rot.RotationData.Name == "None") continue;
                rot.Solver = this;

                // Reset variables modified in the pre-loop to base values
                float currentSpellPower = baseSpellPower;
                float currentCrit = baseCrit + StatConversion.NPC_LEVEL_SPELL_CRIT_MOD[character.BossOptions.Level - character.Level];
                float currentHaste = baseHaste;
                float currentMastery = baseMastery;
                float currentTrinketDPS = trinketDPS;
                calcs.BasicStats.BonusArcaneDamageMultiplier = oldArcaneMultiplier;
                calcs.BasicStats.BonusNatureDamageMultiplier = oldNatureMultiplier;
                float accumulatedDamage = 0.0f;
                float totalUpTime = 0.0f;
                float[] spellDetails = new float[NUM_SPELL_DETAILS];
                List<ProcEffect> activatedEffects = new List<ProcEffect>();
                List<ProcEffect> alwaysUpEffects = new List<ProcEffect>();

                float baselineDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);

                // Calculate spell power/spell damage modifying trinkets in a separate pre-loop
                // Add spell crit effects here as well, since they no longer affect timing
                foreach (ProcEffect proc in procEffects)
                {
                    bool handled = false;
                    if (proc.Effect.Stats.SpellPower > 0 || proc.Effect.Stats.CritRating > 0 || proc.Effect.Stats.MasteryRating > 0)
                    {
                        handled = true;
                        float procSpellPower = proc.Effect.Stats.SpellPower;
                        float procSpellCrit = StatConversion.GetSpellCritFromRating(proc.Effect.Stats.CritRating);
                        float procMastery = StatConversion.GetMasteryFromRating(proc.Effect.Stats.MasteryRating);

                        float triggerInterval = 0.0f, triggerChance = 1.0f;
                        switch (proc.Effect.Trigger)
                        {
                            case Trigger.DamageDone:
                            case Trigger.DamageOrHealingDone:
                                triggerInterval = ((rot.RotationData.Duration / rot.RotationData.CastCount) + (rot.RotationData.Duration / (rot.RotationData.MoonfireTicks + rot.RotationData.InsectSwarmTicks))) / 2.0f;
                                break;
                            case Trigger.Use:
                                break;
                            case Trigger.SpellHit:
                            case Trigger.DamageSpellHit:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                triggerChance = baseHit;
                                break;
                            case Trigger.SpellCrit:
                            case Trigger.DamageSpellCrit:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts);
                                triggerChance = baseCrit;
                                break;
                            case Trigger.SpellCast:
                            case Trigger.DamageSpellCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                break;
                            case Trigger.MoonfireCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireCasts;
                                break;
                            case Trigger.DoTTick:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.InsectSwarmTicks + rot.RotationData.MoonfireTicks);
                                break;
                            case Trigger.MoonfireTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireTicks;
                                break;
                            case Trigger.InsectSwarmTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.InsectSwarmTicks;
                                break;
                            default:
                                triggerChance = 0.0f;
                                break;
                        }
                        if (triggerChance > 0)
                        {
                            float durationMultiplier = proc.Effect.LimitedToExecutePhase ? sub35PercentTime : 1f;
                            currentSpellPower += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                            proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellPower * durationMultiplier;
                            currentCrit += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellCrit * durationMultiplier;
                            currentMastery += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procMastery * durationMultiplier;
                        }
                    }
                    // 2T10 (both if statements, which is why it isn't else-if)
                    if (proc.Effect.Stats.BonusArcaneDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusArcaneDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusArcaneDamageMultiplier;
                    }
                    if (proc.Effect.Stats.BonusNatureDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusNatureDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusNatureDamageMultiplier;
                    }
                    // Variable Pulse Lightning Capacitor
                    // This might catch some other effects, I probably need a better way to differentiate
                    if (proc.Effect.Trigger == Trigger.DamageSpellCrit && proc.Effect.Stats.NatureDamage > 0)
                    {
                        float procInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts + rot.RotationData.DotTicks);
                        currentTrinketDPS += proc.Effect.GetAverageProcsPerSecond(procInterval, currentCrit, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.NatureDamage;
                    }
                    // Nested special effects
                    if (proc.Effect.Stats._rawSpecialEffectDataSize > 0)
                    {
                        handled = true;
                        SpecialEffect childEffect = proc.Effect.Stats._rawSpecialEffectData[0];
                        // Heart of Ignacious
                        if (childEffect.Stats.SpellPower > 0)
                        {
                            float averageStack = childEffect.GetAverageStackSize(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit, 3.0f, proc.Effect.Duration);
                            currentSpellPower += childEffect.Stats.SpellPower * averageStack * proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit);
                        }
                        // 4T11
                        if (childEffect.Stats.SpellCrit != 0)
                        {
                            float maxStack = proc.Effect.Stats.SpellCrit;
                            float numNegativeStacks = childEffect.GetAverageStackSize(rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts), Math.Min(1.0f, baseCrit + maxStack), 3.0f, proc.Effect.Duration);
                            float averageNegativeValue = childEffect.Stats.SpellCrit * numNegativeStacks;
                            float averageCrit = maxStack + averageNegativeValue;
                            currentCrit += averageCrit * proc.Effect.GetAverageUptime(rot.RotationData.Duration / 2f, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f);
                        }
                    }
                    if (!handled)
                    {
                        if (proc.CalculateDPS != null)
                        {
                            accumulatedDamage += proc.CalculateDPS(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) * rot.RotationData.Duration;
                        }
                        if (proc.Activate != null)
                        {
                            float upTime = proc.UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            // Procs with 100% uptime should be activated and not put into the combination loop
                            if (upTime == 1)
                            {
                                alwaysUpEffects.Add(proc);
                                proc.Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                            }
                            // Procs with uptime 0 < x < 100 should be activated
                            else if (upTime > 0)
                                activatedEffects.Add(proc);
                        }
                        if (proc.CalculateMP5 != null)
                        {
                            manaGained += proc.CalculateMP5(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) / 5.0f * character.BossOptions.BerserkTimer * 60.0f;
                        }
                    }
                }
                // Calculate stat-boosting trinkets, taking into effect interactions with other stat-boosting procs
                int sign = 1;
                float[] cachedDamages = new float[1 << activatedEffects.Count];
                float[] cachedUptimes = new float[1 << activatedEffects.Count];
                float[,] cachedDetails = new float[1 << activatedEffects.Count, NUM_SPELL_DETAILS];
                List<int> calculatedPairs = new List<int>();
                // Iterate over the entire set of trinket combinations (each trinket by itself, 2 at a time, ...)
                for (int i = 1; i <= activatedEffects.Count; ++i)
                {
                    // Create a new combination generator for this "level" of trinket interaction
                    CombinationGenerator gen = new CombinationGenerator(activatedEffects.Count, i);
                    // Iterate over all combinations
                    while (gen.HasNext())
                    {
                        float tempUpTime = 1.0f;
                        int[] vals = gen.GetNext();
                        int pairs = 0;
                        int lengthCounter = 0;
                        // Activate the trinkets, calculate the damage and uptime, then deactivate them
                        foreach (int idx in vals)
                        {
                            pairs |= 1 << idx;
                            ++lengthCounter;
                            activatedEffects[idx].Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        currentCrit = (float)Math.Min(1.0f, currentCrit);
                        float tempDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency) / rot.RotationData.Duration;
                        spellDetails[0] = rot.RotationData.StarfireAvgHit;
                        spellDetails[1] = rot.RotationData.WrathAvgHit;
                        spellDetails[2] = rot.RotationData.MoonfireAvgHit;
                        spellDetails[3] = rot.RotationData.InsectSwarmAvgHit;
                        spellDetails[4] = rot.RotationData.StarSurgeAvgHit;
                        spellDetails[5] = rot.RotationData.StarfireAvgCast;
                        spellDetails[6] = rot.RotationData.WrathAvgCast;
                        spellDetails[7] = rot.RotationData.MoonfireAvgCast;
                        spellDetails[8] = rot.RotationData.InsectSwarmAvgCast;
                        spellDetails[9] = rot.RotationData.StarSurgeAvgCast;
                        spellDetails[10] = rot.RotationData.AverageInstantCast;
                        spellDetails[11] = rot.RotationData.StarfireAvgEnergy;
                        spellDetails[12] = rot.RotationData.WrathAvgEnergy;
                        spellDetails[13] = rot.RotationData.StarSurgeAvgEnergy;
                        spellDetails[14] = rot.RotationData.TreantDamage;
                        spellDetails[15] = rot.RotationData.StarfallDamage;
                        spellDetails[16] = rot.RotationData.MushroomDamage;
                        foreach (int idx in vals)
                        {
                            tempUpTime *= activatedEffects[idx].UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            activatedEffects[idx].Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        if (tempUpTime == 0) continue;
                        // Adjust previous probability tables by the current factor
                        // At the end of the algorithm, this ensures that the probability table will contain the individual
                        // probabilities of each effect or set of effects.
                        // These adjustments only need to be made for higher levels of the table, and if the current probability is > 0.
                        if (lengthCounter > 1)
                        {
                            foreach (int subset in calculatedPairs)
                            {
                                // Truly a subset?
                                if ((pairs & subset) != subset)
                                {
                                    continue;
                                }

                                // Calculate the "layer" of the current subset by getting the set bit count.
                                int subsetLength = 0;
                                for (int j = subset; j > 0; ++subsetLength)
                                {
                                    j &= --j;
                                }

                                // Set the sign of the operation: Evenly separated layers are added, oddly separated layers are subtracted
                                int newSign = ((lengthCounter - subsetLength) % 2 == 0) ? 1 : -1;

                                // Adjust by current uptime * sign of operation.
                                cachedUptimes[subset] += newSign * tempUpTime;
                            }
                        }
                        // Cache the results to be calculated later
                        cachedUptimes[pairs] = tempUpTime;
                        cachedDamages[pairs] = tempDPS;
                        for (int idx = 0; idx < NUM_SPELL_DETAILS; ++idx)
                        {
                            cachedDetails[pairs, idx] = spellDetails[idx];
                        }
                        calculatedPairs.Add(pairs);
                        totalUpTime += sign * tempUpTime;
                    }
                    sign = -sign;
                }
                float accumulatedDPS = 0.0f;
                Array.Clear(spellDetails, 0, spellDetails.Length);
                // Apply the above-calculated probabilities to the previously stored damage calculations and add to the result.
                for (int idx = 0; idx < cachedUptimes.Length; ++idx)
                {
                    if (cachedUptimes[idx] == 0) continue;
                    accumulatedDPS += cachedUptimes[idx] * cachedDamages[idx];
                    for (int i = 0; i < NUM_SPELL_DETAILS; ++i)
                    {
                        spellDetails[i] += cachedUptimes[idx] * cachedDetails[idx,i];
                    }
                }
                float damageDone = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);
                accumulatedDPS += (1 - totalUpTime) * damageDone / rot.RotationData.Duration;
                spellDetails[0] += (1 - totalUpTime) * rot.RotationData.StarfireAvgHit;
                spellDetails[1] += (1 - totalUpTime) * rot.RotationData.WrathAvgHit;
                spellDetails[2] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgHit;
                spellDetails[3] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgHit;
                spellDetails[4] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgHit;
                spellDetails[5] += (1 - totalUpTime) * rot.RotationData.StarfireAvgCast;
                spellDetails[6] += (1 - totalUpTime) * rot.RotationData.WrathAvgCast;
                spellDetails[7] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgCast;
                spellDetails[8] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgCast;
                spellDetails[9] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgCast;
                spellDetails[10] += (1 - totalUpTime) * rot.RotationData.AverageInstantCast;
                spellDetails[11] += (1 - totalUpTime) * rot.RotationData.StarfireAvgEnergy;
                spellDetails[12] += (1 - totalUpTime) * rot.RotationData.WrathAvgEnergy;
                spellDetails[13] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgEnergy;
                spellDetails[14] += (1 - totalUpTime) * rot.RotationData.TreantDamage;
                spellDetails[15] += (1 - totalUpTime) * rot.RotationData.StarfallDamage;
                spellDetails[16] += (1 - totalUpTime) * rot.RotationData.MushroomDamage;

                float burstDPS = accumulatedDPS + accumulatedDamage / rot.RotationData.Duration;
                float sustainedDPS = burstDPS;

                // Mana calcs:
                // Main rotation - all spells
                // Movement rotation - Lunar Shower MF, IS, Shooting Stars procs, and Starfall only
                rot.RotationData.ManaGained += manaGained / (character.BossOptions.BerserkTimer * 60.0f) * rot.RotationData.Duration;
                float timeToOOM = manaPool / ((rot.RotationData.ManaUsed - rot.RotationData.ManaGained) / rot.RotationData.Duration);
                if (timeToOOM <= 0) timeToOOM = character.BossOptions.BerserkTimer * 60.0f;   // Happens when ManaUsed is less than 0
                if (timeToOOM < character.BossOptions.BerserkTimer * 60.0f)
                {
                    rot.RotationData.TimeToOOM = new TimeSpan(0, (int)(timeToOOM / 60), (int)(timeToOOM % 60));
                    sustainedDPS = burstDPS * timeToOOM / (character.BossOptions.BerserkTimer * 60.0f);
                }
                
                burstDPS += currentTrinketDPS;
                sustainedDPS += currentTrinketDPS;

                rot.RotationData.SustainedDPS = sustainedDPS;
                rot.RotationData.BurstDPS = burstDPS;
                rot.RotationData.StarfireAvgHit = spellDetails[0];
                rot.RotationData.WrathAvgHit = spellDetails[1];
                rot.RotationData.MoonfireAvgHit = spellDetails[2];
                rot.RotationData.InsectSwarmAvgHit = spellDetails[3];
                rot.RotationData.StarSurgeAvgHit = spellDetails[4];
                rot.RotationData.StarfireAvgCast = spellDetails[5];
                rot.RotationData.WrathAvgCast = spellDetails[6];
                rot.RotationData.MoonfireAvgCast = spellDetails[7];
                rot.RotationData.InsectSwarmAvgCast = spellDetails[8];
                rot.RotationData.StarSurgeAvgCast = spellDetails[9];
                rot.RotationData.AverageInstantCast = spellDetails[10];
                rot.RotationData.StarfireAvgEnergy = spellDetails[11];
                rot.RotationData.WrathAvgEnergy = spellDetails[12];
                rot.RotationData.StarSurgeAvgEnergy = spellDetails[13];
                rot.RotationData.TreantDamage = spellDetails[14];
                rot.RotationData.StarfallDamage = spellDetails[15];
                rot.RotationData.MushroomDamage = spellDetails[16];

                // Update the sustained DPS rotation if any one of the following three cases is true:
                // 1) No user rotation is selected and sustained DPS is maximum
                // 2) A user rotation is selected, Eclipse is not present, and the user rotation matches the current rotation
                // 3) A user rotation is selected, Eclipse is present, and the user rotation's dot spells matches this rotation's
                if ((calcOpts.UserRotation == "None" && sustainedDPS > maxDamageDone) || rot.RotationData.Name == calcOpts.UserRotation)
                {
                    maxDamageDone = sustainedDPS;
                    maxRotation = rot;
                }
                if (burstDPS > maxBurstDamageDone)
                {
                    maxBurstDamageDone = burstDPS;
                    maxBurstRotation = rot;
                }
                cachedResults[rotationIndex - 1] = rot.RotationData;

                // Deactivate always-up procs
                foreach (ProcEffect proc in alwaysUpEffects)
                {
                    proc.Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                }

                ++rotationIndex;
            }
            // Present the findings to the user.
            calcs.SelectedRotation = maxRotation.RotationData;
            calcs.BurstRotation = maxBurstRotation.RotationData;
            calcs.SubPoints = new float[] { maxBurstDamageDone, maxDamageDone };
            calcs.OverallPoints = calcs.SubPoints[0] + calcs.SubPoints[1];
            calcs.Rotations = cachedResults;
        }

        // Create proc effect calculations for proc-based trinkets.
        private void BuildProcList(CharacterCalculationsMoonkin calcs)
        {
            // Implement a new handler for each special effect in the calculations stats
            foreach (SpecialEffect effect in calcs.BasicStats.SpecialEffects())
            {
                procEffects.Add(new ProcEffect(effect));
            }
        }

        // Non-rotation-specific mana calculations
        private float GetEffectiveManaPool(Character character, CalculationOptionsMoonkin calcOpts, CharacterCalculationsMoonkin calcs)
        {
            float fightLength = character.BossOptions.BerserkTimer * 60.0f;

            float innervateCooldown = 180;

            // Mana/5 calculations
            float totalManaRegen = calcs.ManaRegen * fightLength;

            // Mana pot calculations
            float manaRestoredByPots = 0.0f;
            foreach (Buff b in character.ActiveBuffs)
            {
                if (b.Stats.ManaRestore > 0)
                {
                    manaRestoredByPots = b.Stats.ManaRestore;
                    break;
                }
            }

            // Innervate calculations
            float innervateDelay = calcOpts.InnervateDelay * 60.0f;
            int numInnervates = (calcOpts.Innervate && fightLength - innervateDelay > 0) ? ((int)(fightLength - innervateDelay) / (int)innervateCooldown + 1) : 0;
            float totalInnervateMana = numInnervates * 0.2f * calcs.BasicStats.Mana;
            totalInnervateMana *= 1 + 0.15f * character.DruidTalents.Dreamstate;

            // Replenishment calculations
            float replenishmentPerTick = calcs.BasicStats.Mana * calcs.BasicStats.ManaRestoreFromMaxManaPerSecond;
            float replenishmentMana = calcOpts.ReplenishmentUptime * replenishmentPerTick * character.BossOptions.BerserkTimer * 60;

            return calcs.BasicStats.Mana + totalInnervateMana + totalManaRegen + manaRestoredByPots + replenishmentMana;
        }

        /*private void RecreateRotations()
        {
            rotations[0] = new SpellRotation() { RotationData = new RotationData() { Name = "None" } };
            for (int mfMode = 0; mfMode < 2; ++mfMode)
            {
                for (int isMode = 0; isMode < 2; ++isMode)
                {
                    for (int sfMode = 0; sfMode < 3; ++sfMode)
                    {
                        for (int wmMode = 0; wmMode < 3; ++wmMode)
                        {
                            int index = 1 + (wmMode + 3 * sfMode + 9 * isMode + 18 * mfMode);
                            DotMode mfModeEnum = (DotMode)mfMode;
                            DotMode isModeEnum = (DotMode)isMode;
                            StarfallMode sfModeEnum = (StarfallMode)sfMode;
                            MushroomMode wmModeEnum = (MushroomMode)wmMode;
                            string name = String.Format("MF {0} IS {1} SF {2} WM {3}",
                                mfModeEnum.ToString(),
                                isModeEnum.ToString(),
                                sfModeEnum.ToString(),
                                wmModeEnum.ToString());
                            rotations[index] = new SpellRotation()
                            {
                                RotationData = new RotationData()
                                {
                                    Name = name,
                                    MoonfireRefreshMode = mfModeEnum,
                                    InsectSwarmRefreshMode = isModeEnum,
                                    StarfallCastMode = sfModeEnum,
                                    WildMushroomCastMode = wmModeEnum
                                }
                            };
                        }
                    }
                }
            }
        }*/

        // Add talented effects to the spells
        private void UpdateSpells(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            DruidTalents talents = character.DruidTalents;
            StatsMoonkin stats = calcs.BasicStats;

            switch (talents.StarlightWrath)
            {
                case 1:
                    Starfire.BaseCastTime -= 0.15f;
                    Wrath.BaseCastTime -= 0.15f;
                    break;
                case 2:
                    Starfire.BaseCastTime -= 0.25f;
                    Wrath.BaseCastTime -= 0.25f;
                    break;
                case 3:
                    Starfire.BaseCastTime -= 0.5f;
                    Wrath.BaseCastTime -= 0.5f;
                    break;
                default:
                    break;
            }

            float moonfireDotGlyph = talents.GlyphOfMoonfire ? 0.2f : 0.0f;
            float insectSwarmGlyph = talents.GlyphOfInsectSwarm ? 0.3f : 0.0f;
            // Add spell-specific damage
            // Moonfire, Insect Swarm: glyphs
            Moonfire.DotEffect.AllDamageModifier *= 1 + moonfireDotGlyph;
            InsectSwarm.DotEffect.AllDamageModifier *= 1 + insectSwarmGlyph;
            // Moonfire: Direct damage +(0.03 * Blessing of the Grove)
            Moonfire.AllDamageModifier *= 1 + 0.03f * talents.BlessingOfTheGrove;
            // Moonfire, Insect Swarm: +2/4/6 seconds for Genesis
            Moonfire.DotEffect.BaseDuration += 2f * talents.Genesis;
            InsectSwarm.DotEffect.BaseDuration += 2f * talents.Genesis;
            // Wrath: 10% for glyph
            Wrath.AllDamageModifier *= 1 + (talents.GlyphOfWrath ? 0.1f : 0f);

            // Add spell-specific critical strike damage
            // Burning Shadowspirit Diamond
            float baseCritMultiplier = 1.5f * (1 + stats.BonusCritDamageMultiplier);
            float moonfuryMultiplier = baseCritMultiplier + (baseCritMultiplier - 1);
            Starfire.CriticalDamageModifier = Wrath.CriticalDamageModifier = Moonfire.CriticalDamageModifier = InsectSwarm.CriticalDamageModifier = moonfuryMultiplier;
            Starsurge.CriticalDamageModifier = moonfuryMultiplier;

            // Reduce spell-specific mana costs
            // Shard of Woe (Mana cost -405)
            Starfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Moonfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Wrath.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            InsectSwarm.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            Starsurge.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            // All spells: Mana cost -(0.03 * Moonglow)
            Starfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Moonfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Wrath.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            InsectSwarm.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Starsurge.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);

            // Add set bonuses
            Moonfire.CriticalChanceModifier += stats.BonusCritChanceMoonfire;
            InsectSwarm.CriticalChanceModifier += stats.BonusCritChanceInsectSwarm;
            Starfire.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Wrath.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Starsurge.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;

            // Dragonwrath, Tarecgosa's Rest: X% chance on damaging spell cast to proc a duplicate version of the spell.
            // If it duplicates a DoT tick, it fires Wrath of Tarecgosa for an equivalent amount of damage.
            // Wrath, Starfire, and Starsurge will duplicate the Eclipse energy gained.
            if (calcs.BasicStats.DragonwrathProc > 0)
            {
                Starfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Wrath.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Starsurge.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                InsectSwarm.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
            }

            // PTR changes go here
            if (((CalculationOptionsMoonkin)character.CalculationOptions).PTRMode)
            {
            }
        }
    }
}
