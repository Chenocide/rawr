using System;
using System.Collections.Generic;

namespace Rawr.Moonkin
{
    // The interface public class to the rest of Rawr.  Provides a single Solve method that runs all the calculations.
    public class MoonkinSolver
    {
        private const int NUM_SPELL_DETAILS = 17;
        // A list of all currently active proc effects.
        public List<ProcEffect> procEffects;
        public static float BaseMana = 18635f;
        public static float OOC_PROC_CHANCE = 0.0583f;
        public static float EUPHORIA_PERCENT = 0.08f;
        public static float DRAGONWRATH_PROC_RATE = 0.11f;
        public static float ECLIPSE_BASE = 0.25f;

        #region Cast Distributions

        #region Base

        public static double[,] CastDistribution = new double[21, 12] {
{ 0.112201675542959, 0.163857686791536, 0.0260750967004244, 0.0488282204555196, 0.141365806251765, 0.19752237356514, 0.0284697089722453, 0.0594743209873939, 0.0505486283324772, 0.0803496932062348, 0.0605539270340316, 0.0307528621602739, },
{ 0.114042028007065, 0.164349509905386, 0.0238740098878877, 0.0516760221097853, 0.142741452295154, 0.200246695991858, 0.0258469798997635, 0.0599574314002073, 0.0471704965099763, 0.0788317499218743, 0.0603258574787241, 0.030937766592319, },
{ 0.11799969139059, 0.172763603607372, 0.0225783904339955, 0.0480350230490673, 0.146679929900671, 0.204961324016751, 0.0263444391530921, 0.0601058016984924, 0.0409921380643726, 0.0688777231849632, 0.0592737603106119, 0.0313881751900213, },
{ 0.121764471080612, 0.171184609389629, 0.0194577709626976, 0.0511660808902789, 0.147471103385104, 0.208120467507756, 0.0241142504339553, 0.0602759791195389, 0.0377555338788771, 0.0729100244938032, 0.0595295254072601, 0.0262501834504886, },
{ 0.125941991554108, 0.176917343241301, 0.0198653583151873, 0.048576511607796, 0.151083614215813, 0.213316882934265, 0.0228334464947931, 0.0600241298826956, 0.0375052640651417, 0.0611506434322585, 0.0532150968118786, 0.0295697174447618, },
{ 0.126483501445769, 0.17872307762189, 0.017857070985555, 0.0500484989475125, 0.151980665967883, 0.215152198149393, 0.0213731728086209, 0.0612138938703885, 0.0347976354822555, 0.0611884513282732, 0.0529450676829118, 0.0282367657095479, },
{ 0.129749862120945, 0.183978089004926, 0.0166713919900528, 0.0485145878494224, 0.155560476201153, 0.219926677663381, 0.0212790798103803, 0.0592253061167089, 0.0342611374235927, 0.0548539065776369, 0.0482861271979221, 0.027693358043878, },
{ 0.131091657298844, 0.183181731707759, 0.0159020086295462, 0.0507460788340792, 0.155685216299866, 0.220751339269248, 0.0186233154279349, 0.0614359071038085, 0.032408193904479, 0.0544701602178632, 0.0483597793922353, 0.027344611914337, },
{ 0.134152680488936, 0.186904911645018, 0.01480069466869, 0.0499169913578331, 0.158312228714002, 0.225850565809757, 0.0184712924461523, 0.0590920759663317, 0.0340860136751558, 0.0527583608741566, 0.0421632657764845, 0.0234909185774837, },
{ 0.134706197301783, 0.186681166314172, 0.0139381207467775, 0.0514538777294864, 0.158196923786513, 0.225340582177821, 0.0167744388384255, 0.0610277824768887, 0.0337105787773242, 0.052412700379, 0.0420071549982777, 0.0237504764735304, },
{ 0.137031186131581, 0.18843532267892, 0.0123158486224539, 0.0541118284182993, 0.161220472508543, 0.230004774374464, 0.0163680574545773, 0.0585797775537552, 0.0448426053226892, 0.0559898711376759, 0.0261060185849194, 0.0149942372121224, },
{ 0.13693727782143, 0.188732972109399, 0.0122359352478543, 0.0539383805827648, 0.160852370311915, 0.230333152096411, 0.0151694735663961, 0.0593726475419103, 0.0430907542467106, 0.0530624210639346, 0.028082973558158, 0.0181916418531163, },
{ 0.138231457782214, 0.190496504134404, 0.0104730642169672, 0.0532531493196969, 0.160350141033002, 0.228853433889774, 0.0147811886837337, 0.0647778126559456, 0.0220151666371544, 0.0502669297732561, 0.0467445701847112, 0.0197565816891407, },
{ 0.139297389824083, 0.193049827313866, 0.00922721748587786, 0.0533695037741247, 0.161376965996016, 0.230660282740859, 0.0144727729354755, 0.0647642745967819, 0.0241274759820473, 0.0444779101875113, 0.0427634066844103, 0.0224129724789463, },
{ 0.141238703380094, 0.193223862203965, 0.00895765671460082, 0.0527401895710913, 0.161841441416536, 0.230441529774591, 0.0137539786377655, 0.0663706157897227, 0.0220950428579099, 0.039810248152163, 0.0429070331842446, 0.026619698317316, },
{ 0.142337308173456, 0.197650084597834, 0.0102585277558473, 0.0474462928602067, 0.164421734728288, 0.236961040187452, 0.0143890126776876, 0.0580683175275342, 0.0258951765781519, 0.0435864414395692, 0.0383386641676952, 0.0206473993062779, },
{ 0.142164416468516, 0.197116378433123, 0.00911811051327069, 0.0496989451184088, 0.163687271569936, 0.234438267456045, 0.013539373036566, 0.0630515957568035, 0.0245265067837807, 0.0426679671928347, 0.0382517025924026, 0.0217394650783135, },
{ 0.143071809411445, 0.196925850093166, 0.0086274091963112, 0.0509744132774129, 0.164989860347449, 0.235891107703791, 0.0132564222205794, 0.0616831274525444, 0.0264306377829982, 0.042119539056094, 0.0358593623656522, 0.0201704610925564, },
{ 0.142813446202822, 0.19575243444647, 0.0080542180450228, 0.0532089614757074, 0.164146318111643, 0.233940432356097, 0.0123738894894943, 0.065565397948722, 0.0242699652535375, 0.0414771435296183, 0.0374618526925517, 0.0209359404483131, },
{ 0.143640427823954, 0.195683078878102, 0.0078319200972966, 0.0547363470467099, 0.165657097946002, 0.235969991337687, 0.0119786782770156, 0.0639726770250696, 0.025710341187811, 0.0412557540611912, 0.034554549596271, 0.0190091367228908, },
{ 0.143396518068588, 0.193755709911713, 0.00725973781472637, 0.0572565670177664, 0.164911366316228, 0.234783246301563, 0.0113165743502343, 0.0664504909780918, 0.0247149750795176, 0.0418432239078091, 0.0351578957798674, 0.0191536944738954, },
};
        public static double[,] CastDistributionGoSF = new double[21, 12] {
{ 0.117398673066234, 0.169217965844611, 0.0260655626522456, 0.0514303657968267, 0.146706930336977, 0.205059796386997, 0.0285113115203299, 0.0599411209279263, 0.0433814500921588, 0.0810448189707636, 0.0394883619191937, 0.0317536424857362, },
{ 0.120403751276194, 0.172820613059669, 0.0240921930066668, 0.0520120031442399, 0.149686121301554, 0.209944120111978, 0.0270582481348902, 0.0590286580521652, 0.0521771009067793, 0.0803559668831338, 0.0202697771264097, 0.0321514469963197, },
{ 0.122947517145737, 0.176705017560206, 0.0248427272278553, 0.0517705085941455, 0.152968361127769, 0.215687740717983, 0.0248276407173767, 0.0581370160161347, 0.0581714526161403, 0.0731328434481007, 0.0125591920058549, 0.0282499828226959, },
{ 0.125373492327196, 0.177505817739281, 0.0213946737414886, 0.0520720530949912, 0.153911204423865, 0.217153470693739, 0.023953018343849, 0.0579552155158165, 0.0629287579674391, 0.0726934883602932, 0.00651187034071541, 0.0285469374513266, },
{ 0.128399972360023, 0.179537184276523, 0.0204578736719901, 0.0526807891953142, 0.156005916848948, 0.220909553503404, 0.0226590101366803, 0.0580615587259983, 0.0600514002947771, 0.0623991706823301, 0.00952794974259162, 0.02930962056142, },
{ 0.130530062565153, 0.180846708267627, 0.0192150139133399, 0.0523861625705953, 0.15656970003853, 0.221801917178828, 0.0205639121120948, 0.0597138405743925, 0.0492694652845762, 0.0608051082644105, 0.0191243980543583, 0.0291737111760948, },
{ 0.133667049962458, 0.184807474186932, 0.0168010721842541, 0.0509527811804016, 0.157848973538551, 0.223416042967287, 0.020461191503631, 0.0616677389769161, 0.0321074797757247, 0.0566268908411565, 0.0339552912773523, 0.0276880136053357, },
{ 0.134930432725213, 0.187056910801095, 0.0157820834395129, 0.0514022772035384, 0.159004365153124, 0.225374825472478, 0.0188940863489985, 0.0628231706761265, 0.0271115600927537, 0.0539960312946722, 0.0353975964510194, 0.0282266603414682, },
{ 0.137085165861366, 0.189322668723344, 0.013935044408801, 0.0523358414876079, 0.160714603983873, 0.228220144411954, 0.0185720408954075, 0.06221918495601, 0.0287839276048238, 0.0537538371071144, 0.0308380706834111, 0.0242194698762865, },
{ 0.138245385879108, 0.190927464886671, 0.0139238601570156, 0.0523879443719885, 0.161868499878652, 0.230031133897077, 0.0170270859202844, 0.062571968783304, 0.0280312910663639, 0.0520630700020601, 0.0282420069873399, 0.0246802881701355, },
{ 0.138706901114612, 0.192514657243286, 0.0129583454123387, 0.0549043348563207, 0.163731434573524, 0.232969123572076, 0.0159768324000794, 0.0618380989763065, 0.0259940582296276, 0.0560149277396545, 0.0285381486744404, 0.0158531372077339, },
{ 0.139205314696671, 0.192711076174952, 0.0115790543895625, 0.0553470425629837, 0.163614925538519, 0.232783547628965, 0.0156029458184043, 0.0623406489142294, 0.0262971581765592, 0.0555783738130249, 0.0283556593050509, 0.0165842529810791, },
{ 0.140536541470374, 0.19376297370785, 0.0109447763343678, 0.0547542089117098, 0.164076522676438, 0.233948692800839, 0.014885974613974, 0.0632495290604901, 0.023213767537342, 0.0527173598604544, 0.0294411473052233, 0.0184685057209372, },
{ 0.141598277268252, 0.195671272228171, 0.00926996418662956, 0.0549085181334285, 0.164123779422744, 0.233957804193803, 0.0146676184712157, 0.0659334797250112, 0.0205847131912868, 0.0466784047272959, 0.031427978398175, 0.0211781900539873, },
{ 0.143197331456286, 0.196285097406284, 0.00934171282258782, 0.0542847281158236, 0.165093519469514, 0.235455202201609, 0.0139659231518187, 0.0650566335145528, 0.0197568241709871, 0.0444532852954097, 0.0302720145268611, 0.0228377278682654, },
{ 0.143886361593095, 0.200642889251358, 0.0100948099818908, 0.0492120060107114, 0.166612501765968, 0.239903109387241, 0.0145127342315151, 0.0601772902993797, 0.0198465470517974, 0.0449302218055252, 0.0299905729440927, 0.0201909556774252, },
{ 0.144168040154693, 0.200009397992872, 0.00912191419935669, 0.051688556579454, 0.166665723498923, 0.239117477942507, 0.0136844881580237, 0.0626535889722133, 0.0214374280624067, 0.0447207027677594, 0.0268332907223621, 0.0198993909494297, },
{ 0.144570748650112, 0.19887788123776, 0.00855606197967552, 0.053618163767585, 0.166847710675992, 0.23930932342756, 0.0129778051881477, 0.0636013320873216, 0.0210934734418707, 0.0435014508307436, 0.0273849424599748, 0.019661106253257, },
{ 0.144621638429158, 0.198544989686282, 0.00817508611291725, 0.0546529914031776, 0.166991569524658, 0.238438426405708, 0.0124186553939237, 0.0649953445093441, 0.0213448327291617, 0.042424461350321, 0.0266737050481061, 0.020718299407242, },
{ 0.144729334655547, 0.197635786714326, 0.00770636012529955, 0.0568988080792171, 0.167157708509794, 0.238753718725339, 0.011679128046301, 0.0662350989811777, 0.0219025087232336, 0.0426229007584512, 0.026190896174635, 0.0184877505066788, },
{ 0.145159850182583, 0.19701469062547, 0.007319034119217, 0.0578259476420559, 0.16741051105558, 0.238143459750734, 0.0113104530277068, 0.0672319336958284, 0.021322996426499, 0.0417685410776772, 0.0260726852837797, 0.0194198971128691, },
};
        public static double[] BaseRotationDurations = new double[21] { 60.9984459378877, 57.6823635669922, 53.8809385488427, 51.1290665385426, 48.3060764770532, 45.8091607033818, 43.5461904912672, 41.7520965726828, 40.0428480993792, 38.6461660678751, 37.0835518014932, 36.0472872039415, 34.8878452369007, 33.8819121641159, 32.9278141834126, 32.2923572616204, 31.7610169809418, 31.408146363296, 30.9785696367004, 30.6065542139407, 30.2613929639753, };
        public static double[] BaseRotationDurationsGoSF = new double[21] { 59.4316481397515, 55.9912616474414, 52.5104472441811, 49.9882987187565, 47.4269371626408, 45.2362641082129, 43.1571179592582, 41.2594158114477, 39.6186050660645, 38.1084031670529, 36.7877609661834, 35.7607228733773, 34.6525542056857, 33.5830987010572, 32.6923350411737, 31.9980271872226, 31.488296726655, 31.0791258308993, 30.7056925226108, 30.2883292328928, 29.9647039689441, };
        public static double[] BaseNGUptimes = new double[21] { 0.481778806637751, 0.492381405234174, 0.543413255753838, 0.571769834080802, 0.588590052974066, 0.641452389403424, 0.660668730229425, 0.700298046568231, 0.719067455130018, 0.747604831646355, 0.773139730469187, 0.795376252099236, 0.816359694684785, 0.827298522899957, 0.850795284826966, 0.814261782032395, 0.845082655450957, 0.807746475531128, 0.845672103804777, 0.800585534995703, 0.837115202645545, };
        public static double[] BaseNGUptimesGoSF = new double[21] { 0.494405609771381, 0.508022046526729, 0.554995823601674, 0.579732712648294, 0.592332635784673, 0.619135241321638, 0.630755521377585, 0.675559405073744, 0.693801218972574, 0.727542784464095, 0.726828127117952, 0.743392034381857, 0.762993383127781, 0.790795327990197, 0.797817549249118, 0.782036174808947, 0.79117573772787, 0.789359223158808, 0.795245831065516, 0.79691031443263, 0.788947000671212, };
        public static double[] BasePercentMoonfiresExtended = new double[21] { 0.630990906776733, 0.846926358739803, 0.900770644134443, 0.893317916236562, 0.816124187134452, 0.677107386505453, 0.590128417710917, 0.66399642803088, 0.763466188019079, 0.867279880288986, 0.920542794633983, 0.926289239766459, 0.914103940439563, 0.9147353099417, 0.919619263158114, 0.927785154553232, 0.975217714285889, 0.967324183793014, 0.979345274853959, 0.970913281537369, 0.985158588137124, };
        
        #endregion

        #region 4T12

        public static double[,] T12CastDistribution = new double[21, 12] {
{ 0.100716465912452, 0.150748847149919, 0.0234813625230269, 0.0441099486652759, 0.152387415792823, 0.212803959803287, 0.030588565344486, 0.0642584909421202, 0.0452613800720261, 0.0773138398047337, 0.0651910918612792, 0.0331386321285716, },
{ 0.102740699755117, 0.151872129600398, 0.0210247906414544, 0.0468369456178371, 0.153545896692646, 0.215035270749473, 0.0283040339271972, 0.064902484003185, 0.0416025648299001, 0.0755612984868518, 0.0652764160193076, 0.0332974696766331, },
{ 0.107202089027287, 0.157793357908027, 0.0204011292481762, 0.043381751417462, 0.157780295192197, 0.221418226926758, 0.0279507494693862, 0.0646856244969674, 0.0370748204033955, 0.0656920831443436, 0.0626185677534741, 0.034001305012526, },
{ 0.109193740188156, 0.15910670344602, 0.0167917152492155, 0.0460040891710185, 0.158812462514407, 0.222943562484327, 0.0263483678399085, 0.0655318332384563, 0.0345701824873411, 0.0661256538433143, 0.0621144284526252, 0.0324572610852106, },
{ 0.112134109490633, 0.16395828819686, 0.0181539847429216, 0.0440580920670034, 0.162902949929872, 0.230019841043593, 0.0242578138362772, 0.0642561889232243, 0.0327422830883611, 0.0586392636008073, 0.0573870827964469, 0.0314901022840006, },
{ 0.113123536021104, 0.165790851259393, 0.0161114133373003, 0.045381500298297, 0.163714794027423, 0.231997462331126, 0.0228241155595463, 0.0654154174351406, 0.0313616109247995, 0.0585299096363223, 0.055858805048735, 0.0298905841208126, },
{ 0.115850147329852, 0.170534107945048, 0.0151733549037405, 0.0439337671451556, 0.167764782234512, 0.23755900117728, 0.0224898144098471, 0.0634115365100565, 0.0302789103809152, 0.0531766970627564, 0.0513628337913387, 0.0284650471094975, },
{ 0.117039258791359, 0.169391196796795, 0.0145402353782092, 0.0461615201924915, 0.167677884255758, 0.238135378832584, 0.019598487744874, 0.0658876655003034, 0.0308083282079839, 0.0541629092314469, 0.0495747691514915, 0.0270223659167034, },
{ 0.119029312170688, 0.172329380847075, 0.013777919296194, 0.0468264110458552, 0.171269167096223, 0.244578568374918, 0.0193647245855757, 0.0615102560828655, 0.0421501479889287, 0.0570191386379819, 0.0335069822613739, 0.0186379916123206, },
{ 0.119054098573713, 0.171915166279291, 0.0132825161171375, 0.0487465657576188, 0.171437984156393, 0.24492584454405, 0.0176026645791712, 0.0620219489268843, 0.048303355810179, 0.0573611115308938, 0.0271211603734521, 0.0182275833512161, },
{ 0.122427156476169, 0.177239358268425, 0.00949497781126182, 0.045887102407688, 0.172845867511059, 0.244883665843951, 0.0187662820376004, 0.0670578185977646, 0.0218021446724388, 0.0448823916098969, 0.0488718819094488, 0.0258413528542957, },
{ 0.122210624758988, 0.177129412988681, 0.00954095531684634, 0.0461592481225114, 0.172499386515555, 0.245990978103411, 0.0175673673771024, 0.0671211917316998, 0.0217170100860235, 0.0457542918467069, 0.0491177697889727, 0.0251917633635006, },
{ 0.123094099631312, 0.177402263371681, 0.00887958249902008, 0.0473264814704774, 0.172829508984961, 0.24560368480704, 0.01598795863151, 0.071176110465709, 0.0201485763567664, 0.041476321494944, 0.0480502283378845, 0.0280251839486944, },
{ 0.123522131626473, 0.178745372186541, 0.0076658531244418, 0.048672459234568, 0.174452664352556, 0.248540689607127, 0.015889985529554, 0.0690074395466479, 0.0251238419979368, 0.0440759208847001, 0.0416278603981082, 0.022675781511345, },
{ 0.124361194589597, 0.178199715108997, 0.00807014308116316, 0.0492232353307292, 0.174722784159568, 0.249000530920692, 0.0142765985376812, 0.0710731209275608, 0.0231891258782928, 0.0431644995629429, 0.0415254689649105, 0.0231935829378666, },
{ 0.125377334869562, 0.183358448717573, 0.00920729472093646, 0.0434078157430529, 0.177465973410083, 0.255405000352181, 0.0152193573032298, 0.0624023469131213, 0.0252257171251959, 0.0429315231747902, 0.0388524968599343, 0.02114669081034, },
{ 0.125201210066761, 0.182484686824641, 0.00837436072751677, 0.0456349283767699, 0.176768415004436, 0.253611076010758, 0.0141558641785402, 0.0667589714252441, 0.0237319076019962, 0.0435067964455965, 0.0389884054778162, 0.0207833778599243, },
{ 0.125926161503565, 0.182589041575526, 0.00790369294813536, 0.0461426143996876, 0.177958948872344, 0.254150665269208, 0.0138824527703156, 0.0665897241858863, 0.024645002984163, 0.0403415299079951, 0.0377833462535035, 0.0220868193296714, },
{ 0.125847111706619, 0.181019843665693, 0.00732649078221311, 0.0486580001484313, 0.177419882177608, 0.252815080624294, 0.0130370857712513, 0.0696865089951399, 0.0245637823515135, 0.041048386611493, 0.0369767544484271, 0.0216010727173165, },
{ 0.126348287051143, 0.18146754785706, 0.00688774411459653, 0.049794797069476, 0.178769108680513, 0.254485055980577, 0.0128358886840126, 0.0689013140965098, 0.023728121311194, 0.0401446541649993, 0.0365270069218625, 0.0201104740680572, },
{ 0.12599976883119, 0.179605204296645, 0.00666607665422321, 0.0520486731248848, 0.177808374597933, 0.253185365950382, 0.0117242243149931, 0.07213656563429, 0.0223429007236358, 0.0398693654416171, 0.0372428428347099, 0.0213706375954962, },
};
        public static double[,] T12CastDistributionGoSF = new double[21, 12] {
{ 0.106153249671221, 0.157462711699024, 0.023531717830772, 0.0470195696118804, 0.159717841134093, 0.223038483823531, 0.0308901613113531, 0.0633486202486721, 0.0519581269196794, 0.0776529245616201, 0.0248233484820879, 0.0344032447060672, },
{ 0.107497660146824, 0.159021356950338, 0.0215183374358326, 0.0477484162159401, 0.161451687335009, 0.22521413660933, 0.0295970430836018, 0.0623813081878844, 0.061966931229529, 0.0774107414196004, 0.011680997275294, 0.0345113841108168, },
{ 0.110067699004934, 0.160582077242527, 0.0231318098046328, 0.048186056754674, 0.164261469595353, 0.231548333786141, 0.025626238866139, 0.0621303343876942, 0.0632330259404669, 0.067065700239636, 0.010409721078473, 0.0337575332993298, },
{ 0.112317907421356, 0.161838446347909, 0.0200965482278486, 0.0479307638388638, 0.164949263879649, 0.232234920973899, 0.024693493899469, 0.0631840874692562, 0.0541033936233955, 0.0668145488375181, 0.0186464303568445, 0.0331901951239904, },
{ 0.115366408928248, 0.164840297426841, 0.0183552149598568, 0.0473966557741928, 0.166850356314949, 0.235152684411158, 0.0237687959626949, 0.0657494358615188, 0.0368018092535182, 0.0601665596038892, 0.0340390882977878, 0.031512693205345, },
{ 0.117330397547509, 0.169499370658285, 0.0157830849851174, 0.0458815524066895, 0.168181151044296, 0.23721099965963, 0.023160717426712, 0.0669193837248349, 0.0274711656413689, 0.0568847527977723, 0.0393646960999089, 0.0323127280078765, },
{ 0.119082498036671, 0.172841163851179, 0.015059553986278, 0.045842591618379, 0.170777462427406, 0.242017088360626, 0.0220710173872882, 0.0661870469234012, 0.0285111616208322, 0.0550073153001157, 0.0340214858995219, 0.0285816145883019, },
{ 0.120060812966727, 0.174801258907525, 0.0144301777339769, 0.0465782162053694, 0.17234610630926, 0.24425624751459, 0.020371191199593, 0.0663721636202551, 0.0286810392117105, 0.0531956278793423, 0.030108234192008, 0.0287989242596426, },
{ 0.121790277440029, 0.17650252540348, 0.0126841454160097, 0.047070774773007, 0.173834579200693, 0.246383463712986, 0.0197654312512071, 0.0662174732358012, 0.0294392321205637, 0.0516506299426982, 0.0290880827751078, 0.0255733847284176, },
{ 0.121649118095628, 0.176183881105843, 0.0124136512360506, 0.0495500327585873, 0.174733248873701, 0.247809323174939, 0.0183325351317131, 0.0652075082829272, 0.0257084335994851, 0.059788165226999, 0.0316021563472003, 0.0170219461669262, },
{ 0.124335228843763, 0.180004634529925, 0.0101668846219004, 0.0479425733735177, 0.175920224230006, 0.249477230563709, 0.018268195261424, 0.0688712380795874, 0.0180995934630971, 0.0471449172270186, 0.0352477003914885, 0.0245215794145629, },
{ 0.124208648586681, 0.18010572300646, 0.0096229436833807, 0.0481584569772557, 0.1756771937708, 0.249911659618236, 0.017375833708756, 0.0692785416551086, 0.0181871840032891, 0.0472099057249862, 0.0355654348430119, 0.0246984744220352, },
{ 0.12518465981407, 0.180890907537573, 0.00933912707938258, 0.0485608606627673, 0.176873129503422, 0.252169213393438, 0.0163236981387514, 0.0691467290877472, 0.0205490511746669, 0.0457839441391635, 0.0303080260076182, 0.0248706534614006, },
{ 0.125350568057392, 0.181123338189706, 0.00821138049845994, 0.050572938240847, 0.177287120476198, 0.252573352033176, 0.0154266142760081, 0.0709541541423938, 0.0205016173751313, 0.0457251321824608, 0.0302862078006333, 0.0219875767275938, },
{ 0.126398808391181, 0.181983975106499, 0.00847528795760315, 0.0496562495149947, 0.178528079919091, 0.254902832048171, 0.0147348060202098, 0.0694857104952699, 0.0205338215312369, 0.0447868496119001, 0.0281804812825698, 0.0223330981212729, },
{ 0.12725310256996, 0.186170304405033, 0.00916150000677912, 0.0450443645153605, 0.180328433709712, 0.259185226935972, 0.0152905404530635, 0.0643349950848812, 0.020340222247164, 0.0435469429775884, 0.0281650627670299, 0.0211793043274555, },
{ 0.127208926800952, 0.185488081604706, 0.00833336468419732, 0.0470080955387246, 0.180147419557835, 0.258136438892302, 0.0142625417606218, 0.0671867995306115, 0.020445711674611, 0.0428873718685952, 0.027681863904781, 0.0212133841820622, },
{ 0.127374842316442, 0.184664881680485, 0.0077836846619821, 0.0482851750952613, 0.180181830927007, 0.257815605440257, 0.0137284272767349, 0.0685112993450721, 0.0206020518218447, 0.0411800931140548, 0.0277039798775483, 0.0221681284433109, },
{ 0.127599526905009, 0.184208891806241, 0.00723567128166192, 0.0494752295650087, 0.180515887300142, 0.256814150904396, 0.0131968496632778, 0.070224155472001, 0.0207927870154986, 0.0405014484248821, 0.0267764505171073, 0.0226589511447749, },
{ 0.127605871640681, 0.183549388950413, 0.0069279009430811, 0.0513568138179183, 0.180561930616457, 0.257405080801277, 0.0123383954810075, 0.0713847116957304, 0.0199673784640487, 0.0406820144947926, 0.0279821727098314, 0.020238340384762, },
{ 0.127968878442327, 0.182478814302335, 0.00676566492972657, 0.0527431282572444, 0.18072231580708, 0.257196238775116, 0.0118116358414717, 0.0723512434325204, 0.0199996685670109, 0.0401269966428921, 0.0267060802152619, 0.0211293347870138, },
};
        public static double[] T12RotationDurations = new double[21] { 56.3474335962737, 53.2634708127119, 49.7978362318843, 47.1660032631801, 44.5524270064411, 42.2318870273517, 40.1057566068713, 38.4782750300102, 36.8939522990778, 35.6227439076619, 34.2068976477145, 33.2552193708677, 32.1396471774963, 31.3965165763899, 30.4894492792598, 29.9262803319729, 29.4285869556014, 29.1104915111633, 28.7140101094582, 28.3674615462653, 28.0471228101448, };
        public static double[] T12RotationDurationsGoSF = new double[21] { 54.6371379999996, 51.8005707108351, 48.7285240162493, 46.3961103280827, 43.9339453413851, 41.6613412135969, 39.5946595911626, 37.9159444332211, 36.4506880401481, 35.3557081978244, 33.8762106785582, 32.9458964209423, 31.9054256032011, 31.0762763196031, 30.2130301312874, 29.5686453106182, 29.1125845106969, 28.7799170062671, 28.3956770819983, 28.0538371696395, 27.7371410811595, };
        public static double[] T12NGUptimes = new double[21] { 0.52063784468873, 0.533362730799637, 0.582591347819496, 0.617744296531157, 0.638107540132108, 0.693771544400356, 0.718884680994761, 0.755715539766482, 0.77340072423921, 0.79960394859335, 0.814962023674089, 0.835097915343413, 0.871047437624648, 0.825815383016481, 0.858622062533897, 0.812596810529841, 0.853443380127245, 0.809398478761414, 0.852844479302961, 0.801197906716841, 0.853306193712789, };
        public static double[] T12NGUptimesGoSF = new double[21] { 0.535669208948951, 0.548473497889853, 0.584332778898899, 0.601089266012046, 0.618994820324258, 0.669065904228431, 0.696369739570643, 0.733558344038772, 0.754814423794746, 0.739951781841683, 0.777154456014034, 0.790675903292178, 0.807371916690127, 0.797713602062315, 0.808821176342914, 0.796027375353491, 0.812665367058215, 0.803572514371485, 0.813409538393766, 0.806022874486184, 0.799624490865872, };
        public static double[] T12PercentMoonfiresExtended = new double[21] { 0.841399282937534, 0.893841851220839, 0.842109862745072, 0.711737033760845, 0.575418935672484, 0.643155186495666, 0.780504444051294, 0.890254390092834, 0.91244357481969, 0.892532749226202, 0.90795337186122, 0.908422795321834, 0.968998138287095, 0.982453134503061, 0.985221368421171, 0.993380725146252, 0.99461598830414, 0.993439976608245, 0.995245941520511, 0.992556917293296, 0.996531040935704, };

        #endregion

        #region 4T13

        public static double[,] T13CastDistribution = new double[21, 12] {
{ 0.105294221574699, 0.156413699256465, 0.0382052144449842, 0.0486109100759746, 0.135127017069594, 0.186590900836838, 0.0479471870900528, 0.0598273548261679, 0.0498195771788071, 0.0803003052634478, 0.0611721702338049, 0.0306914421491642, },
{ 0.105598601245765, 0.156340509233964, 0.0378252868538958, 0.0514313189815321, 0.136312971259972, 0.191630379193531, 0.0437944705496667, 0.0605821440279751, 0.0462908971697082, 0.0785353294721888, 0.0608045459512622, 0.0308535460605398, },
{ 0.110668377718687, 0.166654094704041, 0.0342517191565874, 0.0476009295345448, 0.142057642843984, 0.196935920153014, 0.0422780080001961, 0.0602499053149356, 0.0397922384339921, 0.0683234773890485, 0.0598594628530132, 0.0313282238979568, },
{ 0.113191727838564, 0.163923978217352, 0.0327425276987421, 0.0503559049201338, 0.141754425447509, 0.199795153338711, 0.0421930853929106, 0.0608533901192612, 0.0366902150495947, 0.0728871464787587, 0.0599662675954898, 0.0256461779029741, },
{ 0.117853889736342, 0.16978233296245, 0.0322255616611495, 0.0478385060575484, 0.146607077758747, 0.20488904221236, 0.0392768102232022, 0.0606375138109858, 0.036544764432831, 0.0609178712465673, 0.053899868355777, 0.0295267615420407, },
{ 0.117845183867863, 0.173014917682589, 0.0302520154436839, 0.0494392540085234, 0.147653211291494, 0.206827854451509, 0.0369902707654213, 0.0617837526434248, 0.0338050646409057, 0.0607751183502882, 0.0534590488322414, 0.0281543080220563, },
{ 0.121195080378144, 0.178035020512528, 0.0301529603769117, 0.0479986682425972, 0.15266657578489, 0.211064904794287, 0.0348071034289712, 0.0595468243231897, 0.033447314595556, 0.0545609319340008, 0.0488191164836844, 0.0277054991452397, },
{ 0.121845006011143, 0.177928769605345, 0.0283304561489447, 0.0501131780312158, 0.152662876947367, 0.211904301028544, 0.0332327306389193, 0.0621072840827839, 0.0317816289472402, 0.0542186633799608, 0.0486016357155367, 0.0272734694630002, },
{ 0.124199890421569, 0.181705462858853, 0.0273541454117027, 0.0493523455089591, 0.155595993468324, 0.218345659073189, 0.0318532910568891, 0.0595229450926979, 0.0334717855098783, 0.0527072987009748, 0.0425633480440299, 0.0233278348529334, },
{ 0.125335667555512, 0.181441126600011, 0.0260674481622335, 0.0510379519080716, 0.155618366395308, 0.218167763387233, 0.0295273896056214, 0.0612816349844195, 0.0331555845447565, 0.0523971666502035, 0.0423803449636222, 0.0235895552430073, },
{ 0.126106154880247, 0.180979705128623, 0.0293050325932887, 0.053962796797774, 0.159293363742651, 0.225817656613264, 0.0248079810109557, 0.0582200025920656, 0.0465747265404967, 0.0568834260638345, 0.0241632673328442, 0.0138858867039563, },
{ 0.128308872593445, 0.182163923675099, 0.0258648244170564, 0.0533926669597292, 0.15886114722739, 0.224371498316176, 0.0256700289483301, 0.0595300848448785, 0.042751595979231, 0.0530787038323117, 0.0281455641454789, 0.0178610890608738, },
{ 0.129856923416725, 0.185309350188519, 0.0217516241253479, 0.0525793230219386, 0.158037396748356, 0.223116239918239, 0.0257920618839465, 0.0652411861608998, 0.0210600808154314, 0.049840077132393, 0.0474784817647874, 0.0199372548234172, },
{ 0.132425563858709, 0.18733477721391, 0.0201049068489681, 0.052889381490097, 0.159389520549909, 0.224657817123811, 0.0247783532588923, 0.065049418863281, 0.0240327514684325, 0.0444632772605101, 0.0426523789277785, 0.0222218531357009, },
{ 0.133576975972089, 0.18734223867005, 0.0212511741148587, 0.0523883979904519, 0.159704749144178, 0.224596257697417, 0.0234554723798459, 0.0666233511631623, 0.0219065260906108, 0.0395430327475597, 0.0429116118806481, 0.0267002121491293, },
{ 0.134774732493169, 0.190997100909131, 0.0233168556884789, 0.0469269354435427, 0.162433479495701, 0.231055335794366, 0.0243725250722786, 0.0580684042388655, 0.0258725272160351, 0.0439349833147768, 0.038154788216199, 0.0200923321174574, },
{ 0.134552619762954, 0.190752591953957, 0.0218073537667048, 0.0492331808353775, 0.161436211219297, 0.228534979774731, 0.0233941200304863, 0.0634081002271334, 0.0244324753314669, 0.0428020513319036, 0.0382161563901531, 0.0214301593758354, },
{ 0.136617735937028, 0.190519809423152, 0.0203002143820611, 0.050767727063236, 0.162879190630707, 0.230019609787683, 0.0228061413395272, 0.0619302215904021, 0.0259021307235708, 0.0420696225965489, 0.0361775441995313, 0.0200100523265531, },
{ 0.1370407929147, 0.189792385309346, 0.01891436080241, 0.0528495247895099, 0.162052587510938, 0.227518704988096, 0.0222498229569028, 0.0656975398707014, 0.0238434591390491, 0.0415201570891234, 0.0378410376463647, 0.0206796269828579, },
{ 0.137760060407079, 0.18936881285027, 0.0193056278032162, 0.0548174296767732, 0.163508677782194, 0.229862004336023, 0.0209604386495586, 0.0641514007290544, 0.0261626692029128, 0.0419678583665451, 0.0339701046800026, 0.0181649155163703, },
{ 0.137201447402676, 0.188064821193861, 0.0188836601286439, 0.0570621202115703, 0.16278130932954, 0.228575487811847, 0.0203076683133425, 0.0663459035234207, 0.0247772265047083, 0.0422381682212726, 0.0349667278349599, 0.0187954595241572, },
};
        public static double[,] T13CastDistributionGoSF = new double[21, 12] {
{ 0.109210522502261, 0.161654208884973, 0.0387239444457326, 0.0510307739571982, 0.14036904547984, 0.192324552505275, 0.0502585629738691, 0.0604994609195669, 0.0413258770201025, 0.0807771090797375, 0.0421959050175056, 0.0316300372139396, },
{ 0.111208937949352, 0.165196969980907, 0.0375369262225144, 0.051328299222097, 0.143148119986156, 0.200799047550974, 0.0458932435191194, 0.0597904220762798, 0.0496256257743665, 0.0798686021012851, 0.0235911567117954, 0.0320126489051529, },
{ 0.115002380385622, 0.169569941484367, 0.0361375562071825, 0.0510818329492455, 0.147884890044495, 0.20692254068236, 0.0429275408000711, 0.0587257154889861, 0.0574369393995673, 0.0726352765301825, 0.013550704829567, 0.0281246811983541, },
{ 0.115158133851207, 0.16912338936052, 0.0368529724948586, 0.0515474687862455, 0.149784141414634, 0.209037581993977, 0.0404517831557812, 0.058256842171951, 0.0627363570795037, 0.0722460745231435, 0.00656865563991852, 0.0282365995282605, },
{ 0.11769881058644, 0.172508542315485, 0.0358422595510173, 0.0520152579741673, 0.152869364176852, 0.212626862841182, 0.0371432013697788, 0.0584395982977157, 0.060713665831962, 0.0621872899075553, 0.00874102542587706, 0.029214121721968, },
{ 0.120105209965334, 0.174225895605744, 0.0329207949716739, 0.0517040542916939, 0.153758632709372, 0.214483513808772, 0.0344906505523708, 0.0604123635532433, 0.0498097105885163, 0.0604414349528858, 0.018424284537179, 0.0292234544632151, },
{ 0.123486160537257, 0.178528605162518, 0.0319943678975543, 0.0503402795840458, 0.155242358964988, 0.214942025917952, 0.0336031555705484, 0.0619345577576439, 0.0314639362308645, 0.0561533639150109, 0.0344785965709248, 0.0278325918906929, },
{ 0.125232708052201, 0.180518241012939, 0.0305409155520268, 0.0505575860361108, 0.156259178063399, 0.217117220468138, 0.0323479140278194, 0.0631670214039502, 0.0262421488340714, 0.0537293933381403, 0.0360862234336335, 0.0282014497775714, },
{ 0.12706416572868, 0.183718006169268, 0.0277283906266412, 0.0515240129700058, 0.157933376135761, 0.221303178546412, 0.0309620664001149, 0.062588544156008, 0.0280759479981578, 0.0536752389612311, 0.0313874388340668, 0.0240396334736532, },
{ 0.128822554331155, 0.18551685157341, 0.0264660286860452, 0.0518759294043381, 0.159207711462284, 0.22303210685803, 0.0296477437978712, 0.0627767845890242, 0.0276100438806605, 0.0519141949104161, 0.0285701377718687, 0.0245599127348962, },
{ 0.128570516344622, 0.185812402058307, 0.0273110313509259, 0.0548606273326015, 0.161524305590438, 0.227191933790347, 0.0266638122050635, 0.0619094846992429, 0.0269580342182049, 0.0571840343680872, 0.0275255778581538, 0.0144882401840065, },
{ 0.129270694614506, 0.186685599029486, 0.0256943163815106, 0.0548577206869855, 0.161445562479508, 0.22739802144353, 0.0259802162805634, 0.0622198449128559, 0.0270406638690226, 0.0558092979629373, 0.0275183554308929, 0.0160797069082019, },
{ 0.131761311714169, 0.188344809259557, 0.0229465851979024, 0.0539029870643781, 0.16189368584435, 0.228229087055164, 0.0256296551168506, 0.0637048554095613, 0.0232630652629967, 0.0521016991552074, 0.0293821249744613, 0.0188401339454025, },
{ 0.133976966480347, 0.189647895692663, 0.0211155997480595, 0.0547322766472138, 0.162054776652049, 0.228054429814769, 0.0245411013996195, 0.0661620048140327, 0.0209169311820253, 0.0466886172689293, 0.0311321916355484, 0.0209772086647431, },
{ 0.135462577435843, 0.190293435942397, 0.0215862269600055, 0.0540161318247331, 0.163086121478639, 0.229453084220342, 0.0235333603225204, 0.0653653465070944, 0.019611796331011, 0.0441919101004292, 0.030475571042157, 0.0229244378348281, },
{ 0.136192181037149, 0.193838006987783, 0.0230903855577898, 0.0488847606119752, 0.16460928038381, 0.233618912718712, 0.0245987620224849, 0.0603453064067109, 0.0194718807022707, 0.0449761400032424, 0.0304112224274746, 0.0199631611405986, },
{ 0.136744075545509, 0.193267506340844, 0.0219931012023317, 0.0514765269239849, 0.164673686266279, 0.233465863132404, 0.0229688789025949, 0.0627435228766164, 0.0212291295766949, 0.0449276522192575, 0.0269521216596375, 0.0195579353538465, },
{ 0.13810710535696, 0.1924996267253, 0.0204866857297032, 0.0532470062966052, 0.164860070850661, 0.233128134676303, 0.022469323469075, 0.0638001520502503, 0.020913861095064, 0.0434316447883699, 0.0275194631775843, 0.0195369257841237, },
{ 0.138807060685005, 0.192486306443404, 0.0195221994346211, 0.0543740268378592, 0.164928672569047, 0.232043577507798, 0.0218491214455961, 0.0651415210807706, 0.021045094255005, 0.0423486906087649, 0.0268487435185512, 0.0206049856135772, },
{ 0.138880284529979, 0.191288219816621, 0.0192811367284743, 0.0568393393099026, 0.164996080534386, 0.23273632990228, 0.020620098971408, 0.0663147240906332, 0.0218558089074267, 0.0428567450147584, 0.0261371100151822, 0.0181941221789474, },
{ 0.139203559975175, 0.191191543151465, 0.0187590311027837, 0.0578388792268707, 0.165184326921791, 0.231921570894698, 0.0201991896490288, 0.0672528575058149, 0.0213320842192368, 0.0422265262121244, 0.0260886288927642, 0.0188018022482481, },
};
        public static double[] T13RotationDurations = new double[21] { 60.842378658385, 57.4988604850639, 53.7767377046868, 51.0418333291327, 48.2471856078901, 45.7714759899518, 43.5356695934596, 41.6912028446783, 39.9652876374929, 38.5882531938579, 37.0314831137461, 35.9978398946308, 34.840980622213, 33.8666484628899, 32.92014591102, 32.304330336769, 31.7965729893294, 31.4656648310327, 31.0487248782826, 30.6909812534906, 30.3695614687372, };
        public static double[] T13RotationDurationsGoSF = new double[21] { 59.3654343322981, 55.8844038627625, 52.4427640052703, 49.9092288888889, 47.3609020080512, 45.1682924583577, 43.1203104505928, 41.2127354712339, 39.5571276849239, 38.056454774431, 36.7500246815983, 35.709415861474, 34.6012441332217, 33.5801692591468, 32.7036910435346, 32.018164559689, 31.5294495323033, 31.1440210031894, 30.776218723766, 30.3832945842754, 30.0744700728778, };
        public static double[] T13NGUptimes = new double[21] { 0.481887944186466, 0.499053370077025, 0.543251681836953, 0.569539799012953, 0.589571689173908, 0.640493149878483, 0.659595857037873, 0.703056768716315, 0.71965491693142, 0.747697670734052, 0.772360983916007, 0.796878721504824, 0.816913261515783, 0.827149616753474, 0.851705651573038, 0.81469185376465, 0.844530381112198, 0.807484413660712, 0.845875814654502, 0.800407958688793, 0.836915979874253, };
        public static double[] T13NGUptimesGoSF = new double[21] { 0.492728231877338, 0.512822362749369, 0.554966989361153, 0.578603989860126, 0.594125721480287, 0.62172589203827, 0.630403566152224, 0.677128355926319, 0.693818229873618, 0.727988340973813, 0.724273575464144, 0.745809016306564, 0.766110160818416, 0.790309807541671, 0.797619871460485, 0.781999037664497, 0.789417279114028, 0.787326765077676, 0.794326424202439, 0.79594256863841, 0.788285489035593, };
        public static double[] T13PercentMoonfiresExtended = new double[21] { 0.604023321458717, 0.81949706167367, 0.88693648795975, 0.888457630546865, 0.812736561403453, 0.667486514521565, 0.584238885547179, 0.661425773453257, 0.76178489183745, 0.865371464445454, 0.918697241142399, 0.92347628070211, 0.908615078579002, 0.905359929824706, 0.909012666666851, 0.912558123642577, 0.974026222222395, 0.960883388471397, 0.97764397660835, 0.966537273183171, 0.979688319131309, };

        #endregion

        public static string[] CastDistributionSpells = new string[12] { "Starfire", "Wrath", "Starsurge", "Shooting Stars", "Starfire (Eclipse)", "Wrath (Eclipse)", "Starsurge (Eclipse)", "Shooting Stars (Eclipse)", "Moonfire", "Insect Swarm", "Moonfire (Eclipse)", "Insect Swarm (Eclipse)" };

        #endregion

        // A list of all the damage spells
        private Spell[] _spellData = null;
        private Spell[] SpellData
        {
            get
            {
                if (_spellData == null)
                {
                    _spellData = new Spell[] {
                        new Spell()
                        {
                            Name = "SF",
                            BaseDamage = (1214f + 1514f) / 2.0f,
                            SpellDamageModifier = 1.231f,
                            BaseCastTime = 3.2f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Arcane,
                            BaseEnergy = 20
                        },
                        new Spell()
                        {
                            Name = "MF",
                            BaseDamage = (197.0f + 239.0f) / 2.0f,
                            SpellDamageModifier = 0.18f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = new DotEffect()
                                {
                                    BaseDuration = 12.0f,
                                    BaseTickLength = 2.0f,
                                    TickDamage = 93.0f,
                                    SpellDamageModifierPerTick = 0.18f
                                },
                            School = SpellSchool.Arcane
                        },
                        new Spell()
                        {
                            Name = "W",
                            BaseDamage = (831f + 937f) / 2.0f,
                            SpellDamageModifier = 3.075f/3.5f,
                            BaseCastTime = 2.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.09f),
                            DotEffect = null,
                            School = SpellSchool.Nature,
                            BaseEnergy = 40/3f
                        },
                        new Spell()
                        {
                            Name = "IS",
                            BaseDamage = 0.0f,
                            SpellDamageModifier = 0.0f,
                            BaseCastTime = 1.5f,
                            BaseManaCost = (float)(int)(BaseMana * 0.08f),
                            DotEffect = new DotEffect()
                            {
                                BaseDuration = 12.0f,
                                BaseTickLength = 2.0f,
                                TickDamage = 136.0f,
                                SpellDamageModifierPerTick = 0.13f
                            },
                            School = SpellSchool.Nature
                        },
                        new Spell()
                        {
                            Name = "SS",
                            BaseDamage = (1018 + 1404) / 2f,
                            SpellDamageModifier = 1.228f,
                            BaseCastTime = 2.0f,
                            BaseManaCost = (float)(int)(BaseMana * 0.11f),
                            DotEffect = null,
                            School = SpellSchool.Spellstorm,
                            BaseEnergy = 15
                        }
                    };
                }
                return _spellData;
            }
        }
        public Spell Starfire
        {
            get
            {
                return SpellData[0];
            }
        }
        public Spell Moonfire
        {
            get
            {
                return SpellData[1];
            }
        }
        public Spell Wrath
        {
            get
            {
                return SpellData[2];
            }
        }
        public Spell InsectSwarm
        {
            get
            {
                return SpellData[3];
            }
        }
        public Spell Starsurge
        {
            get
            {
                return SpellData[4];
            }
        }
        private void ResetSpellList()
        {
            // Since the property rebuilding the array is based on this variable being null, this effectively forces a refresh
            _spellData = null;
        }

        // The spell rotations themselves.
        private SpellRotation[] rotations = null;
        public SpellRotation[] Rotations
        {
            get
            {
                if (rotations == null)
                {
                    rotations = new SpellRotation[3]
                    {
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Unused" } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall Lunar Only", StarfallCastMode = StarfallMode.LunarOnly } },
                        new SpellRotation() { RotationData = new RotationData() { Name = "Starfall On CD", StarfallCastMode = StarfallMode.OnCooldown } },
                    };
                    //RecreateRotations();
                }
                return rotations;
            }
        }

        // Results data from the calculations, which will be sent to the UI.
        RotationData[] cachedResults = new RotationData[3];

        public void Solve(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            CalculationOptionsMoonkin calcOpts = character.CalculationOptions as CalculationOptionsMoonkin;
            DruidTalents talents = character.DruidTalents;
            procEffects = new List<ProcEffect>();
            UpdateSpells(character, ref calcs);

            float trinketDPS = 0.0f;
            float baseSpellPower = calcs.SpellPower;
            float baseHit = 1 - Math.Max(0, calcs.SpellHitCap - calcs.SpellHit);
            float baseCrit = calcs.SpellCrit;
            float baseHaste = calcs.SpellHaste;
            float baseMastery = calcs.Mastery;
            float sub35PercentTime = (float)(character.BossOptions.Under20Perc + character.BossOptions.Under35Perc);

            BuildProcList(calcs);

            float maxDamageDone = 0.0f, maxBurstDamageDone = 0.0f;
            SpellRotation maxBurstRotation = Rotations[0];
            SpellRotation maxRotation = Rotations[0];

            float manaPool = GetEffectiveManaPool(character, calcOpts, calcs);

            float manaGained = manaPool - calcs.BasicStats.Mana;

            float oldArcaneMultiplier = calcs.BasicStats.BonusArcaneDamageMultiplier;
            float oldNatureMultiplier = calcs.BasicStats.BonusNatureDamageMultiplier;

            int rotationIndex = 1;
            foreach (SpellRotation rot in Rotations)
            {
                if (rot.RotationData.Name == "None") continue;
                rot.Solver = this;

                // Reset variables modified in the pre-loop to base values
                float currentSpellPower = baseSpellPower;
                float currentCrit = baseCrit + StatConversion.NPC_LEVEL_SPELL_CRIT_MOD[character.BossOptions.Level - character.Level];
                float currentHaste = baseHaste;
                float currentMastery = baseMastery;
                float currentTrinketDPS = trinketDPS;
                calcs.BasicStats.BonusArcaneDamageMultiplier = oldArcaneMultiplier;
                calcs.BasicStats.BonusNatureDamageMultiplier = oldNatureMultiplier;
                float accumulatedDamage = 0.0f;
                float totalUpTime = 0.0f;
                float[] spellDetails = new float[NUM_SPELL_DETAILS];
                List<ProcEffect> activatedEffects = new List<ProcEffect>();
                List<ProcEffect> alwaysUpEffects = new List<ProcEffect>();

                float baselineDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);

                // Calculate spell power/spell damage modifying trinkets in a separate pre-loop
                // Add spell crit effects here as well, since they no longer affect timing
                foreach (ProcEffect proc in procEffects)
                {
                    bool handled = false;
                    if (proc.Effect.Stats.SpellPower > 0 || proc.Effect.Stats.CritRating > 0 || proc.Effect.Stats.MasteryRating > 0)
                    {
                        handled = true;
                        float procSpellPower = proc.Effect.Stats.SpellPower;
                        float procSpellCrit = StatConversion.GetSpellCritFromRating(proc.Effect.Stats.CritRating);
                        float procMastery = StatConversion.GetMasteryFromRating(proc.Effect.Stats.MasteryRating);

                        float triggerInterval = 0.0f, triggerChance = 1.0f;
                        switch (proc.Effect.Trigger)
                        {
                            case Trigger.DamageDone:
                            case Trigger.DamageOrHealingDone:
                                triggerInterval = ((rot.RotationData.Duration / rot.RotationData.CastCount) + (rot.RotationData.Duration / (rot.RotationData.MoonfireTicks + rot.RotationData.InsectSwarmTicks))) / 2.0f;
                                break;
                            case Trigger.Use:
                                break;
                            case Trigger.SpellHit:
                            case Trigger.DamageSpellHit:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                triggerChance = baseHit;
                                break;
                            case Trigger.SpellCrit:
                            case Trigger.DamageSpellCrit:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts);
                                triggerChance = baseCrit;
                                break;
                            case Trigger.SpellCast:
                            case Trigger.DamageSpellCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.CastCount;
                                break;
                            case Trigger.MoonfireCast:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireCasts;
                                break;
                            case Trigger.DoTTick:
                                triggerInterval = rot.RotationData.Duration / (rot.RotationData.InsectSwarmTicks + rot.RotationData.MoonfireTicks);
                                break;
                            case Trigger.MoonfireTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.MoonfireTicks;
                                break;
                            case Trigger.InsectSwarmTick:
                                triggerInterval = rot.RotationData.Duration / rot.RotationData.InsectSwarmTicks;
                                break;
                            default:
                                triggerChance = 0.0f;
                                break;
                        }
                        if (triggerChance > 0)
                        {
                            float durationMultiplier = proc.Effect.LimitedToExecutePhase ? sub35PercentTime : 1f;
                            currentSpellPower += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                            proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellPower * durationMultiplier;
                            currentCrit += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procSpellCrit * durationMultiplier;
                            currentMastery += (proc.Effect.MaxStack > 1 ? proc.Effect.GetAverageStackSize(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f * durationMultiplier) : 1) *
                                proc.Effect.GetAverageUptime(triggerInterval, triggerChance, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * procMastery * durationMultiplier;
                        }
                    }
                    // 2T10 (both if statements, which is why it isn't else-if)
                    if (proc.Effect.Stats.BonusArcaneDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusArcaneDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusArcaneDamageMultiplier;
                    }
                    if (proc.Effect.Stats.BonusNatureDamageMultiplier > 0)
                    {
                        handled = true;
                        calcs.BasicStats.BonusNatureDamageMultiplier += proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.BonusNatureDamageMultiplier;
                    }
                    // Variable Pulse Lightning Capacitor
                    // This might catch some other effects, I probably need a better way to differentiate
                    if (proc.Effect.Trigger == Trigger.DamageSpellCrit && proc.Effect.Stats.NatureDamage > 0)
                    {
                        float procInterval = rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts + rot.RotationData.DotTicks);
                        currentTrinketDPS += proc.Effect.GetAverageProcsPerSecond(procInterval, currentCrit, 3.0f, character.BossOptions.BerserkTimer * 60.0f) * proc.Effect.Stats.NatureDamage;
                    }
                    // Nested special effects
                    if (proc.Effect.Stats._rawSpecialEffectDataSize > 0)
                    {
                        handled = true;
                        SpecialEffect childEffect = proc.Effect.Stats._rawSpecialEffectData[0];
                        // Heart of Ignacious
                        if (childEffect.Stats.SpellPower > 0)
                        {
                            float averageStack = childEffect.GetAverageStackSize(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit, 3.0f, proc.Effect.Duration);
                            currentSpellPower += childEffect.Stats.SpellPower * averageStack * proc.Effect.GetAverageUptime(rot.RotationData.Duration / rot.RotationData.CastCount, baseHit);
                        }
                        // 4T11
                        if (childEffect.Stats.SpellCrit != 0)
                        {
                            float maxStack = proc.Effect.Stats.SpellCrit;
                            float numNegativeStacks = childEffect.GetAverageStackSize(rot.RotationData.Duration / (rot.RotationData.CastCount - rot.RotationData.InsectSwarmCasts), Math.Min(1.0f, baseCrit + maxStack), 3.0f, proc.Effect.Duration);
                            float averageNegativeValue = childEffect.Stats.SpellCrit * numNegativeStacks;
                            float averageCrit = maxStack + averageNegativeValue;
                            currentCrit += averageCrit * proc.Effect.GetAverageUptime(rot.RotationData.Duration / 2f, 1f, 3.0f, character.BossOptions.BerserkTimer * 60.0f);
                        }
                    }
                    if (!handled)
                    {
                        if (proc.CalculateDPS != null)
                        {
                            accumulatedDamage += proc.CalculateDPS(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) * rot.RotationData.Duration;
                        }
                        if (proc.Activate != null)
                        {
                            float upTime = proc.UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            // Procs with 100% uptime should be activated and not put into the combination loop
                            if (upTime == 1)
                            {
                                alwaysUpEffects.Add(proc);
                                proc.Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                            }
                            // Procs with uptime 0 < x < 100 should be activated
                            else if (upTime > 0)
                                activatedEffects.Add(proc);
                        }
                        if (proc.CalculateMP5 != null)
                        {
                            manaGained += proc.CalculateMP5(rot, calcs, character.BossOptions.BerserkTimer, currentSpellPower, baseHit, currentCrit, currentHaste) / 5.0f * character.BossOptions.BerserkTimer * 60.0f;
                        }
                    }
                }
                // Calculate stat-boosting trinkets, taking into effect interactions with other stat-boosting procs
                int sign = 1;
                float[] cachedDamages = new float[1 << activatedEffects.Count];
                float[] cachedUptimes = new float[1 << activatedEffects.Count];
                float[,] cachedDetails = new float[1 << activatedEffects.Count, NUM_SPELL_DETAILS];
                List<int> calculatedPairs = new List<int>();
                // Iterate over the entire set of trinket combinations (each trinket by itself, 2 at a time, ...)
                for (int i = 1; i <= activatedEffects.Count; ++i)
                {
                    // Create a new combination generator for this "level" of trinket interaction
                    CombinationGenerator gen = new CombinationGenerator(activatedEffects.Count, i);
                    // Iterate over all combinations
                    while (gen.HasNext())
                    {
                        float tempUpTime = 1.0f;
                        int[] vals = gen.GetNext();
                        int pairs = 0;
                        int lengthCounter = 0;
                        // Activate the trinkets, calculate the damage and uptime, then deactivate them
                        foreach (int idx in vals)
                        {
                            pairs |= 1 << idx;
                            ++lengthCounter;
                            activatedEffects[idx].Activate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        currentCrit = (float)Math.Min(1.0f, currentCrit);
                        float tempDPS = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency) / rot.RotationData.Duration;
                        spellDetails[0] = rot.RotationData.StarfireAvgHit;
                        spellDetails[1] = rot.RotationData.WrathAvgHit;
                        spellDetails[2] = rot.RotationData.MoonfireAvgHit;
                        spellDetails[3] = rot.RotationData.InsectSwarmAvgHit;
                        spellDetails[4] = rot.RotationData.StarSurgeAvgHit;
                        spellDetails[5] = rot.RotationData.StarfireAvgCast;
                        spellDetails[6] = rot.RotationData.WrathAvgCast;
                        spellDetails[7] = rot.RotationData.MoonfireAvgCast;
                        spellDetails[8] = rot.RotationData.InsectSwarmAvgCast;
                        spellDetails[9] = rot.RotationData.StarSurgeAvgCast;
                        spellDetails[10] = rot.RotationData.AverageInstantCast;
                        spellDetails[11] = rot.RotationData.StarfireAvgEnergy;
                        spellDetails[12] = rot.RotationData.WrathAvgEnergy;
                        spellDetails[13] = rot.RotationData.StarSurgeAvgEnergy;
                        spellDetails[14] = rot.RotationData.TreantDamage;
                        spellDetails[15] = rot.RotationData.StarfallDamage;
                        spellDetails[16] = rot.RotationData.MushroomDamage;
                        foreach (int idx in vals)
                        {
                            tempUpTime *= activatedEffects[idx].UpTime(rot, calcs, character.BossOptions.BerserkTimer, (float)(character.BossOptions.Under35Perc + character.BossOptions.Under20Perc));
                            activatedEffects[idx].Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                        }
                        if (tempUpTime == 0) continue;
                        // Adjust previous probability tables by the current factor
                        // At the end of the algorithm, this ensures that the probability table will contain the individual
                        // probabilities of each effect or set of effects.
                        // These adjustments only need to be made for higher levels of the table, and if the current probability is > 0.
                        if (lengthCounter > 1)
                        {
                            foreach (int subset in calculatedPairs)
                            {
                                // Truly a subset?
                                if ((pairs & subset) != subset)
                                {
                                    continue;
                                }

                                // Calculate the "layer" of the current subset by getting the set bit count.
                                int subsetLength = 0;
                                for (int j = subset; j > 0; ++subsetLength)
                                {
                                    j &= --j;
                                }

                                // Set the sign of the operation: Evenly separated layers are added, oddly separated layers are subtracted
                                int newSign = ((lengthCounter - subsetLength) % 2 == 0) ? 1 : -1;

                                // Adjust by current uptime * sign of operation.
                                cachedUptimes[subset] += newSign * tempUpTime;
                            }
                        }
                        // Cache the results to be calculated later
                        cachedUptimes[pairs] = tempUpTime;
                        cachedDamages[pairs] = tempDPS;
                        for (int idx = 0; idx < NUM_SPELL_DETAILS; ++idx)
                        {
                            cachedDetails[pairs, idx] = spellDetails[idx];
                        }
                        calculatedPairs.Add(pairs);
                        totalUpTime += sign * tempUpTime;
                    }
                    sign = -sign;
                }
                float accumulatedDPS = 0.0f;
                Array.Clear(spellDetails, 0, spellDetails.Length);
                // Apply the above-calculated probabilities to the previously stored damage calculations and add to the result.
                for (int idx = 0; idx < cachedUptimes.Length; ++idx)
                {
                    if (cachedUptimes[idx] == 0) continue;
                    accumulatedDPS += cachedUptimes[idx] * cachedDamages[idx];
                    for (int i = 0; i < NUM_SPELL_DETAILS; ++i)
                    {
                        spellDetails[i] += cachedUptimes[idx] * cachedDetails[idx,i];
                    }
                }
                float damageDone = rot.DamageDone(character, calcs, calcOpts.TreantLifespan, currentSpellPower, baseHit, currentCrit, currentHaste, currentMastery, calcOpts.Latency);
                accumulatedDPS += (1 - totalUpTime) * damageDone / rot.RotationData.Duration;
                spellDetails[0] += (1 - totalUpTime) * rot.RotationData.StarfireAvgHit;
                spellDetails[1] += (1 - totalUpTime) * rot.RotationData.WrathAvgHit;
                spellDetails[2] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgHit;
                spellDetails[3] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgHit;
                spellDetails[4] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgHit;
                spellDetails[5] += (1 - totalUpTime) * rot.RotationData.StarfireAvgCast;
                spellDetails[6] += (1 - totalUpTime) * rot.RotationData.WrathAvgCast;
                spellDetails[7] += (1 - totalUpTime) * rot.RotationData.MoonfireAvgCast;
                spellDetails[8] += (1 - totalUpTime) * rot.RotationData.InsectSwarmAvgCast;
                spellDetails[9] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgCast;
                spellDetails[10] += (1 - totalUpTime) * rot.RotationData.AverageInstantCast;
                spellDetails[11] += (1 - totalUpTime) * rot.RotationData.StarfireAvgEnergy;
                spellDetails[12] += (1 - totalUpTime) * rot.RotationData.WrathAvgEnergy;
                spellDetails[13] += (1 - totalUpTime) * rot.RotationData.StarSurgeAvgEnergy;
                spellDetails[14] += (1 - totalUpTime) * rot.RotationData.TreantDamage;
                spellDetails[15] += (1 - totalUpTime) * rot.RotationData.StarfallDamage;
                spellDetails[16] += (1 - totalUpTime) * rot.RotationData.MushroomDamage;

                float burstDPS = accumulatedDPS + accumulatedDamage / rot.RotationData.Duration;
                float sustainedDPS = burstDPS;

                // Mana calcs:
                // Main rotation - all spells
                // Movement rotation - Lunar Shower MF, IS, Shooting Stars procs, and Starfall only
                rot.RotationData.ManaGained += manaGained / (character.BossOptions.BerserkTimer * 60.0f) * rot.RotationData.Duration;
                float timeToOOM = manaPool / ((rot.RotationData.ManaUsed - rot.RotationData.ManaGained) / rot.RotationData.Duration);
                if (timeToOOM <= 0) timeToOOM = character.BossOptions.BerserkTimer * 60.0f;   // Happens when ManaUsed is less than 0
                if (timeToOOM < character.BossOptions.BerserkTimer * 60.0f)
                {
                    rot.RotationData.TimeToOOM = new TimeSpan(0, (int)(timeToOOM / 60), (int)(timeToOOM % 60));
                    sustainedDPS = burstDPS * timeToOOM / (character.BossOptions.BerserkTimer * 60.0f);
                }
                
                burstDPS += currentTrinketDPS;
                sustainedDPS += currentTrinketDPS;

                rot.RotationData.SustainedDPS = sustainedDPS;
                rot.RotationData.BurstDPS = burstDPS;
                rot.RotationData.StarfireAvgHit = spellDetails[0];
                rot.RotationData.WrathAvgHit = spellDetails[1];
                rot.RotationData.MoonfireAvgHit = spellDetails[2];
                rot.RotationData.InsectSwarmAvgHit = spellDetails[3];
                rot.RotationData.StarSurgeAvgHit = spellDetails[4];
                rot.RotationData.StarfireAvgCast = spellDetails[5];
                rot.RotationData.WrathAvgCast = spellDetails[6];
                rot.RotationData.MoonfireAvgCast = spellDetails[7];
                rot.RotationData.InsectSwarmAvgCast = spellDetails[8];
                rot.RotationData.StarSurgeAvgCast = spellDetails[9];
                rot.RotationData.AverageInstantCast = spellDetails[10];
                rot.RotationData.StarfireAvgEnergy = spellDetails[11];
                rot.RotationData.WrathAvgEnergy = spellDetails[12];
                rot.RotationData.StarSurgeAvgEnergy = spellDetails[13];
                rot.RotationData.TreantDamage = spellDetails[14];
                rot.RotationData.StarfallDamage = spellDetails[15];
                rot.RotationData.MushroomDamage = spellDetails[16];

                // Update the sustained DPS rotation if any one of the following three cases is true:
                // 1) No user rotation is selected and sustained DPS is maximum
                // 2) A user rotation is selected, Eclipse is not present, and the user rotation matches the current rotation
                // 3) A user rotation is selected, Eclipse is present, and the user rotation's dot spells matches this rotation's
                if ((calcOpts.UserRotation == "None" && sustainedDPS > maxDamageDone) || rot.RotationData.Name == calcOpts.UserRotation)
                {
                    maxDamageDone = sustainedDPS;
                    maxRotation = rot;
                }
                if (burstDPS > maxBurstDamageDone)
                {
                    maxBurstDamageDone = burstDPS;
                    maxBurstRotation = rot;
                }
                cachedResults[rotationIndex - 1] = rot.RotationData;

                // Deactivate always-up procs
                foreach (ProcEffect proc in alwaysUpEffects)
                {
                    proc.Deactivate(character, calcs, ref currentSpellPower, ref baseHit, ref currentCrit, ref currentHaste, ref currentMastery);
                }

                ++rotationIndex;
            }
            // Present the findings to the user.
            calcs.SelectedRotation = maxRotation.RotationData;
            calcs.BurstRotation = maxBurstRotation.RotationData;
            calcs.SubPoints = new float[] { maxBurstDamageDone, maxDamageDone };
            calcs.OverallPoints = calcs.SubPoints[0] + calcs.SubPoints[1];
            calcs.Rotations = cachedResults;
        }

        // Create proc effect calculations for proc-based trinkets.
        private void BuildProcList(CharacterCalculationsMoonkin calcs)
        {
            // Implement a new handler for each special effect in the calculations stats
            foreach (SpecialEffect effect in calcs.BasicStats.SpecialEffects())
            {
                procEffects.Add(new ProcEffect(effect));
            }
        }

        // Non-rotation-specific mana calculations
        private float GetEffectiveManaPool(Character character, CalculationOptionsMoonkin calcOpts, CharacterCalculationsMoonkin calcs)
        {
            float fightLength = character.BossOptions.BerserkTimer * 60.0f;

            float innervateCooldown = 180;

            // Mana/5 calculations
            float totalManaRegen = calcs.ManaRegen * fightLength;

            // Mana pot calculations
            float manaRestoredByPots = 0.0f;
            foreach (Buff b in character.ActiveBuffs)
            {
                if (b.Stats.ManaRestore > 0)
                {
                    manaRestoredByPots = b.Stats.ManaRestore;
                    break;
                }
            }

            // Innervate calculations
            float innervateDelay = calcOpts.InnervateDelay * 60.0f;
            int numInnervates = (calcOpts.Innervate && fightLength - innervateDelay > 0) ? ((int)(fightLength - innervateDelay) / (int)innervateCooldown + 1) : 0;
            float totalInnervateMana = numInnervates * 0.2f * calcs.BasicStats.Mana;
            totalInnervateMana *= 1 + 0.15f * character.DruidTalents.Dreamstate;

            // Replenishment calculations
            float replenishmentPerTick = calcs.BasicStats.Mana * calcs.BasicStats.ManaRestoreFromMaxManaPerSecond;
            float replenishmentMana = calcOpts.ReplenishmentUptime * replenishmentPerTick * character.BossOptions.BerserkTimer * 60;

            return calcs.BasicStats.Mana + totalInnervateMana + totalManaRegen + manaRestoredByPots + replenishmentMana;
        }

        /*private void RecreateRotations()
        {
            rotations[0] = new SpellRotation() { RotationData = new RotationData() { Name = "None" } };
            for (int mfMode = 0; mfMode < 2; ++mfMode)
            {
                for (int isMode = 0; isMode < 2; ++isMode)
                {
                    for (int sfMode = 0; sfMode < 3; ++sfMode)
                    {
                        for (int wmMode = 0; wmMode < 3; ++wmMode)
                        {
                            int index = 1 + (wmMode + 3 * sfMode + 9 * isMode + 18 * mfMode);
                            DotMode mfModeEnum = (DotMode)mfMode;
                            DotMode isModeEnum = (DotMode)isMode;
                            StarfallMode sfModeEnum = (StarfallMode)sfMode;
                            MushroomMode wmModeEnum = (MushroomMode)wmMode;
                            string name = String.Format("MF {0} IS {1} SF {2} WM {3}",
                                mfModeEnum.ToString(),
                                isModeEnum.ToString(),
                                sfModeEnum.ToString(),
                                wmModeEnum.ToString());
                            rotations[index] = new SpellRotation()
                            {
                                RotationData = new RotationData()
                                {
                                    Name = name,
                                    MoonfireRefreshMode = mfModeEnum,
                                    InsectSwarmRefreshMode = isModeEnum,
                                    StarfallCastMode = sfModeEnum,
                                    WildMushroomCastMode = wmModeEnum
                                }
                            };
                        }
                    }
                }
            }
        }*/

        // Add talented effects to the spells
        private void UpdateSpells(Character character, ref CharacterCalculationsMoonkin calcs)
        {
            DruidTalents talents = character.DruidTalents;
            StatsMoonkin stats = calcs.BasicStats;

            switch (talents.StarlightWrath)
            {
                case 1:
                    Starfire.BaseCastTime -= 0.15f;
                    Wrath.BaseCastTime -= 0.15f;
                    break;
                case 2:
                    Starfire.BaseCastTime -= 0.25f;
                    Wrath.BaseCastTime -= 0.25f;
                    break;
                case 3:
                    Starfire.BaseCastTime -= 0.5f;
                    Wrath.BaseCastTime -= 0.5f;
                    break;
                default:
                    break;
            }

            float moonfireDotGlyph = talents.GlyphOfMoonfire ? 0.2f : 0.0f;
            float insectSwarmGlyph = talents.GlyphOfInsectSwarm ? 0.3f : 0.0f;
            // Add spell-specific damage
            // Moonfire, Insect Swarm: glyphs
            Moonfire.DotEffect.AllDamageModifier *= 1 + moonfireDotGlyph;
            InsectSwarm.DotEffect.AllDamageModifier *= 1 + insectSwarmGlyph;
            // Moonfire: Direct damage +(0.03 * Blessing of the Grove)
            Moonfire.AllDamageModifier *= 1 + 0.03f * talents.BlessingOfTheGrove;
            // Moonfire, Insect Swarm: +2/4/6 seconds for Genesis
            Moonfire.DotEffect.BaseDuration += 2f * talents.Genesis;
            InsectSwarm.DotEffect.BaseDuration += 2f * talents.Genesis;
            // Wrath: 10% for glyph
            Wrath.AllDamageModifier *= 1 + (talents.GlyphOfWrath ? 0.1f : 0f);

            // Add spell-specific critical strike damage
            // Burning Shadowspirit Diamond
            float baseCritMultiplier = 1.5f * (1 + stats.BonusCritDamageMultiplier);
            float moonfuryMultiplier = baseCritMultiplier + (baseCritMultiplier - 1);
            Starfire.CriticalDamageModifier = Wrath.CriticalDamageModifier = Moonfire.CriticalDamageModifier = InsectSwarm.CriticalDamageModifier = moonfuryMultiplier;
            Starsurge.CriticalDamageModifier = moonfuryMultiplier;

            // Reduce spell-specific mana costs
            // Shard of Woe (Mana cost -405)
            Starfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Moonfire.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            Wrath.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            InsectSwarm.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction + calcs.BasicStats.NatureSpellsManaCostReduction;
            Starsurge.BaseManaCost -= calcs.BasicStats.SpellsManaCostReduction;
            // All spells: Mana cost -(0.03 * Moonglow)
            Starfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Moonfire.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Wrath.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            InsectSwarm.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);
            Starsurge.BaseManaCost *= 1.0f - (0.03f * talents.Moonglow);

            // Add set bonuses
            Moonfire.CriticalChanceModifier += stats.BonusCritChanceMoonfire;
            InsectSwarm.CriticalChanceModifier += stats.BonusCritChanceInsectSwarm;
            Starfire.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Wrath.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;
            Starsurge.AllDamageModifier *= 1 + stats.BonusNukeDamageModifier;

            // Dragonwrath, Tarecgosa's Rest: X% chance on damaging spell cast to proc a duplicate version of the spell.
            // If it duplicates a DoT tick, it fires Wrath of Tarecgosa for an equivalent amount of damage.
            // Wrath, Starfire, and Starsurge will duplicate the Eclipse energy gained.
            if (calcs.BasicStats.DragonwrathProc > 0)
            {
                Starfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Wrath.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Starsurge.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                Moonfire.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
                InsectSwarm.DotEffect.AllDamageModifier += MoonkinSolver.DRAGONWRATH_PROC_RATE;
            }

            // PTR changes go here
            if (((CalculationOptionsMoonkin)character.CalculationOptions).PTRMode)
            {
            }
        }
    }
}
